# 1 "/tmp/tmpxft_00000637_00000000-1_main.cudafe1.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/tmp/tmpxft_00000637_00000000-1_main.cudafe1.cpp"
# 1 "main.cu"
# 46 "/usr/local/cuda/bin/../include/device_types.h"
# 152 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stddef.h" 3
typedef int ptrdiff_t;
# 214 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stddef.h" 3
typedef unsigned long size_t;
# 1 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 1 3
# 69 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 3
# 1 "/usr/local/cuda/bin/../include/builtin_types.h" 1 3
# 42 "/usr/local/cuda/bin/../include/builtin_types.h" 3
# 1 "/usr/local/cuda/bin/../include/device_types.h" 1 3
# 46 "/usr/local/cuda/bin/../include/device_types.h" 3
enum cudaRoundMode
{
  cudaRoundNearest,
  cudaRoundZero,
  cudaRoundPosInf,
  cudaRoundMinInf
};
# 43 "/usr/local/cuda/bin/../include/builtin_types.h" 2 3
# 1 "/usr/local/cuda/bin/../include/driver_types.h" 1 3
# 96 "/usr/local/cuda/bin/../include/driver_types.h" 3
enum cudaError
{





  cudaSuccess = 0,





  cudaErrorMissingConfiguration = 1,





  cudaErrorMemoryAllocation = 2,





  cudaErrorInitializationError = 3,
# 131 "/usr/local/cuda/bin/../include/driver_types.h" 3
  cudaErrorLaunchFailure = 4,
# 140 "/usr/local/cuda/bin/../include/driver_types.h" 3
  cudaErrorPriorLaunchFailure = 5,
# 150 "/usr/local/cuda/bin/../include/driver_types.h" 3
  cudaErrorLaunchTimeout = 6,
# 159 "/usr/local/cuda/bin/../include/driver_types.h" 3
  cudaErrorLaunchOutOfResources = 7,





  cudaErrorInvalidDeviceFunction = 8,
# 174 "/usr/local/cuda/bin/../include/driver_types.h" 3
  cudaErrorInvalidConfiguration = 9,





  cudaErrorInvalidDevice = 10,





  cudaErrorInvalidValue = 11,





  cudaErrorInvalidPitchValue = 12,





  cudaErrorInvalidSymbol = 13,




  cudaErrorMapBufferObjectFailed = 14,




  cudaErrorUnmapBufferObjectFailed = 15,





  cudaErrorInvalidHostPointer = 16,





  cudaErrorInvalidDevicePointer = 17,





  cudaErrorInvalidTexture = 18,





  cudaErrorInvalidTextureBinding = 19,






  cudaErrorInvalidChannelDescriptor = 20,





  cudaErrorInvalidMemcpyDirection = 21,
# 255 "/usr/local/cuda/bin/../include/driver_types.h" 3
  cudaErrorAddressOfConstant = 22,
# 264 "/usr/local/cuda/bin/../include/driver_types.h" 3
  cudaErrorTextureFetchFailed = 23,
# 273 "/usr/local/cuda/bin/../include/driver_types.h" 3
  cudaErrorTextureNotBound = 24,
# 282 "/usr/local/cuda/bin/../include/driver_types.h" 3
  cudaErrorSynchronizationError = 25,





  cudaErrorInvalidFilterSetting = 26,





  cudaErrorInvalidNormSetting = 27,







  cudaErrorMixedDeviceExecution = 28,







  cudaErrorCudartUnloading = 29,




  cudaErrorUnknown = 30,





  cudaErrorNotYetImplemented = 31,
# 330 "/usr/local/cuda/bin/../include/driver_types.h" 3
  cudaErrorMemoryValueTooLarge = 32,






  cudaErrorInvalidResourceHandle = 33,







  cudaErrorNotReady = 34,






  cudaErrorInsufficientDriver = 35,
# 365 "/usr/local/cuda/bin/../include/driver_types.h" 3
  cudaErrorSetOnActiveProcess = 36,





  cudaErrorInvalidSurface = 37,





  cudaErrorNoDevice = 38,





  cudaErrorECCUncorrectable = 39,




  cudaErrorSharedObjectSymbolNotFound = 40,




  cudaErrorSharedObjectInitFailed = 41,





  cudaErrorUnsupportedLimit = 42,





  cudaErrorDuplicateVariableName = 43,





  cudaErrorDuplicateTextureName = 44,





  cudaErrorDuplicateSurfaceName = 45,
# 426 "/usr/local/cuda/bin/../include/driver_types.h" 3
  cudaErrorDevicesUnavailable = 46,




  cudaErrorInvalidKernelImage = 47,







  cudaErrorNoKernelImageForDevice = 48,
# 448 "/usr/local/cuda/bin/../include/driver_types.h" 3
  cudaErrorIncompatibleDriverContext = 49,




  cudaErrorStartupFailure = 0x7f,





  cudaErrorApiFailureBase = 10000
};





enum cudaChannelFormatKind
{
  cudaChannelFormatKindSigned = 0,
  cudaChannelFormatKindUnsigned = 1,
  cudaChannelFormatKindFloat = 2,
  cudaChannelFormatKindNone = 3
};





struct cudaChannelFormatDesc
{
  int x;
  int y;
  int z;
  int w;
  enum cudaChannelFormatKind f;
};





struct cudaArray;





enum cudaMemcpyKind
{
  cudaMemcpyHostToHost = 0,
  cudaMemcpyHostToDevice = 1,
  cudaMemcpyDeviceToHost = 2,
  cudaMemcpyDeviceToDevice = 3
};






struct cudaPitchedPtr
{
  void *ptr;
  size_t pitch;
  size_t xsize;
  size_t ysize;
};






struct cudaExtent
{
  size_t width;
  size_t height;
  size_t depth;
};






struct cudaPos
{
  size_t x;
  size_t y;
  size_t z;
};





struct cudaMemcpy3DParms
{
  struct cudaArray *srcArray;
  struct cudaPos srcPos;
  struct cudaPitchedPtr srcPtr;

  struct cudaArray *dstArray;
  struct cudaPos dstPos;
  struct cudaPitchedPtr dstPtr;

  struct cudaExtent extent;
  enum cudaMemcpyKind kind;
};





struct cudaGraphicsResource;





enum cudaGraphicsRegisterFlags
{
  cudaGraphicsRegisterFlagsNone = 0
};





enum cudaGraphicsMapFlags
{
  cudaGraphicsMapFlagsNone = 0,
  cudaGraphicsMapFlagsReadOnly = 1,
  cudaGraphicsMapFlagsWriteDiscard = 2
};





enum cudaGraphicsCubeFace {
  cudaGraphicsCubeFacePositiveX = 0x00,
  cudaGraphicsCubeFaceNegativeX = 0x01,
  cudaGraphicsCubeFacePositiveY = 0x02,
  cudaGraphicsCubeFaceNegativeY = 0x03,
  cudaGraphicsCubeFacePositiveZ = 0x04,
  cudaGraphicsCubeFaceNegativeZ = 0x05
};





struct cudaFuncAttributes
{





   size_t sharedSizeBytes;





   size_t constSizeBytes;




   size_t localSizeBytes;






   int maxThreadsPerBlock;




   int numRegs;






   int ptxVersion;






   int binaryVersion;

   int __cudaReserved[6];
};





enum cudaFuncCache
{
  cudaFuncCachePreferNone = 0,
  cudaFuncCachePreferShared = 1,
  cudaFuncCachePreferL1 = 2
};





enum cudaComputeMode
{
  cudaComputeModeDefault = 0,
  cudaComputeModeExclusive = 1,
  cudaComputeModeProhibited = 2
};





enum cudaLimit
{
    cudaLimitStackSize = 0x00,
    cudaLimitPrintfFifoSize = 0x01,
    cudaLimitMallocHeapSize = 0x02
};





struct cudaDeviceProp
{
  char name[256];
  size_t totalGlobalMem;
  size_t sharedMemPerBlock;
  int regsPerBlock;
  int warpSize;
  size_t memPitch;
  int maxThreadsPerBlock;
  int maxThreadsDim[3];
  int maxGridSize[3];
  int clockRate;
  size_t totalConstMem;
  int major;
  int minor;
  size_t textureAlignment;
  int deviceOverlap;
  int multiProcessorCount;
  int kernelExecTimeoutEnabled;
  int integrated;
  int canMapHostMemory;
  int computeMode;
  int maxTexture1D;
  int maxTexture2D[2];
  int maxTexture3D[3];
  int maxTexture2DArray[3];
  size_t surfaceAlignment;
  int concurrentKernels;
  int ECCEnabled;
  int pciBusID;
  int pciDeviceID;
  int tccDriver;
  int __cudaReserved[21];
};
# 768 "/usr/local/cuda/bin/../include/driver_types.h" 3
typedef enum cudaError cudaError_t;





typedef struct CUstream_st *cudaStream_t;





typedef struct CUevent_st *cudaEvent_t;





typedef struct cudaGraphicsResource *cudaGraphicsResource_t;





typedef struct CUuuid_st cudaUUID_t;
# 44 "/usr/local/cuda/bin/../include/builtin_types.h" 2 3
# 1 "/usr/local/cuda/bin/../include/surface_types.h" 1 3
# 63 "/usr/local/cuda/bin/../include/surface_types.h" 3
enum cudaSurfaceBoundaryMode
{
  cudaBoundaryModeZero = 0,
  cudaBoundaryModeClamp = 1,
  cudaBoundaryModeTrap = 2
};





enum cudaSurfaceFormatMode
{
  cudaFormatModeForced = 0,
  cudaFormatModeAuto = 1
};





struct surfaceReference
{



  struct cudaChannelFormatDesc channelDesc;
};
# 45 "/usr/local/cuda/bin/../include/builtin_types.h" 2 3
# 1 "/usr/local/cuda/bin/../include/texture_types.h" 1 3
# 63 "/usr/local/cuda/bin/../include/texture_types.h" 3
enum cudaTextureAddressMode
{
  cudaAddressModeWrap = 0,
  cudaAddressModeClamp = 1,
  cudaAddressModeMirror = 2,
  cudaAddressModeBorder = 3
};





enum cudaTextureFilterMode
{
  cudaFilterModePoint = 0,
  cudaFilterModeLinear = 1
};





enum cudaTextureReadMode
{
  cudaReadModeElementType = 0,
  cudaReadModeNormalizedFloat = 1
};





struct textureReference
{



  int normalized;



  enum cudaTextureFilterMode filterMode;



  enum cudaTextureAddressMode addressMode[3];



  struct cudaChannelFormatDesc channelDesc;
  int __cudaReserved[16];
};
# 46 "/usr/local/cuda/bin/../include/builtin_types.h" 2 3
# 1 "/usr/local/cuda/bin/../include/vector_types.h" 1 3
# 45 "/usr/local/cuda/bin/../include/vector_types.h" 3
# 1 "/usr/local/cuda/bin/../include/builtin_types.h" 1 3
# 46 "/usr/local/cuda/bin/../include/builtin_types.h" 3
# 1 "/usr/local/cuda/bin/../include/vector_types.h" 1 3
# 46 "/usr/local/cuda/bin/../include/builtin_types.h" 2 3
# 46 "/usr/local/cuda/bin/../include/vector_types.h" 2 3
# 1 "/usr/local/cuda/bin/../include/host_defines.h" 1 3
# 47 "/usr/local/cuda/bin/../include/vector_types.h" 2 3
# 75 "/usr/local/cuda/bin/../include/vector_types.h" 3
struct char1
{
  signed char x;
};


struct uchar1
{
  unsigned char x;
};


struct __attribute__((aligned(2))) char2
{
  signed char x, y;
};


struct __attribute__((aligned(2))) uchar2
{
  unsigned char x, y;
};


struct char3
{
  signed char x, y, z;
};


struct uchar3
{
  unsigned char x, y, z;
};


struct __attribute__((aligned(4))) char4
{
  signed char x, y, z, w;
};


struct __attribute__((aligned(4))) uchar4
{
  unsigned char x, y, z, w;
};


struct short1
{
  short x;
};


struct ushort1
{
  unsigned short x;
};


struct __attribute__((aligned(4))) short2
{
  short x, y;
};


struct __attribute__((aligned(4))) ushort2
{
  unsigned short x, y;
};


struct short3
{
  short x, y, z;
};


struct ushort3
{
  unsigned short x, y, z;
};


struct __attribute__((aligned(8))) short4 { short x; short y; short z; short w; };


struct __attribute__((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };


struct int1
{
  int x;
};


struct uint1
{
  unsigned int x;
};


struct __attribute__((aligned(8))) int2 { int x; int y; };


struct __attribute__((aligned(8))) uint2 { unsigned int x; unsigned int y; };


struct int3
{
  int x, y, z;
};


struct uint3
{
  unsigned int x, y, z;
};


struct __attribute__((aligned(16))) int4
{
  int x, y, z, w;
};


struct __attribute__((aligned(16))) uint4
{
  unsigned int x, y, z, w;
};


struct long1
{
  long int x;
};


struct ulong1
{
  unsigned long x;
};
# 229 "/usr/local/cuda/bin/../include/vector_types.h" 3
struct __attribute__((aligned(2*sizeof(long int)))) long2
{
  long int x, y;
};


struct __attribute__((aligned(2*sizeof(unsigned long int)))) ulong2
{
  unsigned long int x, y;
};




struct long3
{
  long int x, y, z;
};


struct ulong3
{
  unsigned long int x, y, z;
};


struct __attribute__((aligned(16))) long4
{
  long int x, y, z, w;
};


struct __attribute__((aligned(16))) ulong4
{
  unsigned long int x, y, z, w;
};


struct float1
{
  float x;
};


struct __attribute__((aligned(8))) float2 { float x; float y; };


struct float3
{
  float x, y, z;
};


struct __attribute__((aligned(16))) float4
{
  float x, y, z, w;
};


struct longlong1
{
  long long int x;
};


struct ulonglong1
{
  unsigned long long int x;
};


struct __attribute__((aligned(16))) longlong2
{
  long long int x, y;
};


struct __attribute__((aligned(16))) ulonglong2
{
  unsigned long long int x, y;
};


struct longlong3
{
  long long int x, y, z;
};


struct ulonglong3
{
  unsigned long long int x, y, z;
};


struct __attribute__((aligned(16))) longlong4
{
  long long int x, y, z ,w;
};


struct __attribute__((aligned(16))) ulonglong4
{
  unsigned long long int x, y, z, w;
};


struct double1
{
  double x;
};


struct __attribute__((aligned(16))) double2
{
  double x, y;
};


struct double3
{
  double x, y, z;
};


struct __attribute__((aligned(16))) double4
{
  double x, y, z, w;
};
# 366 "/usr/local/cuda/bin/../include/vector_types.h" 3
typedef struct char1 char1;

typedef struct uchar1 uchar1;

typedef struct char2 char2;

typedef struct uchar2 uchar2;

typedef struct char3 char3;

typedef struct uchar3 uchar3;

typedef struct char4 char4;

typedef struct uchar4 uchar4;

typedef struct short1 short1;

typedef struct ushort1 ushort1;

typedef struct short2 short2;

typedef struct ushort2 ushort2;

typedef struct short3 short3;

typedef struct ushort3 ushort3;

typedef struct short4 short4;

typedef struct ushort4 ushort4;

typedef struct int1 int1;

typedef struct uint1 uint1;

typedef struct int2 int2;

typedef struct uint2 uint2;

typedef struct int3 int3;

typedef struct uint3 uint3;

typedef struct int4 int4;

typedef struct uint4 uint4;

typedef struct long1 long1;

typedef struct ulong1 ulong1;

typedef struct long2 long2;

typedef struct ulong2 ulong2;

typedef struct long3 long3;

typedef struct ulong3 ulong3;

typedef struct long4 long4;

typedef struct ulong4 ulong4;

typedef struct float1 float1;

typedef struct float2 float2;

typedef struct float3 float3;

typedef struct float4 float4;

typedef struct longlong1 longlong1;

typedef struct ulonglong1 ulonglong1;

typedef struct longlong2 longlong2;

typedef struct ulonglong2 ulonglong2;

typedef struct longlong3 longlong3;

typedef struct ulonglong3 ulonglong3;

typedef struct longlong4 longlong4;

typedef struct ulonglong4 ulonglong4;

typedef struct double1 double1;

typedef struct double2 double2;

typedef struct double3 double3;

typedef struct double4 double4;
# 469 "/usr/local/cuda/bin/../include/vector_types.h" 3
struct dim3
{
    unsigned int x, y, z;

    dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
    dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }

};


typedef struct dim3 dim3;
# 46 "/usr/local/cuda/bin/../include/builtin_types.h" 2 3
# 70 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 2 3
# 1 "/usr/local/cuda/bin/../include/crt/storage_class.h" 1 3
# 71 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 2 3
# 216 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stddef.h" 2 3
# 96 "/usr/local/cuda/bin/../include/driver_types.h"
# 466 "/usr/local/cuda/bin/../include/driver_types.h"
# 478 "/usr/local/cuda/bin/../include/driver_types.h"
# 491 "/usr/local/cuda/bin/../include/driver_types.h"
# 497 "/usr/local/cuda/bin/../include/driver_types.h"
# 510 "/usr/local/cuda/bin/../include/driver_types.h"
# 523 "/usr/local/cuda/bin/../include/driver_types.h"
# 535 "/usr/local/cuda/bin/../include/driver_types.h"
# 546 "/usr/local/cuda/bin/../include/driver_types.h"
# 564 "/usr/local/cuda/bin/../include/driver_types.h"
# 570 "/usr/local/cuda/bin/../include/driver_types.h"
# 579 "/usr/local/cuda/bin/../include/driver_types.h"
# 590 "/usr/local/cuda/bin/../include/driver_types.h"
# 603 "/usr/local/cuda/bin/../include/driver_types.h"
# 656 "/usr/local/cuda/bin/../include/driver_types.h"
# 667 "/usr/local/cuda/bin/../include/driver_types.h"
# 678 "/usr/local/cuda/bin/../include/driver_types.h"
# 689 "/usr/local/cuda/bin/../include/driver_types.h"
# 768 "/usr/local/cuda/bin/../include/driver_types.h"
# 774 "/usr/local/cuda/bin/../include/driver_types.h"
# 780 "/usr/local/cuda/bin/../include/driver_types.h"
# 786 "/usr/local/cuda/bin/../include/driver_types.h"
# 792 "/usr/local/cuda/bin/../include/driver_types.h"
# 63 "/usr/local/cuda/bin/../include/surface_types.h"
# 74 "/usr/local/cuda/bin/../include/surface_types.h"
# 84 "/usr/local/cuda/bin/../include/surface_types.h"
# 63 "/usr/local/cuda/bin/../include/texture_types.h"
# 75 "/usr/local/cuda/bin/../include/texture_types.h"
# 85 "/usr/local/cuda/bin/../include/texture_types.h"
# 95 "/usr/local/cuda/bin/../include/texture_types.h"
# 75 "/usr/local/cuda/bin/../include/vector_types.h"
# 81 "/usr/local/cuda/bin/../include/vector_types.h"
# 87 "/usr/local/cuda/bin/../include/vector_types.h"
# 93 "/usr/local/cuda/bin/../include/vector_types.h"
# 99 "/usr/local/cuda/bin/../include/vector_types.h"
# 105 "/usr/local/cuda/bin/../include/vector_types.h"
# 111 "/usr/local/cuda/bin/../include/vector_types.h"
# 117 "/usr/local/cuda/bin/../include/vector_types.h"
# 123 "/usr/local/cuda/bin/../include/vector_types.h"
# 129 "/usr/local/cuda/bin/../include/vector_types.h"
# 135 "/usr/local/cuda/bin/../include/vector_types.h"
# 141 "/usr/local/cuda/bin/../include/vector_types.h"
# 147 "/usr/local/cuda/bin/../include/vector_types.h"
# 153 "/usr/local/cuda/bin/../include/vector_types.h"
# 159 "/usr/local/cuda/bin/../include/vector_types.h"
# 162 "/usr/local/cuda/bin/../include/vector_types.h"
# 165 "/usr/local/cuda/bin/../include/vector_types.h"
# 171 "/usr/local/cuda/bin/../include/vector_types.h"
# 177 "/usr/local/cuda/bin/../include/vector_types.h"
# 180 "/usr/local/cuda/bin/../include/vector_types.h"
# 183 "/usr/local/cuda/bin/../include/vector_types.h"
# 189 "/usr/local/cuda/bin/../include/vector_types.h"
# 195 "/usr/local/cuda/bin/../include/vector_types.h"
# 201 "/usr/local/cuda/bin/../include/vector_types.h"
# 207 "/usr/local/cuda/bin/../include/vector_types.h"
# 213 "/usr/local/cuda/bin/../include/vector_types.h"
# 229 "/usr/local/cuda/bin/../include/vector_types.h"
# 235 "/usr/local/cuda/bin/../include/vector_types.h"
# 243 "/usr/local/cuda/bin/../include/vector_types.h"
# 249 "/usr/local/cuda/bin/../include/vector_types.h"
# 255 "/usr/local/cuda/bin/../include/vector_types.h"
# 261 "/usr/local/cuda/bin/../include/vector_types.h"
# 267 "/usr/local/cuda/bin/../include/vector_types.h"
# 273 "/usr/local/cuda/bin/../include/vector_types.h"
# 276 "/usr/local/cuda/bin/../include/vector_types.h"
# 282 "/usr/local/cuda/bin/../include/vector_types.h"
# 288 "/usr/local/cuda/bin/../include/vector_types.h"
# 294 "/usr/local/cuda/bin/../include/vector_types.h"
# 300 "/usr/local/cuda/bin/../include/vector_types.h"
# 306 "/usr/local/cuda/bin/../include/vector_types.h"
# 312 "/usr/local/cuda/bin/../include/vector_types.h"
# 318 "/usr/local/cuda/bin/../include/vector_types.h"
# 324 "/usr/local/cuda/bin/../include/vector_types.h"
# 330 "/usr/local/cuda/bin/../include/vector_types.h"
# 336 "/usr/local/cuda/bin/../include/vector_types.h"
# 342 "/usr/local/cuda/bin/../include/vector_types.h"
# 348 "/usr/local/cuda/bin/../include/vector_types.h"
# 354 "/usr/local/cuda/bin/../include/vector_types.h"
# 366 "/usr/local/cuda/bin/../include/vector_types.h"
# 368 "/usr/local/cuda/bin/../include/vector_types.h"
# 370 "/usr/local/cuda/bin/../include/vector_types.h"
# 372 "/usr/local/cuda/bin/../include/vector_types.h"
# 374 "/usr/local/cuda/bin/../include/vector_types.h"
# 376 "/usr/local/cuda/bin/../include/vector_types.h"
# 378 "/usr/local/cuda/bin/../include/vector_types.h"
# 380 "/usr/local/cuda/bin/../include/vector_types.h"
# 382 "/usr/local/cuda/bin/../include/vector_types.h"
# 384 "/usr/local/cuda/bin/../include/vector_types.h"
# 386 "/usr/local/cuda/bin/../include/vector_types.h"
# 388 "/usr/local/cuda/bin/../include/vector_types.h"
# 390 "/usr/local/cuda/bin/../include/vector_types.h"
# 392 "/usr/local/cuda/bin/../include/vector_types.h"
# 394 "/usr/local/cuda/bin/../include/vector_types.h"
# 396 "/usr/local/cuda/bin/../include/vector_types.h"
# 398 "/usr/local/cuda/bin/../include/vector_types.h"
# 400 "/usr/local/cuda/bin/../include/vector_types.h"
# 402 "/usr/local/cuda/bin/../include/vector_types.h"
# 404 "/usr/local/cuda/bin/../include/vector_types.h"
# 406 "/usr/local/cuda/bin/../include/vector_types.h"
# 408 "/usr/local/cuda/bin/../include/vector_types.h"
# 410 "/usr/local/cuda/bin/../include/vector_types.h"
# 412 "/usr/local/cuda/bin/../include/vector_types.h"
# 414 "/usr/local/cuda/bin/../include/vector_types.h"
# 416 "/usr/local/cuda/bin/../include/vector_types.h"
# 418 "/usr/local/cuda/bin/../include/vector_types.h"
# 420 "/usr/local/cuda/bin/../include/vector_types.h"
# 422 "/usr/local/cuda/bin/../include/vector_types.h"
# 424 "/usr/local/cuda/bin/../include/vector_types.h"
# 426 "/usr/local/cuda/bin/../include/vector_types.h"
# 428 "/usr/local/cuda/bin/../include/vector_types.h"
# 430 "/usr/local/cuda/bin/../include/vector_types.h"
# 432 "/usr/local/cuda/bin/../include/vector_types.h"
# 434 "/usr/local/cuda/bin/../include/vector_types.h"
# 436 "/usr/local/cuda/bin/../include/vector_types.h"
# 438 "/usr/local/cuda/bin/../include/vector_types.h"
# 440 "/usr/local/cuda/bin/../include/vector_types.h"
# 442 "/usr/local/cuda/bin/../include/vector_types.h"
# 444 "/usr/local/cuda/bin/../include/vector_types.h"
# 446 "/usr/local/cuda/bin/../include/vector_types.h"
# 448 "/usr/local/cuda/bin/../include/vector_types.h"
# 450 "/usr/local/cuda/bin/../include/vector_types.h"
# 452 "/usr/local/cuda/bin/../include/vector_types.h"
# 454 "/usr/local/cuda/bin/../include/vector_types.h"
# 456 "/usr/local/cuda/bin/../include/vector_types.h"
# 458 "/usr/local/cuda/bin/../include/vector_types.h"
# 460 "/usr/local/cuda/bin/../include/vector_types.h"
# 469 "/usr/local/cuda/bin/../include/vector_types.h"
# 480 "/usr/local/cuda/bin/../include/vector_types.h"
# 115 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadExit();
# 131 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSynchronize();
# 183 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSetLimit(cudaLimit, size_t);
# 207 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadGetLimit(size_t *, cudaLimit);
# 237 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadGetCacheConfig(cudaFuncCache *);
# 278 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaThreadSetCacheConfig(cudaFuncCache);
# 330 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetLastError();
# 373 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaPeekAtLastError();
# 387 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" const char *cudaGetErrorString(cudaError_t);
# 418 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDeviceCount(int *);
# 536 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDeviceProperties(cudaDeviceProp *, int);
# 555 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaChooseDevice(int *, const cudaDeviceProp *);
# 579 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDevice(int);
# 597 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetDevice(int *);
# 626 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetValidDevices(int *, int);
# 677 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDeviceFlags(unsigned);
# 703 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamCreate(cudaStream_t *);
# 719 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamDestroy(cudaStream_t);
# 753 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamWaitEvent(cudaStream_t, cudaEvent_t, unsigned);
# 771 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamSynchronize(cudaStream_t);
# 789 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaStreamQuery(cudaStream_t);
# 821 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventCreate(cudaEvent_t *);
# 852 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventCreateWithFlags(cudaEvent_t *, unsigned);
# 885 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventRecord(cudaEvent_t, cudaStream_t = 0);
# 914 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventQuery(cudaEvent_t);
# 946 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventSynchronize(cudaEvent_t);
# 966 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventDestroy(cudaEvent_t);
# 1007 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaEventElapsedTime(float *, cudaEvent_t, cudaEvent_t);
# 1046 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaConfigureCall(dim3, dim3, size_t = (0), cudaStream_t = 0);
# 1073 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetupArgument(const void *, size_t, size_t);
# 1119 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFuncSetCacheConfig(const char *, cudaFuncCache);
# 1154 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaLaunch(const char *);
# 1187 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFuncGetAttributes(cudaFuncAttributes *, const char *);
# 1209 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDoubleForDevice(double *);
# 1231 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaSetDoubleForHost(double *);
# 1263 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc(void **, size_t);
# 1292 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocHost(void **, size_t);
# 1331 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocPitch(void **, size_t *, size_t, size_t);
# 1370 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMallocArray(cudaArray **, const cudaChannelFormatDesc *, size_t, size_t = (0), unsigned = (0));
# 1394 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFree(void *);
# 1414 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFreeHost(void *);
# 1436 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaFreeArray(cudaArray *);
# 1495 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostAlloc(void **, size_t, unsigned);
# 1522 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostGetDevicePointer(void **, void *, unsigned);
# 1541 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaHostGetFlags(unsigned *, void *);
# 1576 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc3D(cudaPitchedPtr *, cudaExtent);
# 1626 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMalloc3DArray(cudaArray **, const cudaChannelFormatDesc *, cudaExtent, unsigned = (0));
# 1723 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms *);
# 1828 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms *, cudaStream_t = 0);
# 1847 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemGetInfo(size_t *, size_t *);
# 1880 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy(void *, const void *, size_t, cudaMemcpyKind);
# 1913 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToArray(cudaArray *, size_t, size_t, const void *, size_t, cudaMemcpyKind);
# 1946 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromArray(void *, const cudaArray *, size_t, size_t, size_t, cudaMemcpyKind);
# 1981 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyArrayToArray(cudaArray *, size_t, size_t, const cudaArray *, size_t, size_t, size_t, cudaMemcpyKind = cudaMemcpyDeviceToDevice);
# 2023 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2D(void *, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind);
# 2064 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DToArray(cudaArray *, size_t, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind);
# 2105 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DFromArray(void *, size_t, const cudaArray *, size_t, size_t, size_t, size_t, cudaMemcpyKind);
# 2144 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DArrayToArray(cudaArray *, size_t, size_t, const cudaArray *, size_t, size_t, size_t, size_t, cudaMemcpyKind = cudaMemcpyDeviceToDevice);
# 2179 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToSymbol(const char *, const void *, size_t, size_t = (0), cudaMemcpyKind = cudaMemcpyHostToDevice);
# 2213 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromSymbol(void *, const char *, size_t, size_t = (0), cudaMemcpyKind = cudaMemcpyDeviceToHost);
# 2256 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyAsync(void *, const void *, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 2298 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToArrayAsync(cudaArray *, size_t, size_t, const void *, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 2340 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromArrayAsync(void *, const cudaArray *, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 2391 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DAsync(void *, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 2441 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DToArrayAsync(cudaArray *, size_t, size_t, const void *, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 2491 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpy2DFromArrayAsync(void *, size_t, const cudaArray *, size_t, size_t, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 2535 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyToSymbolAsync(const char *, const void *, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 2578 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemcpyFromSymbolAsync(void *, const char *, size_t, size_t, cudaMemcpyKind, cudaStream_t = 0);
# 2600 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset(void *, int, size_t);
# 2626 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset2D(void *, size_t, int, size_t, size_t);
# 2665 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset3D(cudaPitchedPtr, int, cudaExtent);
# 2692 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemsetAsync(void *, int, size_t, cudaStream_t = 0);
# 2724 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset2DAsync(void *, size_t, int, size_t, size_t, cudaStream_t = 0);
# 2769 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaMemset3DAsync(cudaPitchedPtr, int, cudaExtent, cudaStream_t = 0);
# 2796 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSymbolAddress(void **, const char *);
# 2819 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSymbolSize(size_t *, const char *);
# 2865 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t);
# 2897 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t, unsigned);
# 2932 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsMapResources(int, cudaGraphicsResource_t *, cudaStream_t = 0);
# 2963 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsUnmapResources(int, cudaGraphicsResource_t *, cudaStream_t = 0);
# 2992 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsResourceGetMappedPointer(void **, size_t *, cudaGraphicsResource_t);
# 3026 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray **, cudaGraphicsResource_t, unsigned, unsigned);
# 3059 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc *, const cudaArray *);
# 3094 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaChannelFormatDesc cudaCreateChannelDesc(int, int, int, int, cudaChannelFormatKind);
# 3136 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTexture(size_t *, const textureReference *, const void *, const cudaChannelFormatDesc *, size_t = (((2147483647) * 2U) + 1U));
# 3179 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTexture2D(size_t *, const textureReference *, const void *, const cudaChannelFormatDesc *, size_t, size_t, size_t);
# 3207 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindTextureToArray(const textureReference *, const cudaArray *, const cudaChannelFormatDesc *);
# 3228 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaUnbindTexture(const textureReference *);
# 3253 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureAlignmentOffset(size_t *, const textureReference *);
# 3277 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetTextureReference(const textureReference **, const char *);
# 3310 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaBindSurfaceToArray(const surfaceReference *, const cudaArray *, const cudaChannelFormatDesc *);
# 3328 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetSurfaceReference(const surfaceReference **, const char *);
# 3355 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaDriverGetVersion(int *);
# 3372 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaRuntimeGetVersion(int *);
# 3377 "/usr/local/cuda/bin/../include/cuda_runtime_api.h"
extern "C" cudaError_t cudaGetExportTable(const void **, const cudaUUID_t *);
# 93 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template< class T> inline cudaChannelFormatDesc cudaCreateChannelDesc()
# 94 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 95 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
# 96 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 98 "/usr/local/cuda/bin/../include/channel_descriptor.h"
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf()
# 99 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 100 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 102 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 103 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 105 "/usr/local/cuda/bin/../include/channel_descriptor.h"
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1()
# 106 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 107 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 109 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 110 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 112 "/usr/local/cuda/bin/../include/channel_descriptor.h"
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2()
# 113 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 114 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 116 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
# 117 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 119 "/usr/local/cuda/bin/../include/channel_descriptor.h"
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4()
# 120 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 121 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 123 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
# 124 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 126 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> ()
# 127 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 128 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(char)) * 8);
# 133 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 135 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 137 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> ()
# 138 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 139 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8);
# 141 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 142 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 144 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> ()
# 145 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 146 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8);
# 148 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 149 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 151 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> ()
# 152 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 153 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8);
# 155 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 156 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 158 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> ()
# 159 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 160 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8);
# 162 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 163 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 165 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> ()
# 166 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 167 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8);
# 169 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 170 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 172 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> ()
# 173 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 174 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8);
# 176 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 177 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 179 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> ()
# 180 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 181 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(signed char)) * 8);
# 183 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 184 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 186 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> ()
# 187 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 188 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned char)) * 8);
# 190 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 191 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 193 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> ()
# 194 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 195 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(short)) * 8);
# 197 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 198 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 200 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> ()
# 201 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 202 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 204 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 205 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 207 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> ()
# 208 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 209 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(short)) * 8);
# 211 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 212 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 214 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> ()
# 215 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 216 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 218 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 219 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 221 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> ()
# 222 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 223 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(short)) * 8);
# 225 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 226 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 228 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> ()
# 229 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 230 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 232 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 233 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 235 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> ()
# 236 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 237 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(short)) * 8);
# 239 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 240 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 242 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> ()
# 243 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 244 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned short)) * 8);
# 246 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 247 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 249 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> ()
# 250 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 251 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(int)) * 8);
# 253 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 254 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 256 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> ()
# 257 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 258 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8);
# 260 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 261 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 263 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> ()
# 264 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 265 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(int)) * 8);
# 267 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 268 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 270 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> ()
# 271 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 272 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8);
# 274 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 275 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 277 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> ()
# 278 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 279 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(int)) * 8);
# 281 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 282 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 284 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> ()
# 285 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 286 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8);
# 288 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 289 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 291 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> ()
# 292 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 293 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(int)) * 8);
# 295 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 296 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 298 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> ()
# 299 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 300 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned)) * 8);
# 302 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 303 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 307 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< long> ()
# 308 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 309 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(long)) * 8);
# 311 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 312 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 314 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned long> ()
# 315 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 316 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8);
# 318 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 319 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 321 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< long1> ()
# 322 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 323 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(long)) * 8);
# 325 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
# 326 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 328 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong1> ()
# 329 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 330 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8);
# 332 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
# 333 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 335 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< long2> ()
# 336 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 337 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(long)) * 8);
# 339 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
# 340 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 342 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong2> ()
# 343 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 344 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8);
# 346 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
# 347 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 349 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< long4> ()
# 350 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 351 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(long)) * 8);
# 353 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
# 354 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 356 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong4> ()
# 357 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 358 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(unsigned long)) * 8);
# 360 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
# 361 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 365 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> ()
# 366 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 367 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(float)) * 8);
# 369 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 370 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 372 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> ()
# 373 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 374 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(float)) * 8);
# 376 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
# 377 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 379 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> ()
# 380 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 381 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(float)) * 8);
# 383 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
# 384 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 386 "/usr/local/cuda/bin/../include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> ()
# 387 "/usr/local/cuda/bin/../include/channel_descriptor.h"
{
# 388 "/usr/local/cuda/bin/../include/channel_descriptor.h"
int e = (((int)sizeof(float)) * 8);
# 390 "/usr/local/cuda/bin/../include/channel_descriptor.h"
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
# 391 "/usr/local/cuda/bin/../include/channel_descriptor.h"
}
# 65 "/usr/local/cuda/bin/../include/driver_functions.h"
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz)
# 66 "/usr/local/cuda/bin/../include/driver_functions.h"
{
# 67 "/usr/local/cuda/bin/../include/driver_functions.h"
cudaPitchedPtr s;
# 69 "/usr/local/cuda/bin/../include/driver_functions.h"
(s.ptr) = d;
# 70 "/usr/local/cuda/bin/../include/driver_functions.h"
(s.pitch) = p;
# 71 "/usr/local/cuda/bin/../include/driver_functions.h"
(s.xsize) = xsz;
# 72 "/usr/local/cuda/bin/../include/driver_functions.h"
(s.ysize) = ysz;
# 74 "/usr/local/cuda/bin/../include/driver_functions.h"
return s;
# 75 "/usr/local/cuda/bin/../include/driver_functions.h"
}
# 92 "/usr/local/cuda/bin/../include/driver_functions.h"
static inline cudaPos make_cudaPos(size_t x, size_t y, size_t z)
# 93 "/usr/local/cuda/bin/../include/driver_functions.h"
{
# 94 "/usr/local/cuda/bin/../include/driver_functions.h"
cudaPos p;
# 96 "/usr/local/cuda/bin/../include/driver_functions.h"
(p.x) = x;
# 97 "/usr/local/cuda/bin/../include/driver_functions.h"
(p.y) = y;
# 98 "/usr/local/cuda/bin/../include/driver_functions.h"
(p.z) = z;
# 100 "/usr/local/cuda/bin/../include/driver_functions.h"
return p;
# 101 "/usr/local/cuda/bin/../include/driver_functions.h"
}
# 118 "/usr/local/cuda/bin/../include/driver_functions.h"
static inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d)
# 119 "/usr/local/cuda/bin/../include/driver_functions.h"
{
# 120 "/usr/local/cuda/bin/../include/driver_functions.h"
cudaExtent e;
# 122 "/usr/local/cuda/bin/../include/driver_functions.h"
(e.width) = w;
# 123 "/usr/local/cuda/bin/../include/driver_functions.h"
(e.height) = h;
# 124 "/usr/local/cuda/bin/../include/driver_functions.h"
(e.depth) = d;
# 126 "/usr/local/cuda/bin/../include/driver_functions.h"
return e;
# 127 "/usr/local/cuda/bin/../include/driver_functions.h"
}
# 55 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline char1 make_char1(signed char x)
# 56 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 57 "/usr/local/cuda/bin/../include/vector_functions.h"
char1 t; (t.x) = x; return t;
# 58 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 60 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uchar1 make_uchar1(unsigned char x)
# 61 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 62 "/usr/local/cuda/bin/../include/vector_functions.h"
uchar1 t; (t.x) = x; return t;
# 63 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 65 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline char2 make_char2(signed char x, signed char y)
# 66 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 67 "/usr/local/cuda/bin/../include/vector_functions.h"
char2 t; (t.x) = x; (t.y) = y; return t;
# 68 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 70 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uchar2 make_uchar2(unsigned char x, unsigned char y)
# 71 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 72 "/usr/local/cuda/bin/../include/vector_functions.h"
uchar2 t; (t.x) = x; (t.y) = y; return t;
# 73 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 75 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline char3 make_char3(signed char x, signed char y, signed char z)
# 76 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 77 "/usr/local/cuda/bin/../include/vector_functions.h"
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 78 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 80 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
# 81 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 82 "/usr/local/cuda/bin/../include/vector_functions.h"
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 83 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 85 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w)
# 86 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 87 "/usr/local/cuda/bin/../include/vector_functions.h"
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 88 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 90 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
# 91 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 92 "/usr/local/cuda/bin/../include/vector_functions.h"
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 93 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 95 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline short1 make_short1(short x)
# 96 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 97 "/usr/local/cuda/bin/../include/vector_functions.h"
short1 t; (t.x) = x; return t;
# 98 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 100 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ushort1 make_ushort1(unsigned short x)
# 101 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 102 "/usr/local/cuda/bin/../include/vector_functions.h"
ushort1 t; (t.x) = x; return t;
# 103 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 105 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline short2 make_short2(short x, short y)
# 106 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 107 "/usr/local/cuda/bin/../include/vector_functions.h"
short2 t; (t.x) = x; (t.y) = y; return t;
# 108 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 110 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ushort2 make_ushort2(unsigned short x, unsigned short y)
# 111 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 112 "/usr/local/cuda/bin/../include/vector_functions.h"
ushort2 t; (t.x) = x; (t.y) = y; return t;
# 113 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 115 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline short3 make_short3(short x, short y, short z)
# 116 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 117 "/usr/local/cuda/bin/../include/vector_functions.h"
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 118 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 120 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
# 121 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 122 "/usr/local/cuda/bin/../include/vector_functions.h"
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 123 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 125 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline short4 make_short4(short x, short y, short z, short w)
# 126 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 127 "/usr/local/cuda/bin/../include/vector_functions.h"
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 128 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 130 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
# 131 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 132 "/usr/local/cuda/bin/../include/vector_functions.h"
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 133 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 135 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline int1 make_int1(int x)
# 136 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 137 "/usr/local/cuda/bin/../include/vector_functions.h"
int1 t; (t.x) = x; return t;
# 138 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 140 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uint1 make_uint1(unsigned x)
# 141 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 142 "/usr/local/cuda/bin/../include/vector_functions.h"
uint1 t; (t.x) = x; return t;
# 143 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 145 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline int2 make_int2(int x, int y)
# 146 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 147 "/usr/local/cuda/bin/../include/vector_functions.h"
int2 t; (t.x) = x; (t.y) = y; return t;
# 148 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 150 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uint2 make_uint2(unsigned x, unsigned y)
# 151 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 152 "/usr/local/cuda/bin/../include/vector_functions.h"
uint2 t; (t.x) = x; (t.y) = y; return t;
# 153 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 155 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline int3 make_int3(int x, int y, int z)
# 156 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 157 "/usr/local/cuda/bin/../include/vector_functions.h"
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 158 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 160 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z)
# 161 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 162 "/usr/local/cuda/bin/../include/vector_functions.h"
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 163 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 165 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline int4 make_int4(int x, int y, int z, int w)
# 166 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 167 "/usr/local/cuda/bin/../include/vector_functions.h"
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 168 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 170 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w)
# 171 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 172 "/usr/local/cuda/bin/../include/vector_functions.h"
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 173 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 175 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline long1 make_long1(long x)
# 176 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 177 "/usr/local/cuda/bin/../include/vector_functions.h"
long1 t; (t.x) = x; return t;
# 178 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 180 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulong1 make_ulong1(unsigned long x)
# 181 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 182 "/usr/local/cuda/bin/../include/vector_functions.h"
ulong1 t; (t.x) = x; return t;
# 183 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 185 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline long2 make_long2(long x, long y)
# 186 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 187 "/usr/local/cuda/bin/../include/vector_functions.h"
long2 t; (t.x) = x; (t.y) = y; return t;
# 188 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 190 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulong2 make_ulong2(unsigned long x, unsigned long y)
# 191 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 192 "/usr/local/cuda/bin/../include/vector_functions.h"
ulong2 t; (t.x) = x; (t.y) = y; return t;
# 193 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 195 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline long3 make_long3(long x, long y, long z)
# 196 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 197 "/usr/local/cuda/bin/../include/vector_functions.h"
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 198 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 200 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z)
# 201 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 202 "/usr/local/cuda/bin/../include/vector_functions.h"
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 203 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 205 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline long4 make_long4(long x, long y, long z, long w)
# 206 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 207 "/usr/local/cuda/bin/../include/vector_functions.h"
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 208 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 210 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w)
# 211 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 212 "/usr/local/cuda/bin/../include/vector_functions.h"
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 213 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 215 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline float1 make_float1(float x)
# 216 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 217 "/usr/local/cuda/bin/../include/vector_functions.h"
float1 t; (t.x) = x; return t;
# 218 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 220 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline float2 make_float2(float x, float y)
# 221 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 222 "/usr/local/cuda/bin/../include/vector_functions.h"
float2 t; (t.x) = x; (t.y) = y; return t;
# 223 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 225 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline float3 make_float3(float x, float y, float z)
# 226 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 227 "/usr/local/cuda/bin/../include/vector_functions.h"
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 228 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 230 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline float4 make_float4(float x, float y, float z, float w)
# 231 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 232 "/usr/local/cuda/bin/../include/vector_functions.h"
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 233 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 235 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline longlong1 make_longlong1(long long x)
# 236 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 237 "/usr/local/cuda/bin/../include/vector_functions.h"
longlong1 t; (t.x) = x; return t;
# 238 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 240 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulonglong1 make_ulonglong1(unsigned long long x)
# 241 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 242 "/usr/local/cuda/bin/../include/vector_functions.h"
ulonglong1 t; (t.x) = x; return t;
# 243 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 245 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline longlong2 make_longlong2(long long x, long long y)
# 246 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 247 "/usr/local/cuda/bin/../include/vector_functions.h"
longlong2 t; (t.x) = x; (t.y) = y; return t;
# 248 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 250 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y)
# 251 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 252 "/usr/local/cuda/bin/../include/vector_functions.h"
ulonglong2 t; (t.x) = x; (t.y) = y; return t;
# 253 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 255 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline longlong3 make_longlong3(long long x, long long y, long long z)
# 256 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 257 "/usr/local/cuda/bin/../include/vector_functions.h"
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 258 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 260 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z)
# 261 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 262 "/usr/local/cuda/bin/../include/vector_functions.h"
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 263 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 265 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w)
# 266 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 267 "/usr/local/cuda/bin/../include/vector_functions.h"
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 268 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 270 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w)
# 271 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 272 "/usr/local/cuda/bin/../include/vector_functions.h"
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 273 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 275 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline double1 make_double1(double x)
# 276 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 277 "/usr/local/cuda/bin/../include/vector_functions.h"
double1 t; (t.x) = x; return t;
# 278 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 280 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline double2 make_double2(double x, double y)
# 281 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 282 "/usr/local/cuda/bin/../include/vector_functions.h"
double2 t; (t.x) = x; (t.y) = y; return t;
# 283 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 285 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline double3 make_double3(double x, double y, double z)
# 286 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 287 "/usr/local/cuda/bin/../include/vector_functions.h"
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t;
# 288 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 290 "/usr/local/cuda/bin/../include/vector_functions.h"
static inline double4 make_double4(double x, double y, double z, double w)
# 291 "/usr/local/cuda/bin/../include/vector_functions.h"
{
# 292 "/usr/local/cuda/bin/../include/vector_functions.h"
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t;
# 293 "/usr/local/cuda/bin/../include/vector_functions.h"
}
# 37 "/usr/include/i386/_types.h" 3
typedef signed char __int8_t;
# 41 "/usr/include/i386/_types.h" 3
typedef unsigned char __uint8_t;
# 42 "/usr/include/i386/_types.h" 3
typedef short __int16_t;
# 43 "/usr/include/i386/_types.h" 3
typedef unsigned short __uint16_t;
# 44 "/usr/include/i386/_types.h" 3
typedef int __int32_t;
# 45 "/usr/include/i386/_types.h" 3
typedef unsigned __uint32_t;
# 46 "/usr/include/i386/_types.h" 3
typedef long long __int64_t;
# 47 "/usr/include/i386/_types.h" 3
typedef unsigned long long __uint64_t;
# 49 "/usr/include/i386/_types.h" 3
typedef long __darwin_intptr_t;
# 50 "/usr/include/i386/_types.h" 3
typedef unsigned __darwin_natural_t;
# 70 "/usr/include/i386/_types.h" 3
typedef int __darwin_ct_rune_t;
# 79 "/usr/include/i386/_types.h" 3
typedef
# 76 "/usr/include/i386/_types.h" 3
union {
# 77 "/usr/include/i386/_types.h" 3
char __mbstate8[128];
# 78 "/usr/include/i386/_types.h" 3
long long _mbstateL;
# 79 "/usr/include/i386/_types.h" 3
} __mbstate_t;
# 81 "/usr/include/i386/_types.h" 3
typedef __mbstate_t __darwin_mbstate_t;
# 84 "/usr/include/i386/_types.h" 3
typedef int __darwin_ptrdiff_t;
# 90 "/usr/include/i386/_types.h" 3
typedef unsigned long __darwin_size_t;
# 96 "/usr/include/i386/_types.h" 3
typedef __builtin_va_list __darwin_va_list;
# 102 "/usr/include/i386/_types.h" 3
typedef int __darwin_wchar_t;
# 107 "/usr/include/i386/_types.h" 3
typedef __darwin_wchar_t __darwin_rune_t;
# 110 "/usr/include/i386/_types.h" 3
typedef int __darwin_wint_t;
# 115 "/usr/include/i386/_types.h" 3
typedef unsigned long __darwin_clock_t;
# 116 "/usr/include/i386/_types.h" 3
typedef __uint32_t __darwin_socklen_t;
# 117 "/usr/include/i386/_types.h" 3
typedef long __darwin_ssize_t;
# 118 "/usr/include/i386/_types.h" 3
typedef long __darwin_time_t;
# 58 "/usr/include/sys/_types.h" 3
struct __darwin_pthread_handler_rec {
# 60 "/usr/include/sys/_types.h" 3
void (*__routine)(void *);
# 61 "/usr/include/sys/_types.h" 3
void *__arg;
# 62 "/usr/include/sys/_types.h" 3
__darwin_pthread_handler_rec *__next;
# 63 "/usr/include/sys/_types.h" 3
};
# 64 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_attr_t { long __sig; char __opaque[36]; };
# 65 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_cond_t { long __sig; char __opaque[24]; };
# 66 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_condattr_t { long __sig; char __opaque[4]; };
# 67 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_mutex_t { long __sig; char __opaque[40]; };
# 68 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_mutexattr_t { long __sig; char __opaque[8]; };
# 69 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_once_t { long __sig; char __opaque[4]; };
# 70 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_rwlock_t { long __sig; char __opaque[124]; };
# 71 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_rwlockattr_t { long __sig; char __opaque[12]; };
# 72 "/usr/include/sys/_types.h" 3
struct _opaque_pthread_t { long __sig; __darwin_pthread_handler_rec *__cleanup_stack; char __opaque[596]; };
# 94 "/usr/include/sys/_types.h" 3
typedef __int64_t __darwin_blkcnt_t;
# 95 "/usr/include/sys/_types.h" 3
typedef __int32_t __darwin_blksize_t;
# 96 "/usr/include/sys/_types.h" 3
typedef __int32_t __darwin_dev_t;
# 97 "/usr/include/sys/_types.h" 3
typedef unsigned __darwin_fsblkcnt_t;
# 98 "/usr/include/sys/_types.h" 3
typedef unsigned __darwin_fsfilcnt_t;
# 99 "/usr/include/sys/_types.h" 3
typedef __uint32_t __darwin_gid_t;
# 100 "/usr/include/sys/_types.h" 3
typedef __uint32_t __darwin_id_t;
# 101 "/usr/include/sys/_types.h" 3
typedef __uint64_t __darwin_ino64_t;
# 103 "/usr/include/sys/_types.h" 3
typedef __darwin_ino64_t __darwin_ino_t;
# 107 "/usr/include/sys/_types.h" 3
typedef __darwin_natural_t __darwin_mach_port_name_t;
# 108 "/usr/include/sys/_types.h" 3
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
# 109 "/usr/include/sys/_types.h" 3
typedef __uint16_t __darwin_mode_t;
# 110 "/usr/include/sys/_types.h" 3
typedef __int64_t __darwin_off_t;
# 111 "/usr/include/sys/_types.h" 3
typedef __int32_t __darwin_pid_t;
# 113 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_attr_t __darwin_pthread_attr_t;
# 115 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_cond_t __darwin_pthread_cond_t;
# 117 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
# 118 "/usr/include/sys/_types.h" 3
typedef unsigned long __darwin_pthread_key_t;
# 120 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
# 122 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
# 124 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_once_t __darwin_pthread_once_t;
# 126 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
# 128 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
# 130 "/usr/include/sys/_types.h" 3
typedef _opaque_pthread_t *__darwin_pthread_t;
# 131 "/usr/include/sys/_types.h" 3
typedef __uint32_t __darwin_sigset_t;
# 132 "/usr/include/sys/_types.h" 3
typedef __int32_t __darwin_suseconds_t;
# 133 "/usr/include/sys/_types.h" 3
typedef __uint32_t __darwin_uid_t;
# 134 "/usr/include/sys/_types.h" 3
typedef __uint32_t __darwin_useconds_t;
# 135 "/usr/include/sys/_types.h" 3
typedef unsigned char __darwin_uuid_t[16];
# 136 "/usr/include/sys/_types.h" 3
typedef char __darwin_uuid_string_t[37];
# 39 "/usr/include/_types.h" 3
typedef int __darwin_nl_item;
# 40 "/usr/include/_types.h" 3
typedef int __darwin_wctrans_t;
# 44 "/usr/include/_types.h" 3
typedef unsigned long __darwin_wctype_t;
# 70 "/usr/include/string.h" 3
typedef __darwin_ssize_t ssize_t;
# 81 "/usr/include/string.h" 3
extern "C" void *memchr(const void *, int, size_t);
# 82 "/usr/include/string.h" 3
extern "C" int memcmp(const void *, const void *, size_t);
# 83 "/usr/include/string.h" 3
extern "C" __attribute__((weak)) void *memcpy(void *, const void *, size_t);
# 84 "/usr/include/string.h" 3
extern "C" void *memmove(void *, const void *, size_t);
# 85 "/usr/include/string.h" 3
extern "C" __attribute__((weak)) void *memset(void *, int, size_t);
# 87 "/usr/include/string.h" 3
extern "C" char *stpcpy(char *, const char *);
# 88 "/usr/include/string.h" 3
extern "C" char *strcasestr(const char *, const char *);
# 90 "/usr/include/string.h" 3
extern "C" char *strcat(char *, const char *);
# 91 "/usr/include/string.h" 3
extern "C" char *strchr(const char *, int);
# 92 "/usr/include/string.h" 3
extern "C" int strcmp(const char *, const char *);
# 93 "/usr/include/string.h" 3
extern "C" int strcoll(const char *, const char *);
# 94 "/usr/include/string.h" 3
extern "C" char *strcpy(char *, const char *);
# 95 "/usr/include/string.h" 3
extern "C" size_t strcspn(const char *, const char *);
# 96 "/usr/include/string.h" 3
extern "C" char *strerror(int) __asm__("_strerror$UNIX2003");
# 97 "/usr/include/string.h" 3
extern "C" int strerror_r(int, char *, size_t);
# 98 "/usr/include/string.h" 3
extern "C" size_t strlen(const char *);
# 99 "/usr/include/string.h" 3
extern "C" char *strncat(char *, const char *, size_t);
# 100 "/usr/include/string.h" 3
extern "C" int strncmp(const char *, const char *, size_t);
# 101 "/usr/include/string.h" 3
extern "C" char *strncpy(char *, const char *, size_t);
# 103 "/usr/include/string.h" 3
extern "C" char *strnstr(const char *, const char *, size_t);
# 105 "/usr/include/string.h" 3
extern "C" char *strpbrk(const char *, const char *);
# 106 "/usr/include/string.h" 3
extern "C" char *strrchr(const char *, int);
# 107 "/usr/include/string.h" 3
extern "C" size_t strspn(const char *, const char *);
# 108 "/usr/include/string.h" 3
extern "C" char *strstr(const char *, const char *);
# 109 "/usr/include/string.h" 3
extern "C" char *strtok(char *, const char *);
# 110 "/usr/include/string.h" 3
extern "C" size_t strxfrm(char *, const char *, size_t);
# 114 "/usr/include/string.h" 3
extern "C" void *memccpy(void *, const void *, int, size_t);
# 115 "/usr/include/string.h" 3
extern "C" char *strtok_r(char *, const char *, char **);
# 116 "/usr/include/string.h" 3
extern "C" char *strdup(const char *);
# 118 "/usr/include/string.h" 3
extern "C" int bcmp(const void *, const void *, size_t);
# 119 "/usr/include/string.h" 3
extern "C" void bcopy(const void *, void *, size_t);
# 120 "/usr/include/string.h" 3
extern "C" void bzero(void *, size_t);
# 121 "/usr/include/string.h" 3
extern "C" int ffs(int);
# 122 "/usr/include/string.h" 3
extern "C" int ffsl(long);
# 123 "/usr/include/string.h" 3
extern "C" int fls(int);
# 124 "/usr/include/string.h" 3
extern "C" int flsl(long);
# 125 "/usr/include/string.h" 3
extern "C" char *index(const char *, int);
# 126 "/usr/include/string.h" 3
extern "C" void memset_pattern4(void *, const void *, size_t);
# 127 "/usr/include/string.h" 3
extern "C" void memset_pattern8(void *, const void *, size_t);
# 128 "/usr/include/string.h" 3
extern "C" void memset_pattern16(void *, const void *, size_t);
# 129 "/usr/include/string.h" 3
extern "C" char *rindex(const char *, int);
# 130 "/usr/include/string.h" 3
extern "C" int strcasecmp(const char *, const char *);
# 131 "/usr/include/string.h" 3
extern "C" size_t strlcat(char *, const char *, size_t);
# 132 "/usr/include/string.h" 3
extern "C" size_t strlcpy(char *, const char *, size_t);
# 133 "/usr/include/string.h" 3
extern "C" void strmode(int, char *);
# 134 "/usr/include/string.h" 3
extern "C" int strncasecmp(const char *, const char *, size_t);
# 135 "/usr/include/string.h" 3
extern "C" char *strsep(char **, const char *);
# 136 "/usr/include/string.h" 3
extern "C" char *strsignal(int);
# 137 "/usr/include/string.h" 3
extern "C" void swab(const void *, void *, ssize_t);
# 88 "/usr/include/sys/_structs.h" 3
struct __attribute__((visibility("default"))) timespec {
# 90 "/usr/include/sys/_structs.h" 3
__darwin_time_t tv_sec;
# 91 "/usr/include/sys/_structs.h" 3
long tv_nsec;
# 92 "/usr/include/sys/_structs.h" 3
};
# 77 "/usr/include/time.h" 3
typedef __darwin_clock_t clock_t;
# 87 "/usr/include/time.h" 3
typedef __darwin_time_t time_t;
# 90 "/usr/include/time.h" 3
struct tm {
# 91 "/usr/include/time.h" 3
int tm_sec;
# 92 "/usr/include/time.h" 3
int tm_min;
# 93 "/usr/include/time.h" 3
int tm_hour;
# 94 "/usr/include/time.h" 3
int tm_mday;
# 95 "/usr/include/time.h" 3
int tm_mon;
# 96 "/usr/include/time.h" 3
int tm_year;
# 97 "/usr/include/time.h" 3
int tm_wday;
# 98 "/usr/include/time.h" 3
int tm_yday;
# 99 "/usr/include/time.h" 3
int tm_isdst;
# 100 "/usr/include/time.h" 3
long tm_gmtoff;
# 101 "/usr/include/time.h" 3
char *tm_zone;
# 102 "/usr/include/time.h" 3
};
# 113 "/usr/include/time.h" 3
extern char *tzname[];
# 116 "/usr/include/time.h" 3
extern int getdate_err;
# 118 "/usr/include/time.h" 3
extern long timezone __asm__("_timezone$UNIX2003");
# 120 "/usr/include/time.h" 3
extern int daylight;
# 123 "/usr/include/time.h" 3
extern "C" char *asctime(const tm *);
# 124 "/usr/include/time.h" 3
extern "C" __attribute__((weak)) clock_t clock() __asm__("_clock$UNIX2003");
# 125 "/usr/include/time.h" 3
extern "C" char *ctime(const time_t *);
# 126 "/usr/include/time.h" 3
extern "C" double difftime(time_t, time_t);
# 127 "/usr/include/time.h" 3
extern "C" tm *getdate(const char *);
# 128 "/usr/include/time.h" 3
extern "C" tm *gmtime(const time_t *);
# 129 "/usr/include/time.h" 3
extern "C" tm *localtime(const time_t *);
# 130 "/usr/include/time.h" 3
extern "C" time_t mktime(tm *) __asm__("_mktime$UNIX2003");
# 131 "/usr/include/time.h" 3
extern "C" size_t strftime(char *, size_t, const char *, const tm *) __asm__("_strftime$UNIX2003");
# 132 "/usr/include/time.h" 3
extern "C" char *strptime(const char *, const char *, tm *) __asm__("_strptime$UNIX2003");
# 133 "/usr/include/time.h" 3
extern "C" time_t time(time_t *);
# 136 "/usr/include/time.h" 3
extern "C" void tzset();
# 140 "/usr/include/time.h" 3
extern "C" char *asctime_r(const tm *, char *);
# 141 "/usr/include/time.h" 3
extern "C" char *ctime_r(const time_t *, char *);
# 142 "/usr/include/time.h" 3
extern "C" tm *gmtime_r(const time_t *, tm *);
# 143 "/usr/include/time.h" 3
extern "C" tm *localtime_r(const time_t *, tm *);
# 146 "/usr/include/time.h" 3
extern "C" time_t posix2time(time_t);
# 150 "/usr/include/time.h" 3
extern "C" void tzsetwall();
# 151 "/usr/include/time.h" 3
extern "C" time_t time2posix(time_t);
# 152 "/usr/include/time.h" 3
extern "C" time_t timelocal(tm *const);
# 153 "/usr/include/time.h" 3
extern "C" time_t timegm(tm *const);
# 157 "/usr/include/time.h" 3
extern "C" int nanosleep(const timespec *, timespec *) __asm__("_nanosleep$UNIX2003");
# 57 "/usr/local/cuda/bin/../include/common_functions.h"
extern "C" __attribute__((weak)) clock_t clock() __asm__("_clock$UNIX2003");
# 59 "/usr/local/cuda/bin/../include/common_functions.h"
extern "C" __attribute__((weak)) void *memset(void *, int, size_t);
# 61 "/usr/local/cuda/bin/../include/common_functions.h"
extern "C" __attribute__((weak)) void *memcpy(void *, const void *, size_t);
# 66 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int abs(int) __attribute__((__const__));
# 68 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long labs(long) __attribute__((__const__));
# 70 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long long llabs(long long);
# 72 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double fabs(double);
# 74 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float fabsf(float);
# 77 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int min(int, int);
# 79 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) unsigned umin(unsigned, unsigned);
# 81 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long long llmin(long long, long long);
# 83 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) unsigned long long ullmin(unsigned long long, unsigned long long);
# 85 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float fminf(float, float);
# 87 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double fmin(double, double);
# 90 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int max(int, int);
# 92 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) unsigned umax(unsigned, unsigned);
# 94 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long long llmax(long long, long long);
# 96 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) unsigned long long ullmax(unsigned long long, unsigned long long);
# 98 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float fmaxf(float, float);
# 100 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double fmax(double, double);
# 103 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double sin(double);
# 105 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float sinf(float);
# 108 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double cos(double);
# 110 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float cosf(float);
# 113 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) void sincos(double, double *, double *);
# 115 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) void sincosf(float, float *, float *);
# 118 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double tan(double);
# 120 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float tanf(float);
# 123 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double sqrt(double);
# 125 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float sqrtf(float);
# 128 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double rsqrt(double);
# 130 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float rsqrtf(float);
# 133 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double exp2(double);
# 135 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float exp2f(float);
# 138 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double exp10(double);
# 140 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float exp10f(float);
# 143 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double expm1(double);
# 145 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float expm1f(float);
# 148 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double log2(double);
# 150 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float log2f(float);
# 153 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double log10(double);
# 155 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float log10f(float);
# 158 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double log(double);
# 160 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float logf(float);
# 163 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double log1p(double);
# 165 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float log1pf(float);
# 168 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double floor(double);
# 170 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float floorf(float);
# 173 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double exp(double);
# 175 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float expf(float);
# 178 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double cosh(double);
# 180 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float coshf(float);
# 183 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double sinh(double);
# 185 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float sinhf(float);
# 188 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double tanh(double);
# 190 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float tanhf(float);
# 193 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double acosh(double);
# 195 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float acoshf(float);
# 198 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double asinh(double);
# 200 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float asinhf(float);
# 203 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double atanh(double);
# 205 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float atanhf(float);
# 208 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double ldexp(double, int);
# 210 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float ldexpf(float, int);
# 213 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double logb(double);
# 215 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float logbf(float);
# 218 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int ilogb(double);
# 220 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int ilogbf(float);
# 223 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double scalbn(double, int);
# 225 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float scalbnf(float, int);
# 228 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double scalbln(double, long);
# 230 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float scalblnf(float, long);
# 233 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double frexp(double, int *);
# 235 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float frexpf(float, int *);
# 238 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double round(double);
# 240 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float roundf(float);
# 243 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long lround(double);
# 245 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long lroundf(float);
# 248 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long long llround(double);
# 250 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long long llroundf(float);
# 253 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double rint(double);
# 255 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float rintf(float);
# 258 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long lrint(double);
# 260 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long lrintf(float);
# 263 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long long llrint(double);
# 265 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) long long llrintf(float);
# 268 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double nearbyint(double);
# 270 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float nearbyintf(float);
# 273 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double ceil(double);
# 275 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float ceilf(float);
# 278 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double trunc(double);
# 280 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float truncf(float);
# 283 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double fdim(double, double);
# 285 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float fdimf(float, float);
# 288 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double atan2(double, double);
# 290 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float atan2f(float, float);
# 293 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double atan(double);
# 295 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float atanf(float);
# 298 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double asin(double);
# 300 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float asinf(float);
# 303 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double acos(double);
# 305 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float acosf(float);
# 308 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double hypot(double, double);
# 310 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float hypotf(float, float);
# 313 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double cbrt(double);
# 315 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float cbrtf(float);
# 318 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double rcbrt(double);
# 320 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float rcbrtf(float);
# 323 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double sinpi(double);
# 325 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float sinpif(float);
# 328 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double pow(double, double);
# 330 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float powf(float, float);
# 333 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double modf(double, double *);
# 335 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float modff(float, float *);
# 338 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double fmod(double, double);
# 340 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float fmodf(float, float);
# 343 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double remainder(double, double);
# 345 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float remainderf(float, float);
# 348 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double remquo(double, double, int *);
# 350 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float remquof(float, float, int *);
# 353 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double erf(double);
# 355 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float erff(float);
# 358 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double erfinv(double);
# 360 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float erfinvf(float);
# 363 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double erfc(double);
# 365 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float erfcf(float);
# 368 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double erfcinv(double);
# 370 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float erfcinvf(float);
# 373 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double lgamma(double);
# 375 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float lgammaf(float);
# 378 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double tgamma(double);
# 380 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float tgammaf(float);
# 383 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double copysign(double, double);
# 385 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float copysignf(float, float);
# 388 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double nextafter(double, double);
# 390 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float nextafterf(float, float);
# 393 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double nan(const char *);
# 395 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float nanf(const char *);
# 398 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __isinf(double);
# 400 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __isinff(float);
# 403 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __isnan(double);
# 405 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __isnanf(float);
# 410 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __isfinited(double);
# 412 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __isfinitef(float);
# 414 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __signbitd(double);
# 428 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __signbitf(float);
# 431 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) double fma(double, double, double);
# 433 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) float fmaf(float, float, float);
# 441 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __signbitl(long double);
# 443 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __isinfl(long double);
# 445 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __isnanl(long double);
# 450 "/usr/local/cuda/bin/../include/math_functions.h"
extern "C" __attribute__((weak)) int __isfinite(long double);
# 49 "/usr/include/architecture/i386/math.h" 3
extern "C" { typedef float float_t; }
# 50 "/usr/include/architecture/i386/math.h" 3
extern "C" { typedef double double_t; }
# 108 "/usr/include/architecture/i386/math.h" 3
extern "C" unsigned __math_errhandling();
# 128 "/usr/include/architecture/i386/math.h" 3
extern "C" int __fpclassifyf(float);
# 129 "/usr/include/architecture/i386/math.h" 3
extern "C" int __fpclassifyd(double);
# 130 "/usr/include/architecture/i386/math.h" 3
extern "C" int __fpclassify(long double);
# 163 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isfinitef(float) __attribute__((__always_inline__)); }
# 164 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isfinited(double) __attribute__((__always_inline__)); }
# 165 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isfinite(long double) __attribute__((__always_inline__)); }
# 166 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isinff(float) __attribute__((__always_inline__)); }
# 167 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isinfd(double) __attribute__((__always_inline__)); }
# 168 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isinf(long double) __attribute__((__always_inline__)); }
# 169 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isnanf(float) __attribute__((__always_inline__)); }
# 170 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isnand(double) __attribute__((__always_inline__)); }
# 171 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isnan(long double) __attribute__((__always_inline__)); }
# 172 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isnormalf(float) __attribute__((__always_inline__)); }
# 173 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isnormald(double) __attribute__((__always_inline__)); }
# 174 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_isnormal(long double) __attribute__((__always_inline__)); }
# 175 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_signbitf(float) __attribute__((__always_inline__)); }
# 176 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_signbitd(double) __attribute__((__always_inline__)); }
# 177 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline int __inline_signbit(long double) __attribute__((__always_inline__)); }
# 179 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isinff(float __x) { return __builtin_fabsf(__x) == __builtin_inff(); } }
# 180 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isinfd(double __x) { return __builtin_fabs(__x) == __builtin_inf(); } }
# 181 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isinf(long double __x) { return __builtin_fabsl(__x) == __builtin_infl(); } }
# 182 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isfinitef(float __x) { return (__x == __x) && (__builtin_fabsf(__x) != __builtin_inff()); } }
# 183 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isfinited(double __x) { return (__x == __x) && (__builtin_fabs(__x) != __builtin_inf()); } }
# 184 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isfinite(long double __x) { return (__x == __x) && (__builtin_fabsl(__x) != __builtin_infl()); } }
# 185 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isnanf(float __x) { return __x != __x; } }
# 186 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isnand(double __x) { return __x != __x; } }
# 187 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isnan(long double __x) { return __x != __x; } }
# 188 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_signbitf(float __x) { union { float __f; unsigned __u; } __u; (__u.__f) = __x; return (int)((__u.__u) >> 31); } }
# 189 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_signbitd(double __x) { union { double __f; unsigned __u[2]; } __u; (__u.__f) = __x; return (int)(((__u.__u)[1]) >> 31); } }
# 190 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_signbit(long double __x) { union { long double __ld; struct { unsigned __m[2]; short __sexp; } __p; } __u; (__u.__ld) = __x; return (int)(((unsigned short)((__u.__p).__sexp)) >> 15); } }
# 191 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isnormalf(float __x) { float fabsf = __builtin_fabsf(__x); if (__x != __x) { return 0; } return (fabsf < __builtin_inff()) && (fabsf >= (1.175494351e-38F)); } }
# 192 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isnormald(double __x) { double fabsf = __builtin_fabs(__x); if (__x != __x) { return 0; } return (fabsf < __builtin_inf()) && (fabsf >= (2.225073858507201383e-308)); } }
# 193 "/usr/include/architecture/i386/math.h" 3
extern "C" { static inline __attribute__((__always_inline__)) int __inline_isnormal(long double __x) { long double fabsf = __builtin_fabsl(__x); if (__x != __x) { return 0; } return (fabsf < __builtin_infl()) && (fabsf >= (0.0L)); } }
# 253 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double acos(double);
# 254 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float acosf(float);
# 256 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double asin(double);
# 257 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float asinf(float);
# 259 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double atan(double);
# 260 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float atanf(float);
# 262 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double atan2(double, double);
# 263 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float atan2f(float, float);
# 265 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double cos(double);
# 266 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float cosf(float);
# 268 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double sin(double);
# 269 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float sinf(float);
# 271 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double tan(double);
# 272 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float tanf(float);
# 274 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double acosh(double);
# 275 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float acoshf(float);
# 277 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double asinh(double);
# 278 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float asinhf(float);
# 280 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double atanh(double);
# 281 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float atanhf(float);
# 283 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double cosh(double);
# 284 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float coshf(float);
# 286 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double sinh(double);
# 287 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float sinhf(float);
# 289 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double tanh(double);
# 290 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float tanhf(float);
# 292 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double exp(double);
# 293 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float expf(float);
# 295 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double exp2(double);
# 296 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float exp2f(float);
# 298 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double expm1(double);
# 299 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float expm1f(float);
# 301 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double log(double);
# 302 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float logf(float);
# 304 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double log10(double);
# 305 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float log10f(float);
# 307 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double log2(double);
# 308 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float log2f(float);
# 310 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double log1p(double);
# 311 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float log1pf(float);
# 313 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double logb(double);
# 314 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float logbf(float);
# 316 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double modf(double, double *);
# 317 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float modff(float, float *);
# 319 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double ldexp(double, int);
# 320 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float ldexpf(float, int);
# 322 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double frexp(double, int *);
# 323 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float frexpf(float, int *);
# 325 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) int ilogb(double);
# 326 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) int ilogbf(float);
# 328 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double scalbn(double, int);
# 329 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float scalbnf(float, int);
# 331 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double scalbln(double, long);
# 332 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float scalblnf(float, long);
# 334 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double fabs(double);
# 335 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float fabsf(float);
# 337 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double cbrt(double);
# 338 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float cbrtf(float);
# 340 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double hypot(double, double);
# 341 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float hypotf(float, float);
# 343 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double pow(double, double);
# 344 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float powf(float, float);
# 346 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double sqrt(double);
# 347 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float sqrtf(float);
# 349 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double erf(double);
# 350 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float erff(float);
# 352 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double erfc(double);
# 353 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float erfcf(float);
# 360 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double lgamma(double);
# 361 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float lgammaf(float);
# 363 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double tgamma(double);
# 364 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float tgammaf(float);
# 366 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double ceil(double);
# 367 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float ceilf(float);
# 369 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double floor(double);
# 370 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float floorf(float);
# 372 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double nearbyint(double);
# 373 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float nearbyintf(float);
# 375 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double rint(double);
# 376 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float rintf(float);
# 378 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) long lrint(double);
# 379 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) long lrintf(float);
# 381 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double round(double);
# 382 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float roundf(float);
# 384 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) long lround(double);
# 385 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) long lroundf(float);
# 390 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) long long llrint(double);
# 391 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) long long llrintf(float);
# 393 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) long long llround(double);
# 394 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) long long llroundf(float);
# 398 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double trunc(double);
# 399 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float truncf(float);
# 401 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double fmod(double, double);
# 402 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float fmodf(float, float);
# 404 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double remainder(double, double);
# 405 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float remainderf(float, float);
# 407 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double remquo(double, double, int *);
# 408 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float remquof(float, float, int *);
# 410 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double copysign(double, double);
# 411 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float copysignf(float, float);
# 413 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double nan(const char *);
# 414 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float nanf(const char *);
# 416 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double nextafter(double, double);
# 417 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float nextafterf(float, float);
# 419 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double fdim(double, double);
# 420 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float fdimf(float, float);
# 422 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double fmax(double, double);
# 423 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float fmaxf(float, float);
# 425 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double fmin(double, double);
# 426 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float fminf(float, float);
# 428 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) double fma(double, double, double);
# 429 "/usr/include/architecture/i386/math.h" 3
extern "C" __attribute__((weak)) float fmaf(float, float, float);
# 431 "/usr/include/architecture/i386/math.h" 3
extern "C" long double acosl(long double);
# 432 "/usr/include/architecture/i386/math.h" 3
extern "C" long double asinl(long double);
# 433 "/usr/include/architecture/i386/math.h" 3
extern "C" long double atanl(long double);
# 434 "/usr/include/architecture/i386/math.h" 3
extern "C" long double atan2l(long double, long double);
# 435 "/usr/include/architecture/i386/math.h" 3
extern "C" long double cosl(long double);
# 436 "/usr/include/architecture/i386/math.h" 3
extern "C" long double sinl(long double);
# 437 "/usr/include/architecture/i386/math.h" 3
extern "C" long double tanl(long double);
# 438 "/usr/include/architecture/i386/math.h" 3
extern "C" long double acoshl(long double);
# 439 "/usr/include/architecture/i386/math.h" 3
extern "C" long double asinhl(long double);
# 440 "/usr/include/architecture/i386/math.h" 3
extern "C" long double atanhl(long double);
# 441 "/usr/include/architecture/i386/math.h" 3
extern "C" long double coshl(long double);
# 442 "/usr/include/architecture/i386/math.h" 3
extern "C" long double sinhl(long double);
# 443 "/usr/include/architecture/i386/math.h" 3
extern "C" long double tanhl(long double);
# 444 "/usr/include/architecture/i386/math.h" 3
extern "C" long double expl(long double);
# 445 "/usr/include/architecture/i386/math.h" 3
extern "C" long double exp2l(long double);
# 446 "/usr/include/architecture/i386/math.h" 3
extern "C" long double expm1l(long double);
# 447 "/usr/include/architecture/i386/math.h" 3
extern "C" long double logl(long double);
# 448 "/usr/include/architecture/i386/math.h" 3
extern "C" long double log10l(long double);
# 449 "/usr/include/architecture/i386/math.h" 3
extern "C" long double log2l(long double);
# 450 "/usr/include/architecture/i386/math.h" 3
extern "C" long double log1pl(long double);
# 451 "/usr/include/architecture/i386/math.h" 3
extern "C" long double logbl(long double);
# 452 "/usr/include/architecture/i386/math.h" 3
extern "C" long double modfl(long double, long double *);
# 453 "/usr/include/architecture/i386/math.h" 3
extern "C" long double ldexpl(long double, int);
# 454 "/usr/include/architecture/i386/math.h" 3
extern "C" long double frexpl(long double, int *);
# 455 "/usr/include/architecture/i386/math.h" 3
extern "C" int ilogbl(long double);
# 456 "/usr/include/architecture/i386/math.h" 3
extern "C" long double scalbnl(long double, int);
# 457 "/usr/include/architecture/i386/math.h" 3
extern "C" long double scalblnl(long double, long);
# 458 "/usr/include/architecture/i386/math.h" 3
extern "C" long double fabsl(long double);
# 459 "/usr/include/architecture/i386/math.h" 3
extern "C" long double cbrtl(long double);
# 460 "/usr/include/architecture/i386/math.h" 3
extern "C" long double hypotl(long double, long double);
# 461 "/usr/include/architecture/i386/math.h" 3
extern "C" long double powl(long double, long double);
# 462 "/usr/include/architecture/i386/math.h" 3
extern "C" long double sqrtl(long double);
# 463 "/usr/include/architecture/i386/math.h" 3
extern "C" long double erfl(long double);
# 464 "/usr/include/architecture/i386/math.h" 3
extern "C" long double erfcl(long double);
# 471 "/usr/include/architecture/i386/math.h" 3
extern "C" long double lgammal(long double);
# 473 "/usr/include/architecture/i386/math.h" 3
extern "C" long double tgammal(long double);
# 474 "/usr/include/architecture/i386/math.h" 3
extern "C" long double ceill(long double);
# 475 "/usr/include/architecture/i386/math.h" 3
extern "C" long double floorl(long double);
# 476 "/usr/include/architecture/i386/math.h" 3
extern "C" long double nearbyintl(long double);
# 477 "/usr/include/architecture/i386/math.h" 3
extern "C" long double rintl(long double);
# 478 "/usr/include/architecture/i386/math.h" 3
extern "C" long lrintl(long double);
# 479 "/usr/include/architecture/i386/math.h" 3
extern "C" long double roundl(long double);
# 480 "/usr/include/architecture/i386/math.h" 3
extern "C" long lroundl(long double);
# 484 "/usr/include/architecture/i386/math.h" 3
extern "C" long long llrintl(long double);
# 485 "/usr/include/architecture/i386/math.h" 3
extern "C" long long llroundl(long double);
# 488 "/usr/include/architecture/i386/math.h" 3
extern "C" long double truncl(long double);
# 489 "/usr/include/architecture/i386/math.h" 3
extern "C" long double fmodl(long double, long double);
# 490 "/usr/include/architecture/i386/math.h" 3
extern "C" long double remainderl(long double, long double);
# 491 "/usr/include/architecture/i386/math.h" 3
extern "C" long double remquol(long double, long double, int *);
# 492 "/usr/include/architecture/i386/math.h" 3
extern "C" long double copysignl(long double, long double);
# 493 "/usr/include/architecture/i386/math.h" 3
extern "C" long double nanl(const char *);
# 494 "/usr/include/architecture/i386/math.h" 3
extern "C" long double nextafterl(long double, long double);
# 495 "/usr/include/architecture/i386/math.h" 3
extern "C" double nexttoward(double, long double);
# 496 "/usr/include/architecture/i386/math.h" 3
extern "C" float nexttowardf(float, long double);
# 497 "/usr/include/architecture/i386/math.h" 3
extern "C" long double nexttowardl(long double, long double);
# 498 "/usr/include/architecture/i386/math.h" 3
extern "C" long double fdiml(long double, long double);
# 499 "/usr/include/architecture/i386/math.h" 3
extern "C" long double fmaxl(long double, long double);
# 500 "/usr/include/architecture/i386/math.h" 3
extern "C" long double fminl(long double, long double);
# 501 "/usr/include/architecture/i386/math.h" 3
extern "C" long double fmal(long double, long double, long double);
# 510 "/usr/include/architecture/i386/math.h" 3
extern "C" double __inf();
# 511 "/usr/include/architecture/i386/math.h" 3
extern "C" float __inff();
# 512 "/usr/include/architecture/i386/math.h" 3
extern "C" long double __infl();
# 513 "/usr/include/architecture/i386/math.h" 3
extern "C" float __nan();
# 516 "/usr/include/architecture/i386/math.h" 3
extern "C" double j0(double);
# 518 "/usr/include/architecture/i386/math.h" 3
extern "C" double j1(double);
# 520 "/usr/include/architecture/i386/math.h" 3
extern "C" double jn(int, double);
# 522 "/usr/include/architecture/i386/math.h" 3
extern "C" double y0(double);
# 524 "/usr/include/architecture/i386/math.h" 3
extern "C" double y1(double);
# 526 "/usr/include/architecture/i386/math.h" 3
extern "C" double yn(int, double);
# 528 "/usr/include/architecture/i386/math.h" 3
extern "C" double scalb(double, double);
# 546 "/usr/include/architecture/i386/math.h" 3
extern "C" { extern int signgam; }
# 560 "/usr/include/architecture/i386/math.h" 3
extern "C" long rinttol(double);
# 562 "/usr/include/architecture/i386/math.h" 3
extern "C" long roundtol(double);
# 600 "/usr/include/architecture/i386/math.h" 3
extern "C" int finite(double);
# 602 "/usr/include/architecture/i386/math.h" 3
extern "C" double gamma(double);
# 613 "/usr/include/architecture/i386/math.h" 3
extern "C" double significand(double);
# 618 "/usr/include/architecture/i386/math.h" 3
extern "C" double drem(double, double);
# 83 "/usr/include/sys/wait.h" 3
typedef
# 79 "/usr/include/sys/wait.h" 3
enum {
# 80 "/usr/include/sys/wait.h" 3
P_ALL,
# 81 "/usr/include/sys/wait.h" 3
P_PID,
# 82 "/usr/include/sys/wait.h" 3
P_PGID
# 83 "/usr/include/sys/wait.h" 3
} idtype_t;
# 90 "/usr/include/sys/wait.h" 3
typedef __darwin_pid_t pid_t;
# 95 "/usr/include/sys/wait.h" 3
typedef __darwin_id_t id_t;
# 39 "/usr/include/i386/signal.h" 3
typedef int sig_atomic_t;
# 43 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_i386_thread_state {
# 45 "/usr/include/mach/i386/_structs.h" 3
unsigned __eax;
# 46 "/usr/include/mach/i386/_structs.h" 3
unsigned __ebx;
# 47 "/usr/include/mach/i386/_structs.h" 3
unsigned __ecx;
# 48 "/usr/include/mach/i386/_structs.h" 3
unsigned __edx;
# 49 "/usr/include/mach/i386/_structs.h" 3
unsigned __edi;
# 50 "/usr/include/mach/i386/_structs.h" 3
unsigned __esi;
# 51 "/usr/include/mach/i386/_structs.h" 3
unsigned __ebp;
# 52 "/usr/include/mach/i386/_structs.h" 3
unsigned __esp;
# 53 "/usr/include/mach/i386/_structs.h" 3
unsigned __ss;
# 54 "/usr/include/mach/i386/_structs.h" 3
unsigned __eflags;
# 55 "/usr/include/mach/i386/_structs.h" 3
unsigned __eip;
# 56 "/usr/include/mach/i386/_structs.h" 3
unsigned __cs;
# 57 "/usr/include/mach/i386/_structs.h" 3
unsigned __ds;
# 58 "/usr/include/mach/i386/_structs.h" 3
unsigned __es;
# 59 "/usr/include/mach/i386/_structs.h" 3
unsigned __fs;
# 60 "/usr/include/mach/i386/_structs.h" 3
unsigned __gs;
# 61 "/usr/include/mach/i386/_structs.h" 3
};
# 89 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_fp_control {
# 91 "/usr/include/mach/i386/_structs.h" 3
unsigned short __invalid:1,
# 92 "/usr/include/mach/i386/_structs.h" 3
__denorm:1,
# 93 "/usr/include/mach/i386/_structs.h" 3
__zdiv:1,
# 94 "/usr/include/mach/i386/_structs.h" 3
__ovrfl:1,
# 95 "/usr/include/mach/i386/_structs.h" 3
__undfl:1,
# 96 "/usr/include/mach/i386/_structs.h" 3
__precis:1;
# 97 "/usr/include/mach/i386/_structs.h" 3
unsigned short:2,
# 98 "/usr/include/mach/i386/_structs.h" 3
__pc:2,
# 104 "/usr/include/mach/i386/_structs.h" 3
__rc:2;
# 111 "/usr/include/mach/i386/_structs.h" 3
unsigned short:1;
# 112 "/usr/include/mach/i386/_structs.h" 3
unsigned short:3;
# 113 "/usr/include/mach/i386/_structs.h" 3
};
# 114 "/usr/include/mach/i386/_structs.h" 3
typedef __darwin_fp_control __darwin_fp_control_t;
# 147 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_fp_status {
# 149 "/usr/include/mach/i386/_structs.h" 3
unsigned short __invalid:1,
# 150 "/usr/include/mach/i386/_structs.h" 3
__denorm:1,
# 151 "/usr/include/mach/i386/_structs.h" 3
__zdiv:1,
# 152 "/usr/include/mach/i386/_structs.h" 3
__ovrfl:1,
# 153 "/usr/include/mach/i386/_structs.h" 3
__undfl:1,
# 154 "/usr/include/mach/i386/_structs.h" 3
__precis:1,
# 155 "/usr/include/mach/i386/_structs.h" 3
__stkflt:1,
# 156 "/usr/include/mach/i386/_structs.h" 3
__errsumm:1,
# 157 "/usr/include/mach/i386/_structs.h" 3
__c0:1,
# 158 "/usr/include/mach/i386/_structs.h" 3
__c1:1,
# 159 "/usr/include/mach/i386/_structs.h" 3
__c2:1,
# 160 "/usr/include/mach/i386/_structs.h" 3
__tos:3,
# 161 "/usr/include/mach/i386/_structs.h" 3
__c3:1,
# 162 "/usr/include/mach/i386/_structs.h" 3
__busy:1;
# 163 "/usr/include/mach/i386/_structs.h" 3
};
# 164 "/usr/include/mach/i386/_structs.h" 3
typedef __darwin_fp_status __darwin_fp_status_t;
# 191 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_mmst_reg {
# 193 "/usr/include/mach/i386/_structs.h" 3
char __mmst_reg[10];
# 194 "/usr/include/mach/i386/_structs.h" 3
char __mmst_rsrv[6];
# 195 "/usr/include/mach/i386/_structs.h" 3
};
# 210 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_xmm_reg {
# 212 "/usr/include/mach/i386/_structs.h" 3
char __xmm_reg[16];
# 213 "/usr/include/mach/i386/_structs.h" 3
};
# 232 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_i386_float_state {
# 234 "/usr/include/mach/i386/_structs.h" 3
int __fpu_reserved[2];
# 235 "/usr/include/mach/i386/_structs.h" 3
__darwin_fp_control __fpu_fcw;
# 236 "/usr/include/mach/i386/_structs.h" 3
__darwin_fp_status __fpu_fsw;
# 237 "/usr/include/mach/i386/_structs.h" 3
__uint8_t __fpu_ftw;
# 238 "/usr/include/mach/i386/_structs.h" 3
__uint8_t __fpu_rsrv1;
# 239 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_fop;
# 240 "/usr/include/mach/i386/_structs.h" 3
__uint32_t __fpu_ip;
# 241 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_cs;
# 242 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_rsrv2;
# 243 "/usr/include/mach/i386/_structs.h" 3
__uint32_t __fpu_dp;
# 244 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_ds;
# 245 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_rsrv3;
# 246 "/usr/include/mach/i386/_structs.h" 3
__uint32_t __fpu_mxcsr;
# 247 "/usr/include/mach/i386/_structs.h" 3
__uint32_t __fpu_mxcsrmask;
# 248 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm0;
# 249 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm1;
# 250 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm2;
# 251 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm3;
# 252 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm4;
# 253 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm5;
# 254 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm6;
# 255 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm7;
# 256 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm0;
# 257 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm1;
# 258 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm2;
# 259 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm3;
# 260 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm4;
# 261 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm5;
# 262 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm6;
# 263 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm7;
# 264 "/usr/include/mach/i386/_structs.h" 3
char __fpu_rsrv4[(14 * 16)];
# 265 "/usr/include/mach/i386/_structs.h" 3
int __fpu_reserved1;
# 266 "/usr/include/mach/i386/_structs.h" 3
};
# 308 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_i386_exception_state {
# 310 "/usr/include/mach/i386/_structs.h" 3
unsigned __trapno;
# 311 "/usr/include/mach/i386/_structs.h" 3
unsigned __err;
# 312 "/usr/include/mach/i386/_structs.h" 3
unsigned __faultvaddr;
# 313 "/usr/include/mach/i386/_structs.h" 3
};
# 326 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_x86_debug_state32 {
# 328 "/usr/include/mach/i386/_structs.h" 3
unsigned __dr0;
# 329 "/usr/include/mach/i386/_structs.h" 3
unsigned __dr1;
# 330 "/usr/include/mach/i386/_structs.h" 3
unsigned __dr2;
# 331 "/usr/include/mach/i386/_structs.h" 3
unsigned __dr3;
# 332 "/usr/include/mach/i386/_structs.h" 3
unsigned __dr4;
# 333 "/usr/include/mach/i386/_structs.h" 3
unsigned __dr5;
# 334 "/usr/include/mach/i386/_structs.h" 3
unsigned __dr6;
# 335 "/usr/include/mach/i386/_structs.h" 3
unsigned __dr7;
# 336 "/usr/include/mach/i386/_structs.h" 3
};
# 358 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_x86_thread_state64 {
# 360 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rax;
# 361 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rbx;
# 362 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rcx;
# 363 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rdx;
# 364 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rdi;
# 365 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rsi;
# 366 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rbp;
# 367 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rsp;
# 368 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __r8;
# 369 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __r9;
# 370 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __r10;
# 371 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __r11;
# 372 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __r12;
# 373 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __r13;
# 374 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __r14;
# 375 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __r15;
# 376 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rip;
# 377 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __rflags;
# 378 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __cs;
# 379 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __fs;
# 380 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __gs;
# 381 "/usr/include/mach/i386/_structs.h" 3
};
# 413 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_x86_float_state64 {
# 415 "/usr/include/mach/i386/_structs.h" 3
int __fpu_reserved[2];
# 416 "/usr/include/mach/i386/_structs.h" 3
__darwin_fp_control __fpu_fcw;
# 417 "/usr/include/mach/i386/_structs.h" 3
__darwin_fp_status __fpu_fsw;
# 418 "/usr/include/mach/i386/_structs.h" 3
__uint8_t __fpu_ftw;
# 419 "/usr/include/mach/i386/_structs.h" 3
__uint8_t __fpu_rsrv1;
# 420 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_fop;
# 423 "/usr/include/mach/i386/_structs.h" 3
__uint32_t __fpu_ip;
# 424 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_cs;
# 426 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_rsrv2;
# 429 "/usr/include/mach/i386/_structs.h" 3
__uint32_t __fpu_dp;
# 430 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_ds;
# 432 "/usr/include/mach/i386/_structs.h" 3
__uint16_t __fpu_rsrv3;
# 433 "/usr/include/mach/i386/_structs.h" 3
__uint32_t __fpu_mxcsr;
# 434 "/usr/include/mach/i386/_structs.h" 3
__uint32_t __fpu_mxcsrmask;
# 435 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm0;
# 436 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm1;
# 437 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm2;
# 438 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm3;
# 439 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm4;
# 440 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm5;
# 441 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm6;
# 442 "/usr/include/mach/i386/_structs.h" 3
__darwin_mmst_reg __fpu_stmm7;
# 443 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm0;
# 444 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm1;
# 445 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm2;
# 446 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm3;
# 447 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm4;
# 448 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm5;
# 449 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm6;
# 450 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm7;
# 451 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm8;
# 452 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm9;
# 453 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm10;
# 454 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm11;
# 455 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm12;
# 456 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm13;
# 457 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm14;
# 458 "/usr/include/mach/i386/_structs.h" 3
__darwin_xmm_reg __fpu_xmm15;
# 459 "/usr/include/mach/i386/_structs.h" 3
char __fpu_rsrv4[(6 * 16)];
# 460 "/usr/include/mach/i386/_structs.h" 3
int __fpu_reserved1;
# 461 "/usr/include/mach/i386/_structs.h" 3
};
# 517 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_x86_exception_state64 {
# 519 "/usr/include/mach/i386/_structs.h" 3
unsigned __trapno;
# 520 "/usr/include/mach/i386/_structs.h" 3
unsigned __err;
# 521 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __faultvaddr;
# 522 "/usr/include/mach/i386/_structs.h" 3
};
# 535 "/usr/include/mach/i386/_structs.h" 3
struct __darwin_x86_debug_state64 {
# 537 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __dr0;
# 538 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __dr1;
# 539 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __dr2;
# 540 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __dr3;
# 541 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __dr4;
# 542 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __dr5;
# 543 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __dr6;
# 544 "/usr/include/mach/i386/_structs.h" 3
__uint64_t __dr7;
# 545 "/usr/include/mach/i386/_structs.h" 3
};
# 48 "/usr/include/i386/_structs.h" 3
struct __darwin_mcontext32 {
# 50 "/usr/include/i386/_structs.h" 3
__darwin_i386_exception_state __es;
# 51 "/usr/include/i386/_structs.h" 3
__darwin_i386_thread_state __ss;
# 52 "/usr/include/i386/_structs.h" 3
__darwin_i386_float_state __fs;
# 53 "/usr/include/i386/_structs.h" 3
};
# 68 "/usr/include/i386/_structs.h" 3
struct __darwin_mcontext64 {
# 70 "/usr/include/i386/_structs.h" 3
__darwin_x86_exception_state64 __es;
# 71 "/usr/include/i386/_structs.h" 3
__darwin_x86_thread_state64 __ss;
# 72 "/usr/include/i386/_structs.h" 3
__darwin_x86_float_state64 __fs;
# 73 "/usr/include/i386/_structs.h" 3
};
# 94 "/usr/include/i386/_structs.h" 3
typedef __darwin_mcontext32 *mcontext_t;
# 75 "/usr/include/sys/_structs.h" 3
struct __darwin_sigaltstack {
# 77 "/usr/include/sys/_structs.h" 3
void *ss_sp;
# 78 "/usr/include/sys/_structs.h" 3
__darwin_size_t ss_size;
# 79 "/usr/include/sys/_structs.h" 3
int ss_flags;
# 80 "/usr/include/sys/_structs.h" 3
};
# 128 "/usr/include/sys/_structs.h" 3
struct __darwin_ucontext {
# 130 "/usr/include/sys/_structs.h" 3
int uc_onstack;
# 131 "/usr/include/sys/_structs.h" 3
__darwin_sigset_t uc_sigmask;
# 132 "/usr/include/sys/_structs.h" 3
__darwin_sigaltstack uc_stack;
# 133 "/usr/include/sys/_structs.h" 3
__darwin_ucontext *uc_link;
# 134 "/usr/include/sys/_structs.h" 3
__darwin_size_t uc_mcsize;
# 135 "/usr/include/sys/_structs.h" 3
__darwin_mcontext32 *uc_mcontext;
# 139 "/usr/include/sys/_structs.h" 3
};
# 218 "/usr/include/sys/_structs.h" 3
typedef __darwin_sigaltstack stack_t;
# 227 "/usr/include/sys/_structs.h" 3
typedef __darwin_ucontext ucontext_t;
# 163 "/usr/include/sys/signal.h" 3
typedef __darwin_pthread_attr_t pthread_attr_t;
# 168 "/usr/include/sys/signal.h" 3
typedef __darwin_sigset_t sigset_t;
# 178 "/usr/include/sys/signal.h" 3
typedef __darwin_uid_t uid_t;
# 181 "/usr/include/sys/signal.h" 3
union sigval {
# 183 "/usr/include/sys/signal.h" 3
int sival_int;
# 184 "/usr/include/sys/signal.h" 3
void *sival_ptr;
# 185 "/usr/include/sys/signal.h" 3
};
# 191 "/usr/include/sys/signal.h" 3
struct sigevent {
# 192 "/usr/include/sys/signal.h" 3
int sigev_notify;
# 193 "/usr/include/sys/signal.h" 3
int sigev_signo;
# 194 "/usr/include/sys/signal.h" 3
sigval sigev_value;
# 195 "/usr/include/sys/signal.h" 3
void (*sigev_notify_function)(sigval);
# 196 "/usr/include/sys/signal.h" 3
pthread_attr_t *sigev_notify_attributes;
# 197 "/usr/include/sys/signal.h" 3
};
# 211 "/usr/include/sys/signal.h" 3
typedef
# 200 "/usr/include/sys/signal.h" 3
struct __siginfo {
# 201 "/usr/include/sys/signal.h" 3
int si_signo;
# 202 "/usr/include/sys/signal.h" 3
int si_errno;
# 203 "/usr/include/sys/signal.h" 3
int si_code;
# 204 "/usr/include/sys/signal.h" 3
pid_t si_pid;
# 205 "/usr/include/sys/signal.h" 3
uid_t si_uid;
# 206 "/usr/include/sys/signal.h" 3
int si_status;
# 207 "/usr/include/sys/signal.h" 3
void *si_addr;
# 208 "/usr/include/sys/signal.h" 3
sigval si_value;
# 209 "/usr/include/sys/signal.h" 3
long si_band;
# 210 "/usr/include/sys/signal.h" 3
unsigned long __pad[7];
# 211 "/usr/include/sys/signal.h" 3
} siginfo_t;
# 292 "/usr/include/sys/signal.h" 3
union __sigaction_u {
# 293 "/usr/include/sys/signal.h" 3
void (*__sa_handler)(int);
# 294 "/usr/include/sys/signal.h" 3
void (*__sa_sigaction)(int, __siginfo *, void *);
# 296 "/usr/include/sys/signal.h" 3
};
# 299 "/usr/include/sys/signal.h" 3
struct __sigaction {
# 300 "/usr/include/sys/signal.h" 3
::__sigaction_u __sigaction_u;
# 301 "/usr/include/sys/signal.h" 3
void (*sa_tramp)(void *, int, int, siginfo_t *, void *);
# 302 "/usr/include/sys/signal.h" 3
sigset_t sa_mask;
# 303 "/usr/include/sys/signal.h" 3
int sa_flags;
# 304 "/usr/include/sys/signal.h" 3
};
# 309 "/usr/include/sys/signal.h" 3
struct sigaction {
# 310 "/usr/include/sys/signal.h" 3
::__sigaction_u __sigaction_u;
# 311 "/usr/include/sys/signal.h" 3
sigset_t sa_mask;
# 312 "/usr/include/sys/signal.h" 3
int sa_flags;
# 313 "/usr/include/sys/signal.h" 3
};
# 354 "/usr/include/sys/signal.h" 3
typedef void (*sig_t)(int);
# 371 "/usr/include/sys/signal.h" 3
struct sigvec {
# 372 "/usr/include/sys/signal.h" 3
void (*sv_handler)(int);
# 373 "/usr/include/sys/signal.h" 3
int sv_mask;
# 374 "/usr/include/sys/signal.h" 3
int sv_flags;
# 375 "/usr/include/sys/signal.h" 3
};
# 390 "/usr/include/sys/signal.h" 3
struct sigstack {
# 391 "/usr/include/sys/signal.h" 3
char *ss_sp;
# 392 "/usr/include/sys/signal.h" 3
int ss_onstack;
# 393 "/usr/include/sys/signal.h" 3
};
# 413 "/usr/include/sys/signal.h" 3
extern "C" void (*signal(int, void (*)(int)))(int);
# 100 "/usr/include/sys/_structs.h" 3
struct timeval {
# 102 "/usr/include/sys/_structs.h" 3
__darwin_time_t tv_sec;
# 103 "/usr/include/sys/_structs.h" 3
__darwin_suseconds_t tv_usec;
# 104 "/usr/include/sys/_structs.h" 3
};
# 88 "/usr/include/sys/resource.h" 3
typedef __uint64_t rlim_t;
# 144 "/usr/include/sys/resource.h" 3
struct rusage {
# 145 "/usr/include/sys/resource.h" 3
timeval ru_utime;
# 146 "/usr/include/sys/resource.h" 3
timeval ru_stime;
# 155 "/usr/include/sys/resource.h" 3
long ru_maxrss;
# 157 "/usr/include/sys/resource.h" 3
long ru_ixrss;
# 158 "/usr/include/sys/resource.h" 3
long ru_idrss;
# 159 "/usr/include/sys/resource.h" 3
long ru_isrss;
# 160 "/usr/include/sys/resource.h" 3
long ru_minflt;
# 161 "/usr/include/sys/resource.h" 3
long ru_majflt;
# 162 "/usr/include/sys/resource.h" 3
long ru_nswap;
# 163 "/usr/include/sys/resource.h" 3
long ru_inblock;
# 164 "/usr/include/sys/resource.h" 3
long ru_oublock;
# 165 "/usr/include/sys/resource.h" 3
long ru_msgsnd;
# 166 "/usr/include/sys/resource.h" 3
long ru_msgrcv;
# 167 "/usr/include/sys/resource.h" 3
long ru_nsignals;
# 168 "/usr/include/sys/resource.h" 3
long ru_nvcsw;
# 169 "/usr/include/sys/resource.h" 3
long ru_nivcsw;
# 172 "/usr/include/sys/resource.h" 3
};
# 215 "/usr/include/sys/resource.h" 3
struct rlimit {
# 216 "/usr/include/sys/resource.h" 3
rlim_t rlim_cur;
# 217 "/usr/include/sys/resource.h" 3
rlim_t rlim_max;
# 218 "/usr/include/sys/resource.h" 3
};
# 238 "/usr/include/sys/resource.h" 3
extern "C" int getpriority(int, id_t);
# 240 "/usr/include/sys/resource.h" 3
extern "C" int getiopolicy_np(int, int);
# 242 "/usr/include/sys/resource.h" 3
extern "C" int getrlimit(int, rlimit *) __asm__("_getrlimit$UNIX2003");
# 243 "/usr/include/sys/resource.h" 3
extern "C" int getrusage(int, rusage *);
# 244 "/usr/include/sys/resource.h" 3
extern "C" int setpriority(int, id_t, int);
# 246 "/usr/include/sys/resource.h" 3
extern "C" int setiopolicy_np(int, int, int);
# 248 "/usr/include/sys/resource.h" 3
extern "C" int setrlimit(int, const rlimit *) __asm__("_setrlimit$UNIX2003");
# 46 "/usr/include/libkern/i386/_OSByteOrder.h" 3
static inline __uint16_t _OSSwapInt16(__uint16_t
# 47 "/usr/include/libkern/i386/_OSByteOrder.h" 3
_data)
# 49 "/usr/include/libkern/i386/_OSByteOrder.h" 3
{
# 50 "/usr/include/libkern/i386/_OSByteOrder.h" 3
return (_data << 8) | (_data >> 8);
# 51 "/usr/include/libkern/i386/_OSByteOrder.h" 3
}
# 55 "/usr/include/libkern/i386/_OSByteOrder.h" 3
static inline __uint32_t _OSSwapInt32(__uint32_t
# 56 "/usr/include/libkern/i386/_OSByteOrder.h" 3
_data)
# 58 "/usr/include/libkern/i386/_OSByteOrder.h" 3
{
# 62 "/usr/include/libkern/i386/_OSByteOrder.h" 3
__asm__("bswap   %0" : "+r" (_data));
# 63 "/usr/include/libkern/i386/_OSByteOrder.h" 3
return _data;
# 65 "/usr/include/libkern/i386/_OSByteOrder.h" 3
}
# 80 "/usr/include/libkern/i386/_OSByteOrder.h" 3
static inline __uint64_t _OSSwapInt64(__uint64_t
# 81 "/usr/include/libkern/i386/_OSByteOrder.h" 3
_data)
# 83 "/usr/include/libkern/i386/_OSByteOrder.h" 3
{
# 84 "/usr/include/libkern/i386/_OSByteOrder.h" 3
__asm__("bswap   %%eax\n\tbswap   %%edx\n\txchgl   %%eax, %%edx" : "+A" (_data));
# 88 "/usr/include/libkern/i386/_OSByteOrder.h" 3
return _data;
# 89 "/usr/include/libkern/i386/_OSByteOrder.h" 3
}
# 201 "/usr/include/sys/wait.h" 3
union wait {
# 202 "/usr/include/sys/wait.h" 3
int w_status;
# 206 "/usr/include/sys/wait.h" 3
struct {
# 208 "/usr/include/sys/wait.h" 3
unsigned w_Termsig:7,
# 209 "/usr/include/sys/wait.h" 3
w_Coredump:1,
# 210 "/usr/include/sys/wait.h" 3
w_Retcode:8,
# 211 "/usr/include/sys/wait.h" 3
w_Filler:16;
# 219 "/usr/include/sys/wait.h" 3
} w_T;
# 225 "/usr/include/sys/wait.h" 3
struct {
# 227 "/usr/include/sys/wait.h" 3
unsigned w_Stopval:8,
# 228 "/usr/include/sys/wait.h" 3
w_Stopsig:8,
# 229 "/usr/include/sys/wait.h" 3
w_Filler:16;
# 236 "/usr/include/sys/wait.h" 3
} w_S;
# 237 "/usr/include/sys/wait.h" 3
};
# 255 "/usr/include/sys/wait.h" 3
extern "C" pid_t wait(int *) __asm__("_wait$UNIX2003");
# 256 "/usr/include/sys/wait.h" 3
extern "C" pid_t waitpid(pid_t, int *, int) __asm__("_waitpid$UNIX2003");
# 258 "/usr/include/sys/wait.h" 3
extern "C" int waitid(idtype_t, id_t, siginfo_t *, int) __asm__("_waitid$UNIX2003");
# 261 "/usr/include/sys/wait.h" 3
extern "C" pid_t wait3(int *, int, rusage *);
# 262 "/usr/include/sys/wait.h" 3
extern "C" pid_t wait4(pid_t, int *, int, rusage *);
# 36 "/usr/include/alloca.h" 3
extern "C" void *alloca(size_t);
# 81 "/usr/include/stdlib.h" 3
typedef __darwin_ct_rune_t ct_rune_t;
# 86 "/usr/include/stdlib.h" 3
typedef __darwin_rune_t rune_t;
# 100 "/usr/include/stdlib.h" 3
typedef
# 97 "/usr/include/stdlib.h" 3
struct {
# 98 "/usr/include/stdlib.h" 3
int quot;
# 99 "/usr/include/stdlib.h" 3
int rem;
# 100 "/usr/include/stdlib.h" 3
} div_t;
# 105 "/usr/include/stdlib.h" 3
typedef
# 102 "/usr/include/stdlib.h" 3
struct {
# 103 "/usr/include/stdlib.h" 3
long quot;
# 104 "/usr/include/stdlib.h" 3
long rem;
# 105 "/usr/include/stdlib.h" 3
} ldiv_t;
# 111 "/usr/include/stdlib.h" 3
typedef
# 108 "/usr/include/stdlib.h" 3
struct {
# 109 "/usr/include/stdlib.h" 3
long long quot;
# 110 "/usr/include/stdlib.h" 3
long long rem;
# 111 "/usr/include/stdlib.h" 3
} lldiv_t;
# 134 "/usr/include/stdlib.h" 3
extern int __mb_cur_max;
# 145 "/usr/include/stdlib.h" 3
extern "C" void abort() __attribute__((__noreturn__));
# 146 "/usr/include/stdlib.h" 3
extern "C" __attribute__((weak)) int abs(int) __attribute__((__const__));
# 147 "/usr/include/stdlib.h" 3
extern "C" int atexit(void (*)(void));
# 148 "/usr/include/stdlib.h" 3
extern "C" double atof(const char *);
# 149 "/usr/include/stdlib.h" 3
extern "C" int atoi(const char *);
# 150 "/usr/include/stdlib.h" 3
extern "C" long atol(const char *);
# 153 "/usr/include/stdlib.h" 3
extern "C" long long atoll(const char *);
# 155 "/usr/include/stdlib.h" 3
extern "C" void *bsearch(const void *, const void *, size_t, size_t, int (*)(const void *, const void *));
# 157 "/usr/include/stdlib.h" 3
extern "C" void *calloc(size_t, size_t);
# 158 "/usr/include/stdlib.h" 3
extern "C" div_t div(int, int) __attribute__((__const__));
# 159 "/usr/include/stdlib.h" 3
extern "C" void exit(int) __attribute__((__noreturn__));
# 160 "/usr/include/stdlib.h" 3
extern "C" void free(void *);
# 161 "/usr/include/stdlib.h" 3
extern "C" char *getenv(const char *);
# 162 "/usr/include/stdlib.h" 3
extern "C" __attribute__((weak)) long labs(long) __attribute__((__const__));
# 163 "/usr/include/stdlib.h" 3
extern "C" ldiv_t ldiv(long, long) __attribute__((__const__));
# 166 "/usr/include/stdlib.h" 3
extern "C" __attribute__((weak)) long long llabs(long long);
# 167 "/usr/include/stdlib.h" 3
extern "C" lldiv_t lldiv(long long, long long);
# 169 "/usr/include/stdlib.h" 3
extern "C" void *malloc(size_t);
# 170 "/usr/include/stdlib.h" 3
extern "C" int mblen(const char *, size_t);
# 171 "/usr/include/stdlib.h" 3
extern "C" size_t mbstowcs(wchar_t *, const char *, size_t);
# 172 "/usr/include/stdlib.h" 3
extern "C" int mbtowc(wchar_t *, const char *, size_t);
# 173 "/usr/include/stdlib.h" 3
extern "C" int posix_memalign(void **, size_t, size_t);
# 174 "/usr/include/stdlib.h" 3
extern "C" void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
# 176 "/usr/include/stdlib.h" 3
extern "C" int rand();
# 177 "/usr/include/stdlib.h" 3
extern "C" void *realloc(void *, size_t);
# 178 "/usr/include/stdlib.h" 3
extern "C" void srand(unsigned);
# 179 "/usr/include/stdlib.h" 3
extern "C" double strtod(const char *, char **) __asm__("_strtod$UNIX2003");
# 180 "/usr/include/stdlib.h" 3
extern "C" float strtof(const char *, char **) __asm__("_strtof$UNIX2003");
# 181 "/usr/include/stdlib.h" 3
extern "C" long strtol(const char *, char **, int);
# 183 "/usr/include/stdlib.h" 3
extern "C" long double strtold(const char *, char **);
# 186 "/usr/include/stdlib.h" 3
extern "C" long long strtoll(const char *, char **, int);
# 189 "/usr/include/stdlib.h" 3
extern "C" unsigned long strtoul(const char *, char **, int);
# 192 "/usr/include/stdlib.h" 3
extern "C" unsigned long long strtoull(const char *, char **, int);
# 194 "/usr/include/stdlib.h" 3
extern "C" int system(const char *) __asm__("_system$UNIX2003");
# 195 "/usr/include/stdlib.h" 3
extern "C" size_t wcstombs(char *, const wchar_t *, size_t);
# 196 "/usr/include/stdlib.h" 3
extern "C" int wctomb(char *, wchar_t);
# 199 "/usr/include/stdlib.h" 3
extern "C" void _Exit(int) __attribute__((__noreturn__));
# 200 "/usr/include/stdlib.h" 3
extern "C" long a64l(const char *);
# 201 "/usr/include/stdlib.h" 3
extern "C" double drand48();
# 202 "/usr/include/stdlib.h" 3
extern "C" char *ecvt(double, int, int *, int *);
# 203 "/usr/include/stdlib.h" 3
extern "C" double erand48(unsigned short [3]);
# 204 "/usr/include/stdlib.h" 3
extern "C" char *fcvt(double, int, int *, int *);
# 205 "/usr/include/stdlib.h" 3
extern "C" char *gcvt(double, int, char *);
# 206 "/usr/include/stdlib.h" 3
extern "C" int getsubopt(char **, char *const *, char **);
# 207 "/usr/include/stdlib.h" 3
extern "C" int grantpt(int);
# 209 "/usr/include/stdlib.h" 3
extern "C" char *initstate(unsigned, char *, size_t);
# 213 "/usr/include/stdlib.h" 3
extern "C" long jrand48(unsigned short [3]);
# 214 "/usr/include/stdlib.h" 3
extern "C" char *l64a(long);
# 215 "/usr/include/stdlib.h" 3
extern "C" void lcong48(unsigned short [7]);
# 216 "/usr/include/stdlib.h" 3
extern "C" long lrand48();
# 217 "/usr/include/stdlib.h" 3
extern "C" char *mktemp(char *);
# 218 "/usr/include/stdlib.h" 3
extern "C" int mkstemp(char *);
# 219 "/usr/include/stdlib.h" 3
extern "C" long mrand48();
# 220 "/usr/include/stdlib.h" 3
extern "C" long nrand48(unsigned short [3]);
# 221 "/usr/include/stdlib.h" 3
extern "C" int posix_openpt(int);
# 222 "/usr/include/stdlib.h" 3
extern "C" char *ptsname(int);
# 223 "/usr/include/stdlib.h" 3
extern "C" int putenv(char *) __asm__("_putenv$UNIX2003");
# 224 "/usr/include/stdlib.h" 3
extern "C" long random();
# 225 "/usr/include/stdlib.h" 3
extern "C" int rand_r(unsigned *);
# 227 "/usr/include/stdlib.h" 3
extern "C" char *realpath(const char *, char *) __asm__("_realpath$DARWIN_EXTSN");
# 232 "/usr/include/stdlib.h" 3
extern "C" unsigned short *seed48(unsigned short [3]);
# 233 "/usr/include/stdlib.h" 3
extern "C" int setenv(const char *, const char *, int) __asm__("_setenv$UNIX2003");
# 235 "/usr/include/stdlib.h" 3
extern "C" void setkey(const char *) __asm__("_setkey$UNIX2003");
# 239 "/usr/include/stdlib.h" 3
extern "C" char *setstate(const char *);
# 240 "/usr/include/stdlib.h" 3
extern "C" void srand48(long);
# 242 "/usr/include/stdlib.h" 3
extern "C" void srandom(unsigned);
# 246 "/usr/include/stdlib.h" 3
extern "C" int unlockpt(int);
# 248 "/usr/include/stdlib.h" 3
extern "C" int unsetenv(const char *) __asm__("_unsetenv$UNIX2003");
# 78 "/usr/include/i386/types.h" 3
extern "C" { typedef signed char int8_t; }
# 80 "/usr/include/i386/types.h" 3
extern "C" { typedef unsigned char u_int8_t; }
# 83 "/usr/include/i386/types.h" 3
extern "C" { typedef short int16_t; }
# 85 "/usr/include/i386/types.h" 3
extern "C" { typedef unsigned short u_int16_t; }
# 88 "/usr/include/i386/types.h" 3
extern "C" { typedef int int32_t; }
# 90 "/usr/include/i386/types.h" 3
extern "C" { typedef unsigned u_int32_t; }
# 93 "/usr/include/i386/types.h" 3
extern "C" { typedef long long int64_t; }
# 95 "/usr/include/i386/types.h" 3
extern "C" { typedef unsigned long long u_int64_t; }
# 100 "/usr/include/i386/types.h" 3
extern "C" { typedef int32_t register_t; }
# 105 "/usr/include/i386/types.h" 3
extern "C" { typedef __darwin_intptr_t intptr_t; }
# 109 "/usr/include/i386/types.h" 3
extern "C" { typedef unsigned long uintptr_t; }
# 114 "/usr/include/i386/types.h" 3
extern "C" { typedef u_int64_t user_addr_t; }
# 115 "/usr/include/i386/types.h" 3
extern "C" { typedef u_int64_t user_size_t; }
# 116 "/usr/include/i386/types.h" 3
extern "C" { typedef int64_t user_ssize_t; }
# 117 "/usr/include/i386/types.h" 3
extern "C" { typedef int64_t user_long_t; }
# 118 "/usr/include/i386/types.h" 3
extern "C" { typedef u_int64_t user_ulong_t; }
# 119 "/usr/include/i386/types.h" 3
extern "C" { typedef int64_t user_time_t; }
# 120 "/usr/include/i386/types.h" 3
extern "C" { typedef int64_t user_off_t; }
# 128 "/usr/include/i386/types.h" 3
extern "C" { typedef u_int64_t syscall_arg_t; }
# 258 "/usr/include/stdlib.h" 3
extern "C" { typedef __darwin_dev_t dev_t; }
# 263 "/usr/include/stdlib.h" 3
extern "C" { typedef __darwin_mode_t mode_t; }
# 268 "/usr/include/stdlib.h" 3
extern "C" u_int32_t arc4random();
# 269 "/usr/include/stdlib.h" 3
extern "C" void arc4random_addrandom(unsigned char *, int);
# 270 "/usr/include/stdlib.h" 3
extern "C" void arc4random_stir();
# 278 "/usr/include/stdlib.h" 3
extern "C" char *cgetcap(char *, const char *, int);
# 279 "/usr/include/stdlib.h" 3
extern "C" int cgetclose();
# 280 "/usr/include/stdlib.h" 3
extern "C" int cgetent(char **, char **, const char *);
# 281 "/usr/include/stdlib.h" 3
extern "C" int cgetfirst(char **, char **);
# 282 "/usr/include/stdlib.h" 3
extern "C" int cgetmatch(const char *, const char *);
# 283 "/usr/include/stdlib.h" 3
extern "C" int cgetnext(char **, char **);
# 284 "/usr/include/stdlib.h" 3
extern "C" int cgetnum(char *, const char *, long *);
# 285 "/usr/include/stdlib.h" 3
extern "C" int cgetset(const char *);
# 286 "/usr/include/stdlib.h" 3
extern "C" int cgetstr(char *, const char *, char **);
# 287 "/usr/include/stdlib.h" 3
extern "C" int cgetustr(char *, const char *, char **);
# 289 "/usr/include/stdlib.h" 3
extern "C" int daemon(int, int) __asm__("_daemon$1050") __attribute__((__deprecated__)) __attribute__((visibility("default")));
# 290 "/usr/include/stdlib.h" 3
extern "C" char *devname(dev_t, mode_t);
# 291 "/usr/include/stdlib.h" 3
extern "C" char *devname_r(dev_t, mode_t, char *, int);
# 292 "/usr/include/stdlib.h" 3
extern "C" char *getbsize(int *, long *);
# 293 "/usr/include/stdlib.h" 3
extern "C" int getloadavg(double [], int);
# 295 "/usr/include/stdlib.h" 3
extern "C" const char *getprogname();
# 297 "/usr/include/stdlib.h" 3
extern "C" int heapsort(void *, size_t, size_t, int (*)(const void *, const void *));
# 303 "/usr/include/stdlib.h" 3
extern "C" int mergesort(void *, size_t, size_t, int (*)(const void *, const void *));
# 309 "/usr/include/stdlib.h" 3
extern "C" void psort(void *, size_t, size_t, int (*)(const void *, const void *));
# 315 "/usr/include/stdlib.h" 3
extern "C" void psort_r(void *, size_t, size_t, void *, int (*)(void *, const void *, const void *));
# 321 "/usr/include/stdlib.h" 3
extern "C" void qsort_r(void *, size_t, size_t, void *, int (*)(void *, const void *, const void *));
# 323 "/usr/include/stdlib.h" 3
extern "C" int radixsort(const unsigned char **, int, const unsigned char *, unsigned);
# 325 "/usr/include/stdlib.h" 3
extern "C" void setprogname(const char *);
# 326 "/usr/include/stdlib.h" 3
extern "C" int sradixsort(const unsigned char **, int, const unsigned char *, unsigned);
# 328 "/usr/include/stdlib.h" 3
extern "C" void sranddev();
# 329 "/usr/include/stdlib.h" 3
extern "C" void srandomdev();
# 330 "/usr/include/stdlib.h" 3
extern "C" void *reallocf(void *, size_t);
# 333 "/usr/include/stdlib.h" 3
extern "C" long long strtoq(const char *, char **, int);
# 335 "/usr/include/stdlib.h" 3
extern "C" unsigned long long strtouq(const char *, char **, int);
# 337 "/usr/include/stdlib.h" 3
extern "C" { extern char *suboptarg; }
# 338 "/usr/include/stdlib.h" 3
extern "C" void *valloc(size_t);
# 138 "/usr/include/sys/unistd.h" 3
struct accessx_descriptor {
# 139 "/usr/include/sys/unistd.h" 3
unsigned ad_name_offset;
# 140 "/usr/include/sys/unistd.h" 3
int ad_flags;
# 141 "/usr/include/sys/unistd.h" 3
int ad_pad[2];
# 142 "/usr/include/sys/unistd.h" 3
};
# 83 "/usr/include/unistd.h" 3
typedef __darwin_gid_t gid_t;
# 100 "/usr/include/unistd.h" 3
typedef __darwin_off_t off_t;
# 127 "/usr/include/unistd.h" 3
typedef __darwin_useconds_t useconds_t;
# 133 "/usr/include/unistd.h" 3
typedef __darwin_uuid_t uuid_t;
# 416 "/usr/include/unistd.h" 3
extern "C" void _exit(int) __attribute__((__noreturn__));
# 417 "/usr/include/unistd.h" 3
extern "C" int access(const char *, int);
# 419 "/usr/include/unistd.h" 3
extern "C" unsigned alarm(unsigned);
# 420 "/usr/include/unistd.h" 3
extern "C" int chdir(const char *);
# 421 "/usr/include/unistd.h" 3
extern "C" int chown(const char *, uid_t, gid_t);
# 422 "/usr/include/unistd.h" 3
extern "C" int close(int) __asm__("_close$UNIX2003");
# 423 "/usr/include/unistd.h" 3
extern "C" size_t confstr(int, char *, size_t) __asm__("_confstr$UNIX2003");
# 424 "/usr/include/unistd.h" 3
extern "C" char *crypt(const char *, const char *);
# 425 "/usr/include/unistd.h" 3
extern "C" char *ctermid(char *);
# 426 "/usr/include/unistd.h" 3
extern "C" int dup(int);
# 427 "/usr/include/unistd.h" 3
extern "C" int dup2(int, int);
# 429 "/usr/include/unistd.h" 3
extern "C" void encrypt(char *, int) __asm__("_encrypt$UNIX2003");
# 433 "/usr/include/unistd.h" 3
extern "C" int execl(const char *, const char *, ...);
# 434 "/usr/include/unistd.h" 3
extern "C" int execle(const char *, const char *, ...);
# 435 "/usr/include/unistd.h" 3
extern "C" int execlp(const char *, const char *, ...);
# 436 "/usr/include/unistd.h" 3
extern "C" int execv(const char *, char *const *);
# 437 "/usr/include/unistd.h" 3
extern "C" int execve(const char *, char *const *, char *const *);
# 438 "/usr/include/unistd.h" 3
extern "C" int execvp(const char *, char *const *);
# 439 "/usr/include/unistd.h" 3
extern "C" int fchown(int, uid_t, gid_t);
# 440 "/usr/include/unistd.h" 3
extern "C" int fchdir(int);
# 441 "/usr/include/unistd.h" 3
extern "C" pid_t fork();
# 442 "/usr/include/unistd.h" 3
extern "C" long fpathconf(int, int);
# 443 "/usr/include/unistd.h" 3
extern "C" int fsync(int) __asm__("_fsync$UNIX2003");
# 444 "/usr/include/unistd.h" 3
extern "C" int ftruncate(int, off_t);
# 445 "/usr/include/unistd.h" 3
extern "C" char *getcwd(char *, size_t);
# 446 "/usr/include/unistd.h" 3
extern "C" gid_t getegid();
# 447 "/usr/include/unistd.h" 3
extern "C" uid_t geteuid();
# 448 "/usr/include/unistd.h" 3
extern "C" gid_t getgid();
# 452 "/usr/include/unistd.h" 3
extern "C" int getgroups(int, gid_t []);
# 454 "/usr/include/unistd.h" 3
extern "C" long gethostid();
# 455 "/usr/include/unistd.h" 3
extern "C" int gethostname(char *, size_t);
# 456 "/usr/include/unistd.h" 3
extern "C" char *getlogin();
# 457 "/usr/include/unistd.h" 3
extern "C" int getlogin_r(char *, size_t);
# 458 "/usr/include/unistd.h" 3
extern "C" int getopt(int, char *const [], const char *) __asm__("_getopt$UNIX2003");
# 459 "/usr/include/unistd.h" 3
extern "C" pid_t getpgid(pid_t);
# 460 "/usr/include/unistd.h" 3
extern "C" pid_t getpgrp();
# 461 "/usr/include/unistd.h" 3
extern "C" pid_t getpid();
# 462 "/usr/include/unistd.h" 3
extern "C" pid_t getppid();
# 463 "/usr/include/unistd.h" 3
extern "C" pid_t getsid(pid_t);
# 464 "/usr/include/unistd.h" 3
extern "C" uid_t getuid();
# 465 "/usr/include/unistd.h" 3
extern "C" char *getwd(char *);
# 466 "/usr/include/unistd.h" 3
extern "C" int isatty(int);
# 467 "/usr/include/unistd.h" 3
extern "C" int lchown(const char *, uid_t, gid_t) __asm__("_lchown$UNIX2003");
# 468 "/usr/include/unistd.h" 3
extern "C" int link(const char *, const char *);
# 469 "/usr/include/unistd.h" 3
extern "C" int lockf(int, int, off_t) __asm__("_lockf$UNIX2003");
# 470 "/usr/include/unistd.h" 3
extern "C" off_t lseek(int, off_t, int);
# 471 "/usr/include/unistd.h" 3
extern "C" int nice(int) __asm__("_nice$UNIX2003");
# 472 "/usr/include/unistd.h" 3
extern "C" long pathconf(const char *, int);
# 473 "/usr/include/unistd.h" 3
extern "C" int pause() __asm__("_pause$UNIX2003");
# 474 "/usr/include/unistd.h" 3
extern "C" int pipe(int [2]);
# 475 "/usr/include/unistd.h" 3
extern "C" ssize_t pread(int, void *, size_t, off_t) __asm__("_pread$UNIX2003");
# 476 "/usr/include/unistd.h" 3
extern "C" ssize_t pwrite(int, const void *, size_t, off_t) __asm__("_pwrite$UNIX2003");
# 477 "/usr/include/unistd.h" 3
extern "C" ssize_t read(int, void *, size_t) __asm__("_read$UNIX2003");
# 478 "/usr/include/unistd.h" 3
extern "C" ssize_t readlink(const char *, char *, size_t);
# 479 "/usr/include/unistd.h" 3
extern "C" int rmdir(const char *);
# 480 "/usr/include/unistd.h" 3
extern "C" int setegid(gid_t);
# 481 "/usr/include/unistd.h" 3
extern "C" int seteuid(uid_t);
# 482 "/usr/include/unistd.h" 3
extern "C" int setgid(gid_t);
# 483 "/usr/include/unistd.h" 3
extern "C" int setpgid(pid_t, pid_t);
# 485 "/usr/include/unistd.h" 3
extern "C" pid_t setpgrp() __asm__("_setpgrp$UNIX2003");
# 489 "/usr/include/unistd.h" 3
extern "C" int setregid(gid_t, gid_t) __asm__("_setregid$UNIX2003");
# 490 "/usr/include/unistd.h" 3
extern "C" int setreuid(uid_t, uid_t) __asm__("_setreuid$UNIX2003");
# 491 "/usr/include/unistd.h" 3
extern "C" pid_t setsid();
# 492 "/usr/include/unistd.h" 3
extern "C" int setuid(uid_t);
# 494 "/usr/include/unistd.h" 3
extern "C" unsigned sleep(unsigned) __asm__("_sleep$UNIX2003");
# 495 "/usr/include/unistd.h" 3
extern "C" void swab(const void *, void *, ssize_t);
# 496 "/usr/include/unistd.h" 3
extern "C" int symlink(const char *, const char *);
# 497 "/usr/include/unistd.h" 3
extern "C" void sync();
# 498 "/usr/include/unistd.h" 3
extern "C" long sysconf(int);
# 499 "/usr/include/unistd.h" 3
extern "C" pid_t tcgetpgrp(int);
# 500 "/usr/include/unistd.h" 3
extern "C" int tcsetpgrp(int, pid_t);
# 501 "/usr/include/unistd.h" 3
extern "C" int truncate(const char *, off_t);
# 502 "/usr/include/unistd.h" 3
extern "C" char *ttyname(int);
# 504 "/usr/include/unistd.h" 3
extern "C" int ttyname_r(int, char *, size_t) __asm__("_ttyname_r$UNIX2003");
# 509 "/usr/include/unistd.h" 3
extern "C" useconds_t ualarm(useconds_t, useconds_t);
# 510 "/usr/include/unistd.h" 3
extern "C" int unlink(const char *);
# 511 "/usr/include/unistd.h" 3
extern "C" int usleep(useconds_t) __asm__("_usleep$UNIX2003");
# 512 "/usr/include/unistd.h" 3
extern "C" pid_t vfork();
# 513 "/usr/include/unistd.h" 3
extern "C" ssize_t write(int, const void *, size_t) __asm__("_write$UNIX2003");
# 515 "/usr/include/unistd.h" 3
extern "C" { extern char *optarg; }
# 516 "/usr/include/unistd.h" 3
extern "C" { extern int optind, opterr, optopt; }
# 186 "/usr/include/sys/_structs.h" 3
extern "C" { typedef
# 184 "/usr/include/sys/_structs.h" 3
struct fd_set {
# 185 "/usr/include/sys/_structs.h" 3
__int32_t fds_bits[((((1024) % (sizeof(__int32_t) * (8))) == (0)) ? ((1024) / (sizeof(__int32_t) * (8))) : (((1024) / (sizeof(__int32_t) * (8))) + (1)))];
# 186 "/usr/include/sys/_structs.h" 3
} fd_set; }
# 191 "/usr/include/sys/_structs.h" 3
extern "C" { static inline int __darwin_fd_isset(int _n, const fd_set *_p)
# 192 "/usr/include/sys/_structs.h" 3
{
# 193 "/usr/include/sys/_structs.h" 3
return ((_p->fds_bits)[_n / (sizeof(__int32_t) * (8))]) & (1 << (_n % (sizeof(__int32_t) * (8))));
# 194 "/usr/include/sys/_structs.h" 3
} }
# 92 "/usr/include/sys/select.h" 3
extern "C" { typedef __darwin_suseconds_t suseconds_t; }
# 137 "/usr/include/sys/select.h" 3
extern "C" int pselect(int, fd_set *, fd_set *, fd_set *, const timespec *, const sigset_t *) __asm__("_pselect$UNIX2003");
# 39 "/usr/include/sys/_select.h" 3
extern "C" int select(int, fd_set *, fd_set *, fd_set *, timeval *) __asm__("_select$UNIX2003");
# 521 "/usr/include/unistd.h" 3
extern "C" void _Exit(int) __attribute__((__noreturn__));
# 522 "/usr/include/unistd.h" 3
extern "C" int accessx_np(const accessx_descriptor *, size_t, int *, uid_t);
# 523 "/usr/include/unistd.h" 3
extern "C" int acct(const char *);
# 524 "/usr/include/unistd.h" 3
extern "C" int add_profil(char *, size_t, unsigned long, unsigned);
# 525 "/usr/include/unistd.h" 3
extern "C" void *brk(const void *);
# 526 "/usr/include/unistd.h" 3
extern "C" int chroot(const char *);
# 527 "/usr/include/unistd.h" 3
extern "C" void endusershell();
# 528 "/usr/include/unistd.h" 3
extern "C" int execvP(const char *, const char *, char *const *);
# 529 "/usr/include/unistd.h" 3
extern "C" char *fflagstostr(unsigned long);
# 530 "/usr/include/unistd.h" 3
extern "C" int getdtablesize();
# 531 "/usr/include/unistd.h" 3
extern "C" int getdomainname(char *, int);
# 532 "/usr/include/unistd.h" 3
extern "C" int getgrouplist(const char *, int, int *, int *);
# 533 "/usr/include/unistd.h" 3
extern "C" int gethostuuid(uuid_t, const timespec *);
# 534 "/usr/include/unistd.h" 3
extern "C" mode_t getmode(const void *, mode_t);
# 535 "/usr/include/unistd.h" 3
extern "C" int getpagesize() __attribute__((__const__));
# 536 "/usr/include/unistd.h" 3
extern "C" char *getpass(const char *);
# 537 "/usr/include/unistd.h" 3
extern "C" int getpeereid(int, uid_t *, gid_t *);
# 538 "/usr/include/unistd.h" 3
extern "C" int getpgid(pid_t);
# 539 "/usr/include/unistd.h" 3
extern "C" int getsgroups_np(int *, uuid_t);
# 540 "/usr/include/unistd.h" 3
extern "C" int getsid(pid_t);
# 541 "/usr/include/unistd.h" 3
extern "C" char *getusershell();
# 542 "/usr/include/unistd.h" 3
extern "C" int getwgroups_np(int *, uuid_t);
# 543 "/usr/include/unistd.h" 3
extern "C" int initgroups(const char *, int);
# 544 "/usr/include/unistd.h" 3
extern "C" int iruserok(unsigned long, int, const char *, const char *);
# 545 "/usr/include/unistd.h" 3
extern "C" int iruserok_sa(const void *, int, int, const char *, const char *);
# 546 "/usr/include/unistd.h" 3
extern "C" int issetugid();
# 547 "/usr/include/unistd.h" 3
extern "C" char *mkdtemp(char *);
# 548 "/usr/include/unistd.h" 3
extern "C" int mknod(const char *, mode_t, dev_t);
# 549 "/usr/include/unistd.h" 3
extern "C" int mkstemp(char *);
# 550 "/usr/include/unistd.h" 3
extern "C" int mkstemps(char *, int);
# 551 "/usr/include/unistd.h" 3
extern "C" char *mktemp(char *);
# 552 "/usr/include/unistd.h" 3
extern "C" int nfssvc(int, void *);
# 553 "/usr/include/unistd.h" 3
extern "C" int profil(char *, size_t, unsigned long, unsigned);
# 554 "/usr/include/unistd.h" 3
extern "C" int pthread_setugid_np(uid_t, gid_t);
# 555 "/usr/include/unistd.h" 3
extern "C" int pthread_getugid_np(uid_t *, gid_t *);
# 556 "/usr/include/unistd.h" 3
extern "C" int rcmd(char **, int, const char *, const char *, const char *, int *);
# 557 "/usr/include/unistd.h" 3
extern "C" int rcmd_af(char **, int, const char *, const char *, const char *, int *, int);
# 559 "/usr/include/unistd.h" 3
extern "C" int reboot(int);
# 560 "/usr/include/unistd.h" 3
extern "C" int revoke(const char *);
# 561 "/usr/include/unistd.h" 3
extern "C" int rresvport(int *);
# 562 "/usr/include/unistd.h" 3
extern "C" int rresvport_af(int *, int);
# 563 "/usr/include/unistd.h" 3
extern "C" int ruserok(const char *, int, const char *, const char *);
# 564 "/usr/include/unistd.h" 3
extern "C" void *sbrk(int);
# 565 "/usr/include/unistd.h" 3
extern "C" int setdomainname(const char *, int);
# 566 "/usr/include/unistd.h" 3
extern "C" int setgroups(int, const gid_t *);
# 567 "/usr/include/unistd.h" 3
extern "C" void sethostid(long);
# 568 "/usr/include/unistd.h" 3
extern "C" int sethostname(const char *, int);
# 570 "/usr/include/unistd.h" 3
extern "C" void setkey(const char *) __asm__("_setkey$UNIX2003");
# 574 "/usr/include/unistd.h" 3
extern "C" int setlogin(const char *);
# 575 "/usr/include/unistd.h" 3
extern "C" void *setmode(const char *) __asm__("_setmode$UNIX2003");
# 576 "/usr/include/unistd.h" 3
extern "C" int setrgid(gid_t);
# 577 "/usr/include/unistd.h" 3
extern "C" int setruid(uid_t);
# 578 "/usr/include/unistd.h" 3
extern "C" int setsgroups_np(int, const uuid_t);
# 579 "/usr/include/unistd.h" 3
extern "C" void setusershell();
# 580 "/usr/include/unistd.h" 3
extern "C" int setwgroups_np(int, const uuid_t);
# 581 "/usr/include/unistd.h" 3
extern "C" int strtofflags(char **, unsigned long *, unsigned long *);
# 582 "/usr/include/unistd.h" 3
extern "C" int swapon(const char *);
# 583 "/usr/include/unistd.h" 3
extern "C" int syscall(int, ...);
# 584 "/usr/include/unistd.h" 3
extern "C" int ttyslot();
# 585 "/usr/include/unistd.h" 3
extern "C" int undelete(const char *);
# 586 "/usr/include/unistd.h" 3
extern "C" int unwhiteout(const char *);
# 587 "/usr/include/unistd.h" 3
extern "C" void *valloc(size_t);
# 589 "/usr/include/unistd.h" 3
extern "C" { extern char *suboptarg; }
# 590 "/usr/include/unistd.h" 3
extern "C" int getsubopt(char **, char *const *, char **);
# 602 "/usr/include/unistd.h" 3
extern "C" int fgetattrlist(int, void *, void *, size_t, unsigned long);
# 603 "/usr/include/unistd.h" 3
extern "C" int fsetattrlist(int, void *, void *, size_t, unsigned long);
# 604 "/usr/include/unistd.h" 3
extern "C" int getattrlist(const char *, void *, void *, size_t, unsigned long) __asm__("_getattrlist$UNIX2003");
# 605 "/usr/include/unistd.h" 3
extern "C" int setattrlist(const char *, void *, void *, size_t, unsigned long) __asm__("_setattrlist$UNIX2003");
# 606 "/usr/include/unistd.h" 3
extern "C" int exchangedata(const char *, const char *, unsigned long);
# 607 "/usr/include/unistd.h" 3
extern "C" int getdirentriesattr(int, void *, void *, size_t, unsigned long *, unsigned long *, unsigned long *, unsigned long);
# 611 "/usr/include/unistd.h" 3
struct fssearchblock;
# 612 "/usr/include/unistd.h" 3
struct searchstate;
# 614 "/usr/include/unistd.h" 3
extern "C" int searchfs(const char *, fssearchblock *, unsigned long *, unsigned, unsigned, searchstate *);
# 615 "/usr/include/unistd.h" 3
extern "C" int fsctl(const char *, unsigned long, void *, unsigned);
# 616 "/usr/include/unistd.h" 3
extern "C" int ffsctl(int, unsigned long, void *, unsigned);
# 618 "/usr/include/unistd.h" 3
extern "C" { extern int optreset; }
# 89 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/os_defines.h" 3
extern "C" void __dtrace_probe$cxa_runtime$cxa_exception_rethrow$v1();
# 90 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/os_defines.h" 3
extern "C" int __dtrace_isenabled$cxa_runtime$cxa_exception_rethrow$v1();
# 91 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/os_defines.h" 3
extern "C" void __dtrace_probe$cxa_runtime$cxa_exception_throw$v1$766f6964202a(void *);
# 92 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/os_defines.h" 3
extern "C" int __dtrace_isenabled$cxa_runtime$cxa_exception_throw$v1();
# 153 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++config.h" 3
namespace std {
# 165 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++config.h" 3
}
# 74 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
namespace __gnu_cxx {
# 76 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template < typename _Iterator, typename _Container >
    class __normal_iterator;
# 79 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
}
# 81 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
namespace std {
# 83 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
namespace __detail {
# 87 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef char __one;
# 88 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef char __two[2];
# 90 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Tp> __one __test_type(int _Tp::*);
# 92 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Tp> __two &__test_type(...);
# 94 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
}
# 97 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __true_type { };
# 98 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __false_type { };
# 100 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< bool __T0>
# 101 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __truth_type {
# 102 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __false_type __type; };
# 105 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __truth_type< true> {
# 106 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type; };
# 110 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Sp, class _Tp>
# 111 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __traitor {
# 113 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = (((bool)_Sp::__value) || ((bool)_Tp::__value))};
# 114 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef typename __truth_type< __value> ::__type __type;
# 115 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 118 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class , class >
# 119 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __are_same {
# 121 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value};
# 122 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 123 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 125 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Tp>
# 126 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __are_same< _Tp, _Tp> {
# 128 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 129 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 130 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 133 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Tp>
# 134 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __is_void {
# 136 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value};
# 137 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 138 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 141 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_void< void> {
# 143 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 144 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 145 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 150 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Tp>
# 151 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __is_integer {
# 153 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value};
# 154 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 155 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 161 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_integer< bool> {
# 163 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 164 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 165 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 168 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_integer< char> {
# 170 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 171 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 172 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 175 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_integer< signed char> {
# 177 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 178 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 179 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 182 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned char> {
# 184 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 185 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 186 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 190 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_integer< wchar_t> {
# 192 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 193 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 194 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 198 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_integer< short> {
# 200 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 201 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 202 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 205 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned short> {
# 207 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 208 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 209 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 212 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_integer< int> {
# 214 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 215 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 216 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 219 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned> {
# 221 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 222 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 223 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 226 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_integer< long> {
# 228 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 229 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 230 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 233 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned long> {
# 235 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 236 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 237 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 240 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_integer< long long> {
# 242 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 243 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 244 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 247 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_integer< unsigned long long> {
# 249 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 250 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 251 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 256 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Tp>
# 257 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __is_floating {
# 259 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value};
# 260 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 261 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 265 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_floating< float> {
# 267 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 268 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 269 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 272 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_floating< double> {
# 274 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 275 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 276 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 279 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_floating< long double> {
# 281 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 282 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 283 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 288 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Tp>
# 289 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __is_pointer {
# 291 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value};
# 292 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 293 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 295 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Tp>
# 296 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __is_pointer< _Tp *> {
# 298 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 299 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 300 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 305 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Tp>
# 306 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __is_normal_iterator {
# 308 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value};
# 309 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 310 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 312 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Iterator, class _Container>
# 313 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __is_normal_iterator< __gnu_cxx::__normal_iterator< _Iterator, _Container> > {
# 316 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 317 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 318 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 323 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Tp>
# 324 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> > {
# 326 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 331 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Tp>
# 332 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __is_fundamental : public __traitor< __is_void< _Tp> , __is_arithmetic< _Tp> > {
# 334 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 339 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Tp>
# 340 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> > {
# 342 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 345 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Tp>
# 346 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __is_pod {
# 349 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum {
# 350 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
__value = (sizeof(__detail::__test_type< _Tp> (0)) != sizeof(__detail::__one))
# 352 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 353 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 358 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Tp>
# 359 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __is_empty {
# 363 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
private:
# 362 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class >
# 363 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __first { };
# 364 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Up>
# 365 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __second : public _Up {
# 366 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 370 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
public: enum {
# 371 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
__value = (sizeof(__first< _Tp> ) == sizeof(__second< _Tp> ))
# 372 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 373 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 378 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template< class _Tp>
# 379 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
struct __is_char {
# 381 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value};
# 382 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __false_type __type;
# 383 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 386 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_char< char> {
# 388 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 389 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 390 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 394 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
template<> struct __is_char< wchar_t> {
# 396 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
enum { __value = 1};
# 397 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
typedef __true_type __type;
# 398 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
};
# 401 "/usr/include/c++/4.2.1/bits/cpp_type_traits.h" 3
}
# 53 "/usr/include/c++/4.2.1/cstddef" 3
namespace std {
# 55 "/usr/include/c++/4.2.1/cstddef" 3
using ::ptrdiff_t;
# 56 "/usr/include/c++/4.2.1/cstddef" 3
using ::size_t;
# 58 "/usr/include/c++/4.2.1/cstddef" 3
}
# 74 "/usr/include/c++/4.2.1/bits/stl_relops.h" 3
namespace std {
# 76 "/usr/include/c++/4.2.1/bits/stl_relops.h" 3
namespace rel_ops {
# 90 "/usr/include/c++/4.2.1/bits/stl_relops.h" 3
template < class _Tp >
      inline bool
      operator != ( const _Tp & __x, const _Tp & __y )
      { return ! ( __x == __y ); }
# 103 "/usr/include/c++/4.2.1/bits/stl_relops.h" 3
template < class _Tp >
      inline bool
      operator > ( const _Tp & __x, const _Tp & __y )
      { return __y < __x; }
# 116 "/usr/include/c++/4.2.1/bits/stl_relops.h" 3
template < class _Tp >
      inline bool
      operator <= ( const _Tp & __x, const _Tp & __y )
      { return ! ( __y < __x ); }
# 129 "/usr/include/c++/4.2.1/bits/stl_relops.h" 3
template < class _Tp >
      inline bool
      operator >= ( const _Tp & __x, const _Tp & __y )
      { return ! ( __x < __y ); }
# 134 "/usr/include/c++/4.2.1/bits/stl_relops.h" 3
}
# 136 "/usr/include/c++/4.2.1/bits/stl_relops.h" 3
}
# 64 "/usr/include/c++/4.2.1/bits/stl_pair.h" 3
namespace std {
# 67 "/usr/include/c++/4.2.1/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      pair ( )
      : first ( ), second ( ) { }


      pair ( const _T1 & __a, const _T2 & __b )
      : first ( __a ), second ( __b ) { }


      template < class _U1, class _U2 >
        pair ( const pair < _U1, _U2 > & __p )
 : first ( __p . first ), second ( __p . second ) { }
    };
# 94 "/usr/include/c++/4.2.1/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator == ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return __x . first == __y . first && __x . second == __y . second; }
# 100 "/usr/include/c++/4.2.1/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator < ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return __x . first < __y . first
      || ( ! ( __y . first < __x . first ) && __x . second < __y . second ); }
# 107 "/usr/include/c++/4.2.1/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator != ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return ! ( __x == __y ); }
# 113 "/usr/include/c++/4.2.1/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator > ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return __y < __x; }
# 119 "/usr/include/c++/4.2.1/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator <= ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return ! ( __y < __x ); }
# 125 "/usr/include/c++/4.2.1/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline bool
    operator >= ( const pair < _T1, _T2 > & __x, const pair < _T1, _T2 > & __y )
    { return ! ( __x < __y ); }
# 142 "/usr/include/c++/4.2.1/bits/stl_pair.h" 3
template < class _T1, class _T2 >
    inline pair < _T1, _T2 >
    make_pair ( _T1 __x, _T2 __y )
    { return pair < _T1, _T2 > ( __x, __y ); }
# 147 "/usr/include/c++/4.2.1/bits/stl_pair.h" 3
}
# 44 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
namespace __gnu_cxx {
# 47 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template< bool __T1, class >
# 48 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
struct __enable_if {
# 49 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
};
# 51 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template< class _Tp>
# 52 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
struct __enable_if< true, _Tp> {
# 53 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
typedef _Tp __type; };
# 57 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template< bool _Cond, class _Iftrue, class _Iffalse>
# 58 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
struct __conditional_type {
# 59 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
typedef _Iftrue __type; };
# 61 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template< class _Iftrue, class _Iffalse>
# 62 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
struct __conditional_type< false, _Iftrue, _Iffalse> {
# 63 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
typedef _Iffalse __type; };
# 67 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template< class _Tp>
# 68 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
struct __add_unsigned {
# 71 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp> __if_type;
# 74 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type;
# 75 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
};
# 78 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template<> struct __add_unsigned< char> {
# 79 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
typedef unsigned char __type; };
# 82 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template<> struct __add_unsigned< signed char> {
# 83 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
typedef unsigned char __type; };
# 86 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template<> struct __add_unsigned< short> {
# 87 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
typedef unsigned short __type; };
# 90 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template<> struct __add_unsigned< int> {
# 91 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
typedef unsigned __type; };
# 94 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template<> struct __add_unsigned< long> {
# 95 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
typedef unsigned long __type; };
# 98 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template<> struct __add_unsigned< long long> {
# 99 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
typedef unsigned long long __type; };
# 103 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template<> struct __add_unsigned< bool> ;
# 106 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template<> struct __add_unsigned< wchar_t> ;
# 110 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template< class _Tp>
# 111 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
struct __remove_unsigned {
# 114 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp> __if_type;
# 117 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type;
# 118 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
};
# 121 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template<> struct __remove_unsigned< char> {
# 122 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
typedef signed char __type; };
# 125 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned char> {
# 126 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
typedef signed char __type; };
# 129 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned short> {
# 130 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
typedef short __type; };
# 133 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned> {
# 134 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
typedef int __type; };
# 137 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned long> {
# 138 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
typedef long __type; };
# 141 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template<> struct __remove_unsigned< unsigned long long> {
# 142 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
typedef long long __type; };
# 146 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template<> struct __remove_unsigned< bool> ;
# 149 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
template<> struct __remove_unsigned< wchar_t> ;
# 151 "/usr/include/c++/4.2.1/ext/type_traits.h" 3
}
# 82 "/usr/include/c++/4.2.1/cmath" 3
namespace std {
# 86 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp > _Tp __cmath_power ( _Tp, unsigned int );
# 89 "/usr/include/c++/4.2.1/cmath" 3
inline double abs(double __x)
# 90 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_fabs(__x); }
# 93 "/usr/include/c++/4.2.1/cmath" 3
inline float abs(float __x)
# 94 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_fabsf(__x); }
# 97 "/usr/include/c++/4.2.1/cmath" 3
inline long double abs(long double __x)
# 98 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_fabsl(__x); }
# 100 "/usr/include/c++/4.2.1/cmath" 3
using ::acos;
# 103 "/usr/include/c++/4.2.1/cmath" 3
inline float acos(float __x)
# 104 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_acosf(__x); }
# 107 "/usr/include/c++/4.2.1/cmath" 3
inline long double acos(long double __x)
# 108 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_acosl(__x); }
# 110 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    acos ( _Tp __x )
    { return __builtin_acos ( __x ); }
# 116 "/usr/include/c++/4.2.1/cmath" 3
using ::asin;
# 119 "/usr/include/c++/4.2.1/cmath" 3
inline float asin(float __x)
# 120 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_asinf(__x); }
# 123 "/usr/include/c++/4.2.1/cmath" 3
inline long double asin(long double __x)
# 124 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_asinl(__x); }
# 126 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
  inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
      double > :: __type
    asin ( _Tp __x )
    { return __builtin_asin ( __x ); }
# 132 "/usr/include/c++/4.2.1/cmath" 3
using ::atan;
# 135 "/usr/include/c++/4.2.1/cmath" 3
inline float atan(float __x)
# 136 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_atanf(__x); }
# 139 "/usr/include/c++/4.2.1/cmath" 3
inline long double atan(long double __x)
# 140 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_atanl(__x); }
# 142 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
  inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
      double > :: __type
    atan ( _Tp __x )
    { return __builtin_atan ( __x ); }
# 148 "/usr/include/c++/4.2.1/cmath" 3
using ::atan2;
# 151 "/usr/include/c++/4.2.1/cmath" 3
inline float atan2(float __y, float __x)
# 152 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_atan2f(__y, __x); }
# 155 "/usr/include/c++/4.2.1/cmath" 3
inline long double atan2(long double __y, long double __x)
# 156 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_atan2l(__y, __x); }
# 158 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp, typename _Up >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value
            && __is_integer < _Up > :: __value,
        double > :: __type
    atan2 ( _Tp __y, _Up __x )
    { return __builtin_atan2 ( __y, __x ); }
# 165 "/usr/include/c++/4.2.1/cmath" 3
using ::ceil;
# 168 "/usr/include/c++/4.2.1/cmath" 3
inline float ceil(float __x)
# 169 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_ceilf(__x); }
# 172 "/usr/include/c++/4.2.1/cmath" 3
inline long double ceil(long double __x)
# 173 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_ceill(__x); }
# 175 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    ceil ( _Tp __x )
    { return __builtin_ceil ( __x ); }
# 181 "/usr/include/c++/4.2.1/cmath" 3
using ::cos;
# 184 "/usr/include/c++/4.2.1/cmath" 3
inline float cos(float __x)
# 185 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_cosf(__x); }
# 188 "/usr/include/c++/4.2.1/cmath" 3
inline long double cos(long double __x)
# 189 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_cosl(__x); }
# 191 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    cos ( _Tp __x )
    { return __builtin_cos ( __x ); }
# 197 "/usr/include/c++/4.2.1/cmath" 3
using ::cosh;
# 200 "/usr/include/c++/4.2.1/cmath" 3
inline float cosh(float __x)
# 201 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_coshf(__x); }
# 204 "/usr/include/c++/4.2.1/cmath" 3
inline long double cosh(long double __x)
# 205 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_coshl(__x); }
# 207 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    cosh ( _Tp __x )
    { return __builtin_cosh ( __x ); }
# 213 "/usr/include/c++/4.2.1/cmath" 3
using ::exp;
# 216 "/usr/include/c++/4.2.1/cmath" 3
inline float exp(float __x)
# 217 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_expf(__x); }
# 220 "/usr/include/c++/4.2.1/cmath" 3
inline long double exp(long double __x)
# 221 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_expl(__x); }
# 223 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    exp ( _Tp __x )
    { return __builtin_exp ( __x ); }
# 229 "/usr/include/c++/4.2.1/cmath" 3
using ::fabs;
# 232 "/usr/include/c++/4.2.1/cmath" 3
inline float fabs(float __x)
# 233 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_fabsf(__x); }
# 236 "/usr/include/c++/4.2.1/cmath" 3
inline long double fabs(long double __x)
# 237 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_fabsl(__x); }
# 239 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    fabs ( _Tp __x )
    { return __builtin_fabs ( __x ); }
# 245 "/usr/include/c++/4.2.1/cmath" 3
using ::floor;
# 248 "/usr/include/c++/4.2.1/cmath" 3
inline float floor(float __x)
# 249 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_floorf(__x); }
# 252 "/usr/include/c++/4.2.1/cmath" 3
inline long double floor(long double __x)
# 253 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_floorl(__x); }
# 255 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    floor ( _Tp __x )
    { return __builtin_floor ( __x ); }
# 261 "/usr/include/c++/4.2.1/cmath" 3
using ::fmod;
# 264 "/usr/include/c++/4.2.1/cmath" 3
inline float fmod(float __x, float __y)
# 265 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_fmodf(__x, __y); }
# 268 "/usr/include/c++/4.2.1/cmath" 3
inline long double fmod(long double __x, long double __y)
# 269 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_fmodl(__x, __y); }
# 271 "/usr/include/c++/4.2.1/cmath" 3
using ::frexp;
# 274 "/usr/include/c++/4.2.1/cmath" 3
inline float frexp(float __x, int *__exp)
# 275 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_frexpf(__x, __exp); }
# 278 "/usr/include/c++/4.2.1/cmath" 3
inline long double frexp(long double __x, int *__exp)
# 279 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_frexpl(__x, __exp); }
# 281 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    frexp ( _Tp __x, int * __exp )
    { return __builtin_frexp ( __x, __exp ); }
# 287 "/usr/include/c++/4.2.1/cmath" 3
using ::ldexp;
# 290 "/usr/include/c++/4.2.1/cmath" 3
inline float ldexp(float __x, int __exp)
# 291 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_ldexpf(__x, __exp); }
# 294 "/usr/include/c++/4.2.1/cmath" 3
inline long double ldexp(long double __x, int __exp)
# 295 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_ldexpl(__x, __exp); }
# 297 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
  ldexp ( _Tp __x, int __exp )
  { return __builtin_ldexp ( __x, __exp ); }
# 303 "/usr/include/c++/4.2.1/cmath" 3
using ::log;
# 306 "/usr/include/c++/4.2.1/cmath" 3
inline float log(float __x)
# 307 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_logf(__x); }
# 310 "/usr/include/c++/4.2.1/cmath" 3
inline long double log(long double __x)
# 311 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_logl(__x); }
# 313 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    log ( _Tp __x )
    { return __builtin_log ( __x ); }
# 319 "/usr/include/c++/4.2.1/cmath" 3
using ::log10;
# 322 "/usr/include/c++/4.2.1/cmath" 3
inline float log10(float __x)
# 323 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_log10f(__x); }
# 326 "/usr/include/c++/4.2.1/cmath" 3
inline long double log10(long double __x)
# 327 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_log10l(__x); }
# 329 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    log10 ( _Tp __x )
    { return __builtin_log10 ( __x ); }
# 335 "/usr/include/c++/4.2.1/cmath" 3
using ::modf;
# 338 "/usr/include/c++/4.2.1/cmath" 3
inline float modf(float __x, float *__iptr)
# 339 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_modff(__x, __iptr); }
# 342 "/usr/include/c++/4.2.1/cmath" 3
inline long double modf(long double __x, long double *__iptr)
# 343 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_modfl(__x, __iptr); }
# 345 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline _Tp
    __pow_helper ( _Tp __x, int __n )
    {
      return __n < 0
        ? _Tp ( 1 ) / __cmath_power ( __x, - __n )
        : __cmath_power ( __x, __n );
    }
# 354 "/usr/include/c++/4.2.1/cmath" 3
using ::pow;
# 357 "/usr/include/c++/4.2.1/cmath" 3
inline float pow(float __x, float __y)
# 358 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_powf(__x, __y); }
# 361 "/usr/include/c++/4.2.1/cmath" 3
inline long double pow(long double __x, long double __y)
# 362 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_powl(__x, __y); }
# 365 "/usr/include/c++/4.2.1/cmath" 3
inline double pow(double __x, int __i)
# 366 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_powi(__x, __i); }
# 369 "/usr/include/c++/4.2.1/cmath" 3
inline float pow(float __x, int __n)
# 370 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_powif(__x, __n); }
# 373 "/usr/include/c++/4.2.1/cmath" 3
inline long double pow(long double __x, int __n)
# 374 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_powil(__x, __n); }
# 376 "/usr/include/c++/4.2.1/cmath" 3
using ::sin;
# 379 "/usr/include/c++/4.2.1/cmath" 3
inline float sin(float __x)
# 380 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_sinf(__x); }
# 383 "/usr/include/c++/4.2.1/cmath" 3
inline long double sin(long double __x)
# 384 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_sinl(__x); }
# 386 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    sin ( _Tp __x )
    { return __builtin_sin ( __x ); }
# 392 "/usr/include/c++/4.2.1/cmath" 3
using ::sinh;
# 395 "/usr/include/c++/4.2.1/cmath" 3
inline float sinh(float __x)
# 396 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_sinhf(__x); }
# 399 "/usr/include/c++/4.2.1/cmath" 3
inline long double sinh(long double __x)
# 400 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_sinhl(__x); }
# 402 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    sinh ( _Tp __x )
    { return __builtin_sinh ( __x ); }
# 408 "/usr/include/c++/4.2.1/cmath" 3
using ::sqrt;
# 411 "/usr/include/c++/4.2.1/cmath" 3
inline float sqrt(float __x)
# 412 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_sqrtf(__x); }
# 415 "/usr/include/c++/4.2.1/cmath" 3
inline long double sqrt(long double __x)
# 416 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_sqrtl(__x); }
# 418 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    sqrt ( _Tp __x )
    { return __builtin_sqrt ( __x ); }
# 424 "/usr/include/c++/4.2.1/cmath" 3
using ::tan;
# 427 "/usr/include/c++/4.2.1/cmath" 3
inline float tan(float __x)
# 428 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_tanf(__x); }
# 431 "/usr/include/c++/4.2.1/cmath" 3
inline long double tan(long double __x)
# 432 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_tanl(__x); }
# 434 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    tan ( _Tp __x )
    { return __builtin_tan ( __x ); }
# 440 "/usr/include/c++/4.2.1/cmath" 3
using ::tanh;
# 443 "/usr/include/c++/4.2.1/cmath" 3
inline float tanh(float __x)
# 444 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_tanhf(__x); }
# 447 "/usr/include/c++/4.2.1/cmath" 3
inline long double tanh(long double __x)
# 448 "/usr/include/c++/4.2.1/cmath" 3
{ return __builtin_tanhl(__x); }
# 450 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline typename __gnu_cxx :: __enable_if < __is_integer < _Tp > :: __value,
        double > :: __type
    tanh ( _Tp __x )
    { return __builtin_tanh ( __x ); }
# 456 "/usr/include/c++/4.2.1/cmath" 3
}
# 464 "/usr/include/c++/4.2.1/cmath" 3
namespace __gnu_cxx {
# 466 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    __capture_fpclassify ( _Tp __f ) { return ( sizeof ( __f ) == sizeof ( float ) ? __fpclassifyf ( ( float ) ( __f ) ) : sizeof ( __f ) == sizeof ( double ) ? __fpclassifyd ( ( double ) ( __f ) ) : __fpclassify ( ( long double ) ( __f ) ) ); }
# 470 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    __capture_isfinite ( _Tp __f ) { return ( sizeof ( __f ) == sizeof ( float ) ? __inline_isfinitef ( ( float ) ( __f ) ) : sizeof ( __f ) == sizeof ( double ) ? __inline_isfinited ( ( double ) ( __f ) ) : __inline_isfinite ( ( long double ) ( __f ) ) ); }
# 474 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    __capture_isinf ( _Tp __f ) { return ( sizeof ( __f ) == sizeof ( float ) ? __inline_isinff ( ( float ) ( __f ) ) : sizeof ( __f ) == sizeof ( double ) ? __inline_isinfd ( ( double ) ( __f ) ) : __inline_isinf ( ( long double ) ( __f ) ) ); }
# 478 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    __capture_isnan ( _Tp __f ) { return ( sizeof ( __f ) == sizeof ( float ) ? __inline_isnanf ( ( float ) ( __f ) ) : sizeof ( __f ) == sizeof ( double ) ? __inline_isnand ( ( double ) ( __f ) ) : __inline_isnan ( ( long double ) ( __f ) ) ); }
# 482 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    __capture_isnormal ( _Tp __f ) { return ( sizeof ( __f ) == sizeof ( float ) ? __inline_isnormalf ( ( float ) ( __f ) ) : sizeof ( __f ) == sizeof ( double ) ? __inline_isnormald ( ( double ) ( __f ) ) : __inline_isnormal ( ( long double ) ( __f ) ) ); }
# 486 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    __capture_signbit ( _Tp __f ) { return ( sizeof ( __f ) == sizeof ( float ) ? __inline_signbitf ( ( float ) ( __f ) ) : sizeof ( __f ) == sizeof ( double ) ? __inline_signbitd ( ( double ) ( __f ) ) : __inline_signbit ( ( long double ) ( __f ) ) ); }
# 490 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    __capture_isgreater ( _Tp __f1, _Tp __f2 )
    { return __builtin_isgreater ( ( __f1 ), ( __f2 ) ); }
# 495 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    __capture_isgreaterequal ( _Tp __f1, _Tp __f2 )
    { return __builtin_isgreaterequal ( ( __f1 ), ( __f2 ) ); }
# 500 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    __capture_isless ( _Tp __f1, _Tp __f2 ) { return __builtin_isless ( ( __f1 ), ( __f2 ) ); }
# 504 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    __capture_islessequal ( _Tp __f1, _Tp __f2 )
    { return __builtin_islessequal ( ( __f1 ), ( __f2 ) ); }
# 509 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    __capture_islessgreater ( _Tp __f1, _Tp __f2 )
    { return __builtin_islessgreater ( ( __f1 ), ( __f2 ) ); }
# 514 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    __capture_isunordered ( _Tp __f1, _Tp __f2 )
    { return __builtin_isunordered ( ( __f1 ), ( __f2 ) ); }
# 519 "/usr/include/c++/4.2.1/cmath" 3
}
# 535 "/usr/include/c++/4.2.1/cmath" 3
namespace std {
# 537 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    fpclassify ( _Tp __f ) { return :: __gnu_cxx :: __capture_fpclassify ( __f ); }
# 541 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    isfinite ( _Tp __f ) { return :: __gnu_cxx :: __capture_isfinite ( __f ); }
# 545 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    isinf ( _Tp __f ) { return :: __gnu_cxx :: __capture_isinf ( __f ); }
# 549 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    isnan ( _Tp __f ) { return :: __gnu_cxx :: __capture_isnan ( __f ); }
# 553 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    isnormal ( _Tp __f ) { return :: __gnu_cxx :: __capture_isnormal ( __f ); }
# 557 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    signbit ( _Tp __f ) { return :: __gnu_cxx :: __capture_signbit ( __f ); }
# 561 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    isgreater ( _Tp __f1, _Tp __f2 )
    { return :: __gnu_cxx :: __capture_isgreater ( __f1, __f2 ); }
# 566 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    isgreaterequal ( _Tp __f1, _Tp __f2 )
    { return :: __gnu_cxx :: __capture_isgreaterequal ( __f1, __f2 ); }
# 571 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    isless ( _Tp __f1, _Tp __f2 )
    { return :: __gnu_cxx :: __capture_isless ( __f1, __f2 ); }
# 576 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    islessequal ( _Tp __f1, _Tp __f2 )
    { return :: __gnu_cxx :: __capture_islessequal ( __f1, __f2 ); }
# 581 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    islessgreater ( _Tp __f1, _Tp __f2 )
    { return :: __gnu_cxx :: __capture_islessgreater ( __f1, __f2 ); }
# 586 "/usr/include/c++/4.2.1/cmath" 3
template < typename _Tp >
    inline int
    isunordered ( _Tp __f1, _Tp __f2 )
    { return :: __gnu_cxx :: __capture_isunordered ( __f1, __f2 ); }
# 591 "/usr/include/c++/4.2.1/cmath" 3
}
# 39 "/usr/include/c++/4.2.1/bits/cmath.tcc" 3
namespace std {
# 41 "/usr/include/c++/4.2.1/bits/cmath.tcc" 3
template < typename _Tp >
    inline _Tp
    __cmath_power ( _Tp __x, unsigned int __n )
    {
      _Tp __y = __n % 2 ? __x : 1;

      while ( __n >>= 1 )
        {
          __x = __x * __x;
          if ( __n % 2 )
            __y = __y * __x;
        }

      return __y;
    }
# 57 "/usr/include/c++/4.2.1/bits/cmath.tcc" 3
}
# 104 "/usr/include/c++/4.2.1/cstdlib" 3
namespace std {
# 106 "/usr/include/c++/4.2.1/cstdlib" 3
using ::div_t;
# 107 "/usr/include/c++/4.2.1/cstdlib" 3
using ::ldiv_t;
# 109 "/usr/include/c++/4.2.1/cstdlib" 3
using ::abort;
# 110 "/usr/include/c++/4.2.1/cstdlib" 3
using ::abs;
# 111 "/usr/include/c++/4.2.1/cstdlib" 3
using ::atexit;
# 112 "/usr/include/c++/4.2.1/cstdlib" 3
using ::atof;
# 113 "/usr/include/c++/4.2.1/cstdlib" 3
using ::atoi;
# 114 "/usr/include/c++/4.2.1/cstdlib" 3
using ::atol;
# 115 "/usr/include/c++/4.2.1/cstdlib" 3
using ::bsearch;
# 116 "/usr/include/c++/4.2.1/cstdlib" 3
using ::calloc;
# 117 "/usr/include/c++/4.2.1/cstdlib" 3
using ::div;
# 118 "/usr/include/c++/4.2.1/cstdlib" 3
using ::exit;
# 119 "/usr/include/c++/4.2.1/cstdlib" 3
using ::free;
# 120 "/usr/include/c++/4.2.1/cstdlib" 3
using ::getenv;
# 121 "/usr/include/c++/4.2.1/cstdlib" 3
using ::labs;
# 122 "/usr/include/c++/4.2.1/cstdlib" 3
using ::ldiv;
# 123 "/usr/include/c++/4.2.1/cstdlib" 3
using ::malloc;
# 125 "/usr/include/c++/4.2.1/cstdlib" 3
using ::mblen;
# 126 "/usr/include/c++/4.2.1/cstdlib" 3
using ::mbstowcs;
# 127 "/usr/include/c++/4.2.1/cstdlib" 3
using ::mbtowc;
# 129 "/usr/include/c++/4.2.1/cstdlib" 3
using ::qsort;
# 130 "/usr/include/c++/4.2.1/cstdlib" 3
using ::rand;
# 131 "/usr/include/c++/4.2.1/cstdlib" 3
using ::realloc;
# 132 "/usr/include/c++/4.2.1/cstdlib" 3
using ::srand;
# 133 "/usr/include/c++/4.2.1/cstdlib" 3
using ::strtod;
# 134 "/usr/include/c++/4.2.1/cstdlib" 3
using ::strtol;
# 135 "/usr/include/c++/4.2.1/cstdlib" 3
using ::strtoul;
# 136 "/usr/include/c++/4.2.1/cstdlib" 3
using ::system;
# 138 "/usr/include/c++/4.2.1/cstdlib" 3
using ::wcstombs;
# 139 "/usr/include/c++/4.2.1/cstdlib" 3
using ::wctomb;
# 143 "/usr/include/c++/4.2.1/cstdlib" 3
inline long abs(long __i) { return labs(__i); }
# 146 "/usr/include/c++/4.2.1/cstdlib" 3
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); }
# 148 "/usr/include/c++/4.2.1/cstdlib" 3
}
# 161 "/usr/include/c++/4.2.1/cstdlib" 3
namespace __gnu_cxx {
# 164 "/usr/include/c++/4.2.1/cstdlib" 3
using ::lldiv_t;
# 170 "/usr/include/c++/4.2.1/cstdlib" 3
using ::_Exit;
# 174 "/usr/include/c++/4.2.1/cstdlib" 3
inline long long abs(long long __x) { return (__x >= (0)) ? __x : (-__x); }
# 177 "/usr/include/c++/4.2.1/cstdlib" 3
using ::llabs;
# 180 "/usr/include/c++/4.2.1/cstdlib" 3
inline lldiv_t div(long long __n, long long __d)
# 181 "/usr/include/c++/4.2.1/cstdlib" 3
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; }
# 183 "/usr/include/c++/4.2.1/cstdlib" 3
using ::lldiv;
# 194 "/usr/include/c++/4.2.1/cstdlib" 3
using ::atoll;
# 195 "/usr/include/c++/4.2.1/cstdlib" 3
using ::strtoll;
# 196 "/usr/include/c++/4.2.1/cstdlib" 3
using ::strtoull;
# 198 "/usr/include/c++/4.2.1/cstdlib" 3
using ::strtof;
# 199 "/usr/include/c++/4.2.1/cstdlib" 3
using ::strtold;
# 201 "/usr/include/c++/4.2.1/cstdlib" 3
}
# 203 "/usr/include/c++/4.2.1/cstdlib" 3
namespace std {
# 206 "/usr/include/c++/4.2.1/cstdlib" 3
using __gnu_cxx::lldiv_t;
# 208 "/usr/include/c++/4.2.1/cstdlib" 3
using __gnu_cxx::_Exit;
# 209 "/usr/include/c++/4.2.1/cstdlib" 3
using __gnu_cxx::abs;
# 211 "/usr/include/c++/4.2.1/cstdlib" 3
using __gnu_cxx::llabs;
# 212 "/usr/include/c++/4.2.1/cstdlib" 3
using __gnu_cxx::div;
# 213 "/usr/include/c++/4.2.1/cstdlib" 3
using __gnu_cxx::lldiv;
# 215 "/usr/include/c++/4.2.1/cstdlib" 3
using __gnu_cxx::atoll;
# 216 "/usr/include/c++/4.2.1/cstdlib" 3
using __gnu_cxx::strtof;
# 217 "/usr/include/c++/4.2.1/cstdlib" 3
using __gnu_cxx::strtoll;
# 218 "/usr/include/c++/4.2.1/cstdlib" 3
using __gnu_cxx::strtoull;
# 219 "/usr/include/c++/4.2.1/cstdlib" 3
using __gnu_cxx::strtold;
# 221 "/usr/include/c++/4.2.1/cstdlib" 3
}
# 497 "/usr/local/cuda/bin/../include/math_functions.h"
namespace __gnu_cxx {
# 499 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline long long abs(long long);
# 500 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 502 "/usr/local/cuda/bin/../include/math_functions.h"
namespace std {
# 504 "/usr/local/cuda/bin/../include/math_functions.h"
template< class T> extern inline T __pow_helper(T, int);
# 505 "/usr/local/cuda/bin/../include/math_functions.h"
template< class T> extern inline T __cmath_power(T, unsigned);
# 506 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 508 "/usr/local/cuda/bin/../include/math_functions.h"
using std::abs;
# 509 "/usr/local/cuda/bin/../include/math_functions.h"
using std::fabs;
# 510 "/usr/local/cuda/bin/../include/math_functions.h"
using std::ceil;
# 511 "/usr/local/cuda/bin/../include/math_functions.h"
using std::floor;
# 512 "/usr/local/cuda/bin/../include/math_functions.h"
using std::sqrt;
# 513 "/usr/local/cuda/bin/../include/math_functions.h"
using std::pow;
# 514 "/usr/local/cuda/bin/../include/math_functions.h"
using std::log;
# 515 "/usr/local/cuda/bin/../include/math_functions.h"
using std::log10;
# 516 "/usr/local/cuda/bin/../include/math_functions.h"
using std::fmod;
# 517 "/usr/local/cuda/bin/../include/math_functions.h"
using std::modf;
# 518 "/usr/local/cuda/bin/../include/math_functions.h"
using std::exp;
# 519 "/usr/local/cuda/bin/../include/math_functions.h"
using std::frexp;
# 520 "/usr/local/cuda/bin/../include/math_functions.h"
using std::ldexp;
# 521 "/usr/local/cuda/bin/../include/math_functions.h"
using std::asin;
# 522 "/usr/local/cuda/bin/../include/math_functions.h"
using std::sin;
# 523 "/usr/local/cuda/bin/../include/math_functions.h"
using std::sinh;
# 524 "/usr/local/cuda/bin/../include/math_functions.h"
using std::acos;
# 525 "/usr/local/cuda/bin/../include/math_functions.h"
using std::cos;
# 526 "/usr/local/cuda/bin/../include/math_functions.h"
using std::cosh;
# 527 "/usr/local/cuda/bin/../include/math_functions.h"
using std::atan;
# 528 "/usr/local/cuda/bin/../include/math_functions.h"
using std::atan2;
# 529 "/usr/local/cuda/bin/../include/math_functions.h"
using std::tan;
# 530 "/usr/local/cuda/bin/../include/math_functions.h"
using std::tanh;
# 584 "/usr/local/cuda/bin/../include/math_functions.h"
namespace std {
# 587 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline long abs(long);
# 588 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float abs(float);
# 589 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline double abs(double);
# 590 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float fabs(float);
# 591 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float ceil(float);
# 592 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float floor(float);
# 593 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float sqrt(float);
# 594 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float pow(float, float);
# 595 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float pow(float, int);
# 596 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline double pow(double, int);
# 597 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float log(float);
# 598 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float log10(float);
# 599 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float fmod(float, float);
# 600 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float modf(float, float *);
# 601 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float exp(float);
# 602 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float frexp(float, int *);
# 603 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float ldexp(float, int);
# 604 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float asin(float);
# 605 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float sin(float);
# 606 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float sinh(float);
# 607 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float acos(float);
# 608 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float cos(float);
# 609 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float cosh(float);
# 610 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float atan(float);
# 611 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float atan2(float, float);
# 612 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float tan(float);
# 613 "/usr/local/cuda/bin/../include/math_functions.h"
extern inline float tanh(float);
# 616 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 619 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float logb(float a)
# 620 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 621 "/usr/local/cuda/bin/../include/math_functions.h"
return logbf(a);
# 622 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 624 "/usr/local/cuda/bin/../include/math_functions.h"
static inline int ilogb(float a)
# 625 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 626 "/usr/local/cuda/bin/../include/math_functions.h"
return ilogbf(a);
# 627 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 629 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float scalbn(float a, int b)
# 630 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 631 "/usr/local/cuda/bin/../include/math_functions.h"
return scalbnf(a, b);
# 632 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 634 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float scalbln(float a, long b)
# 635 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 636 "/usr/local/cuda/bin/../include/math_functions.h"
return scalblnf(a, b);
# 637 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 639 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float exp2(float a)
# 640 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 641 "/usr/local/cuda/bin/../include/math_functions.h"
return exp2f(a);
# 642 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 644 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float exp10(float a)
# 645 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 646 "/usr/local/cuda/bin/../include/math_functions.h"
return exp10f(a);
# 647 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 649 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float expm1(float a)
# 650 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 651 "/usr/local/cuda/bin/../include/math_functions.h"
return expm1f(a);
# 652 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 654 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float log2(float a)
# 655 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 656 "/usr/local/cuda/bin/../include/math_functions.h"
return log2f(a);
# 657 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 659 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float log1p(float a)
# 660 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 661 "/usr/local/cuda/bin/../include/math_functions.h"
return log1pf(a);
# 662 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 664 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float rsqrt(float a)
# 665 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 666 "/usr/local/cuda/bin/../include/math_functions.h"
return rsqrtf(a);
# 667 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 669 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float acosh(float a)
# 670 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 671 "/usr/local/cuda/bin/../include/math_functions.h"
return acoshf(a);
# 672 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 674 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float asinh(float a)
# 675 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 676 "/usr/local/cuda/bin/../include/math_functions.h"
return asinhf(a);
# 677 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 679 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float atanh(float a)
# 680 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 681 "/usr/local/cuda/bin/../include/math_functions.h"
return atanhf(a);
# 682 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 684 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float hypot(float a, float b)
# 685 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 686 "/usr/local/cuda/bin/../include/math_functions.h"
return hypotf(a, b);
# 687 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 689 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float cbrt(float a)
# 690 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 691 "/usr/local/cuda/bin/../include/math_functions.h"
return cbrtf(a);
# 692 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 694 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float rcbrt(float a)
# 695 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 696 "/usr/local/cuda/bin/../include/math_functions.h"
return rcbrtf(a);
# 697 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 699 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float sinpi(float a)
# 700 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 701 "/usr/local/cuda/bin/../include/math_functions.h"
return sinpif(a);
# 702 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 704 "/usr/local/cuda/bin/../include/math_functions.h"
static inline void sincos(float a, float *sptr, float *cptr)
# 705 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 706 "/usr/local/cuda/bin/../include/math_functions.h"
sincosf(a, sptr, cptr);
# 707 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 709 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float erf(float a)
# 710 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 711 "/usr/local/cuda/bin/../include/math_functions.h"
return erff(a);
# 712 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 714 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float erfinv(float a)
# 715 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 716 "/usr/local/cuda/bin/../include/math_functions.h"
return erfinvf(a);
# 717 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 719 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float erfc(float a)
# 720 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 721 "/usr/local/cuda/bin/../include/math_functions.h"
return erfcf(a);
# 722 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 724 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float erfcinv(float a)
# 725 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 726 "/usr/local/cuda/bin/../include/math_functions.h"
return erfcinvf(a);
# 727 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 729 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float lgamma(float a)
# 730 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 731 "/usr/local/cuda/bin/../include/math_functions.h"
return lgammaf(a);
# 732 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 734 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float tgamma(float a)
# 735 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 736 "/usr/local/cuda/bin/../include/math_functions.h"
return tgammaf(a);
# 737 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 739 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float copysign(float a, float b)
# 740 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 741 "/usr/local/cuda/bin/../include/math_functions.h"
return copysignf(a, b);
# 742 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 744 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double copysign(double a, float b)
# 745 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 746 "/usr/local/cuda/bin/../include/math_functions.h"
return copysign(a, (double)b);
# 747 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 749 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float copysign(float a, double b)
# 750 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 751 "/usr/local/cuda/bin/../include/math_functions.h"
return copysignf(a, (float)b);
# 752 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 754 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float nextafter(float a, float b)
# 755 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 756 "/usr/local/cuda/bin/../include/math_functions.h"
return nextafterf(a, b);
# 757 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 759 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float remainder(float a, float b)
# 760 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 761 "/usr/local/cuda/bin/../include/math_functions.h"
return remainderf(a, b);
# 762 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 764 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float remquo(float a, float b, int *quo)
# 765 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 766 "/usr/local/cuda/bin/../include/math_functions.h"
return remquof(a, b, quo);
# 767 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 769 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float round(float a)
# 770 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 771 "/usr/local/cuda/bin/../include/math_functions.h"
return roundf(a);
# 772 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 774 "/usr/local/cuda/bin/../include/math_functions.h"
static inline long lround(float a)
# 775 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 776 "/usr/local/cuda/bin/../include/math_functions.h"
return lroundf(a);
# 777 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 779 "/usr/local/cuda/bin/../include/math_functions.h"
static inline long long llround(float a)
# 780 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 781 "/usr/local/cuda/bin/../include/math_functions.h"
return llroundf(a);
# 782 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 784 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float trunc(float a)
# 785 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 786 "/usr/local/cuda/bin/../include/math_functions.h"
return truncf(a);
# 787 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 789 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float rint(float a)
# 790 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 791 "/usr/local/cuda/bin/../include/math_functions.h"
return rintf(a);
# 792 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 794 "/usr/local/cuda/bin/../include/math_functions.h"
static inline long lrint(float a)
# 795 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 796 "/usr/local/cuda/bin/../include/math_functions.h"
return lrintf(a);
# 797 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 799 "/usr/local/cuda/bin/../include/math_functions.h"
static inline long long llrint(float a)
# 800 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 801 "/usr/local/cuda/bin/../include/math_functions.h"
return llrintf(a);
# 802 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 804 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float nearbyint(float a)
# 805 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 806 "/usr/local/cuda/bin/../include/math_functions.h"
return nearbyintf(a);
# 807 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 809 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float fdim(float a, float b)
# 810 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 811 "/usr/local/cuda/bin/../include/math_functions.h"
return fdimf(a, b);
# 812 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 814 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float fma(float a, float b, float c)
# 815 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 816 "/usr/local/cuda/bin/../include/math_functions.h"
return fmaf(a, b, c);
# 817 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 819 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float fmax(float a, float b)
# 820 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 821 "/usr/local/cuda/bin/../include/math_functions.h"
return fmaxf(a, b);
# 822 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 824 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float fmin(float a, float b)
# 825 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 826 "/usr/local/cuda/bin/../include/math_functions.h"
return fminf(a, b);
# 827 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 829 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned min(unsigned a, unsigned b)
# 830 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 831 "/usr/local/cuda/bin/../include/math_functions.h"
return umin(a, b);
# 832 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 834 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned min(int a, unsigned b)
# 835 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 836 "/usr/local/cuda/bin/../include/math_functions.h"
return umin((unsigned)a, b);
# 837 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 839 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned min(unsigned a, int b)
# 840 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 841 "/usr/local/cuda/bin/../include/math_functions.h"
return umin(a, (unsigned)b);
# 842 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 844 "/usr/local/cuda/bin/../include/math_functions.h"
static inline long long min(long long a, long long b)
# 845 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 846 "/usr/local/cuda/bin/../include/math_functions.h"
return llmin(a, b);
# 847 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 849 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned long long min(unsigned long long a, unsigned long long b)
# 850 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 851 "/usr/local/cuda/bin/../include/math_functions.h"
return ullmin(a, b);
# 852 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 854 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned long long min(long long a, unsigned long long b)
# 855 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 856 "/usr/local/cuda/bin/../include/math_functions.h"
return ullmin((unsigned long long)a, b);
# 857 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 859 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned long long min(unsigned long long a, long long b)
# 860 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 861 "/usr/local/cuda/bin/../include/math_functions.h"
return ullmin(a, (unsigned long long)b);
# 862 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 864 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float min(float a, float b)
# 865 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 866 "/usr/local/cuda/bin/../include/math_functions.h"
return fminf(a, b);
# 867 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 869 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double min(double a, double b)
# 870 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 871 "/usr/local/cuda/bin/../include/math_functions.h"
return fmin(a, b);
# 872 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 874 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double min(float a, double b)
# 875 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 876 "/usr/local/cuda/bin/../include/math_functions.h"
return fmin((double)a, b);
# 877 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 879 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double min(double a, float b)
# 880 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 881 "/usr/local/cuda/bin/../include/math_functions.h"
return fmin(a, (double)b);
# 882 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 884 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned max(unsigned a, unsigned b)
# 885 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 886 "/usr/local/cuda/bin/../include/math_functions.h"
return umax(a, b);
# 887 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 889 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned max(int a, unsigned b)
# 890 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 891 "/usr/local/cuda/bin/../include/math_functions.h"
return umax((unsigned)a, b);
# 892 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 894 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned max(unsigned a, int b)
# 895 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 896 "/usr/local/cuda/bin/../include/math_functions.h"
return umax(a, (unsigned)b);
# 897 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 899 "/usr/local/cuda/bin/../include/math_functions.h"
static inline long long max(long long a, long long b)
# 900 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 901 "/usr/local/cuda/bin/../include/math_functions.h"
return llmax(a, b);
# 902 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 904 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned long long max(unsigned long long a, unsigned long long b)
# 905 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 906 "/usr/local/cuda/bin/../include/math_functions.h"
return ullmax(a, b);
# 907 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 909 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned long long max(long long a, unsigned long long b)
# 910 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 911 "/usr/local/cuda/bin/../include/math_functions.h"
return ullmax((unsigned long long)a, b);
# 912 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 914 "/usr/local/cuda/bin/../include/math_functions.h"
static inline unsigned long long max(unsigned long long a, long long b)
# 915 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 916 "/usr/local/cuda/bin/../include/math_functions.h"
return ullmax(a, (unsigned long long)b);
# 917 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 919 "/usr/local/cuda/bin/../include/math_functions.h"
static inline float max(float a, float b)
# 920 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 921 "/usr/local/cuda/bin/../include/math_functions.h"
return fmaxf(a, b);
# 922 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 924 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double max(double a, double b)
# 925 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 926 "/usr/local/cuda/bin/../include/math_functions.h"
return fmax(a, b);
# 927 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 929 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double max(float a, double b)
# 930 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 931 "/usr/local/cuda/bin/../include/math_functions.h"
return fmax((double)a, b);
# 932 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 934 "/usr/local/cuda/bin/../include/math_functions.h"
static inline double max(double a, float b)
# 935 "/usr/local/cuda/bin/../include/math_functions.h"
{
# 936 "/usr/local/cuda/bin/../include/math_functions.h"
return fmax(a, (double)b);
# 937 "/usr/local/cuda/bin/../include/math_functions.h"
}
# 60 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
template< class T, int dim = 1>
# 61 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
struct surface : public surfaceReference {
# 63 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
surface()
# 64 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
{
# 65 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
(channelDesc) = cudaCreateChannelDesc< T> ();
# 66 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
}
# 68 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
surface(cudaChannelFormatDesc desc)
# 69 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
{
# 70 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
(channelDesc) = desc;
# 71 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
}
# 72 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
};
# 75 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
template< int dim>
# 76 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
struct surface< void, dim> : public surfaceReference {
# 78 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
surface()
# 79 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
{
# 80 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
(channelDesc) = cudaCreateChannelDesc< void> ();
# 81 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
}
# 82 "/usr/local/cuda/bin/../include/cuda_surface_types.h"
};
# 60 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
template< class T, int dim = 1, cudaTextureReadMode mode = cudaReadModeElementType>
# 61 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
struct texture : public textureReference {
# 63 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
texture(int norm = 0, cudaTextureFilterMode
# 64 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
fMode = cudaFilterModePoint, cudaTextureAddressMode
# 65 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
aMode = cudaAddressModeClamp)
# 66 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
{
# 67 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
(normalized) = norm;
# 68 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
(filterMode) = fMode;
# 69 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[0]) = aMode;
# 70 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[1]) = aMode;
# 71 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[2]) = aMode;
# 72 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
(channelDesc) = cudaCreateChannelDesc< T> ();
# 73 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
}
# 75 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
texture(int norm, cudaTextureFilterMode
# 76 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
fMode, cudaTextureAddressMode
# 77 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
aMode, cudaChannelFormatDesc
# 78 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
desc)
# 79 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
{
# 80 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
(normalized) = norm;
# 81 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
(filterMode) = fMode;
# 82 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[0]) = aMode;
# 83 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[1]) = aMode;
# 84 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
((addressMode)[2]) = aMode;
# 85 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
(channelDesc) = desc;
# 86 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
}
# 87 "/usr/local/cuda/bin/../include/cuda_texture_types.h"
};
# 324 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline int mulhi(int a, int b)
# 325 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 327 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 329 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, unsigned b)
# 330 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 332 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 334 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline unsigned mulhi(int a, unsigned b)
# 335 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 337 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 339 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, int b)
# 340 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 342 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 344 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline long long mul64hi(long long a, long long b)
# 345 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 347 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 349 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, unsigned long long b)
# 350 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 352 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 354 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline unsigned long long mul64hi(long long a, unsigned long long b)
# 355 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 357 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 359 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, long long b)
# 360 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 362 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 364 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline int float_as_int(float a)
# 365 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 367 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 369 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline float int_as_float(int a)
# 370 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 372 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 374 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline float saturate(float a)
# 375 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 377 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 379 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline int mul24(int a, int b)
# 380 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 382 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 384 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline unsigned umul24(unsigned a, unsigned b)
# 385 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 387 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 389 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline void trap()
# 390 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 392 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 394 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline void brkpt(int c)
# 395 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 397 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 399 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline void syncthreads()
# 400 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 402 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 404 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline void prof_trigger(int e)
# 405 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 422 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 424 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline void threadfence(bool global = true)
# 425 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 427 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 429 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline int float2int(float a, cudaRoundMode mode = cudaRoundZero)
# 430 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 435 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 437 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline unsigned float2uint(float a, cudaRoundMode mode = cudaRoundZero)
# 438 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 443 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 445 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline float int2float(int a, cudaRoundMode mode = cudaRoundNearest)
# 446 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 451 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 453 "/usr/local/cuda/bin/../include/device_functions.h"
__attribute__((unused)) static inline float uint2float(unsigned a, cudaRoundMode mode = cudaRoundNearest)
# 454 "/usr/local/cuda/bin/../include/device_functions.h"
{int volatile ___ = 1;
# 459 "/usr/local/cuda/bin/../include/device_functions.h"
exit(___);}
# 102 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd(int *address, int val)
# 103 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 105 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 107 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd(unsigned *address, unsigned val)
# 108 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 110 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 112 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub(int *address, int val)
# 113 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 115 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 117 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub(unsigned *address, unsigned val)
# 118 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 120 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 122 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch(int *address, int val)
# 123 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 125 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 127 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch(unsigned *address, unsigned val)
# 128 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 130 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 132 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch(float *address, float val)
# 133 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 135 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 137 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin(int *address, int val)
# 138 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 140 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 142 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin(unsigned *address, unsigned val)
# 143 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 145 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 147 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax(int *address, int val)
# 148 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 150 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 152 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax(unsigned *address, unsigned val)
# 153 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 155 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 157 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc(unsigned *address, unsigned val)
# 158 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 160 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 162 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec(unsigned *address, unsigned val)
# 163 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 165 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 167 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd(int *address, int val)
# 168 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 170 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 172 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd(unsigned *address, unsigned val)
# 173 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 175 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 177 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr(int *address, int val)
# 178 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 180 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 182 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr(unsigned *address, unsigned val)
# 183 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 185 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 187 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor(int *address, int val)
# 188 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 190 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 192 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor(unsigned *address, unsigned val)
# 193 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 195 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 197 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS(int *address, int compare, int val)
# 198 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 200 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 202 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val)
# 203 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
{int volatile ___ = 1;
# 205 "/usr/local/cuda/bin/../include/sm_11_atomic_functions.h"
exit(___);}
# 75 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val)
# 76 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
{int volatile ___ = 1;
# 78 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
exit(___);}
# 80 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val)
# 81 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
{int volatile ___ = 1;
# 83 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
exit(___);}
# 85 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val)
# 86 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
{int volatile ___ = 1;
# 88 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
exit(___);}
# 90 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline bool any(bool cond)
# 91 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
{int volatile ___ = 1;
# 93 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
exit(___);}
# 95 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
__attribute__((unused)) static inline bool all(bool cond)
# 96 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
{int volatile ___ = 1;
# 98 "/usr/local/cuda/bin/../include/sm_12_atomic_functions.h"
exit(___);}
# 170 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode)
# 171 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 176 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 178 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest)
# 179 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 184 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 186 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest)
# 187 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 192 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 194 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode = cudaRoundZero)
# 195 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 200 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 202 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero)
# 203 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 208 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 210 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode = cudaRoundZero)
# 211 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 216 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 218 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode = cudaRoundZero)
# 219 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 224 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 226 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode = cudaRoundNearest)
# 227 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 232 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 234 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode = cudaRoundNearest)
# 235 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 240 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 242 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest)
# 243 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 245 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 247 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest)
# 248 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 250 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 252 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest)
# 253 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
{int volatile ___ = 1;
# 255 "/usr/local/cuda/bin/../include/sm_13_double_functions.h"
exit(___);}
# 66 "/usr/local/cuda/bin/../include/sm_20_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd(float *address, float val)
# 67 "/usr/local/cuda/bin/../include/sm_20_atomic_functions.h"
{int volatile ___ = 1;
# 69 "/usr/local/cuda/bin/../include/sm_20_atomic_functions.h"
exit(___);}
# 124 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned ballot(bool pred)
# 125 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
{int volatile ___ = 1;
# 127 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
exit(___);}
# 129 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
__attribute__((unused)) static inline int syncthreads_count(bool pred)
# 130 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
{int volatile ___ = 1;
# 132 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
exit(___);}
# 134 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_and(bool pred)
# 135 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
{int volatile ___ = 1;
# 137 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
exit(___);}
# 139 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_or(bool pred)
# 140 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
{int volatile ___ = 1;
# 142 "/usr/local/cuda/bin/../include/sm_20_intrinsics.h"
exit(___);}
# 97 "/usr/local/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void
# 98 "/usr/local/cuda/bin/../include/surface_functions.h"
surf1Dread(T *res, surface< void, 1> surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 99 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 106 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 108 "/usr/local/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline T
# 109 "/usr/local/cuda/bin/../include/surface_functions.h"
surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 110 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 116 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 118 "/usr/local/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void
# 119 "/usr/local/cuda/bin/../include/surface_functions.h"
surf1Dread(T *res, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 120 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 122 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 125 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline char surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 126 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 128 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 131 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline signed char surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 132 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 134 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 137 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline unsigned char surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 138 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 140 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 143 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline char1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 144 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 146 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 149 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline uchar1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 150 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 152 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 155 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline char2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 156 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 160 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 163 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline uchar2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 164 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 166 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 169 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline char4 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 170 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 174 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 177 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline uchar4 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 178 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 180 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 183 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline short surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 184 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 186 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 189 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline unsigned short surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 190 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 192 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 195 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline short1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 196 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 198 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 201 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline ushort1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 202 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 204 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 207 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline short2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 208 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 212 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 215 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline ushort2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 216 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 218 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 221 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline short4 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 222 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 226 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 229 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline ushort4 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 230 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 232 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 235 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline int surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 236 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 238 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 241 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline unsigned surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 242 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 244 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 247 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline int1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 248 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 250 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 253 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline uint1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 254 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 256 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 259 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline int2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 260 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 264 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 267 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline uint2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 268 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 270 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 273 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline int4 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 274 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 278 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 281 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline uint4 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 282 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 284 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 287 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline long long surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 288 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 290 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 293 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline unsigned long long surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 294 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 296 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 299 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline longlong1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 300 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 302 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 305 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline ulonglong1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 306 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 308 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 311 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline longlong2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 312 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 316 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 319 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline ulonglong2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 320 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 322 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 327 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline long surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 328 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 330 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 333 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline unsigned long surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 334 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 336 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 339 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline long1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 340 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 342 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 345 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline ulong1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 346 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 348 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 351 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline long2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 352 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 356 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 359 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline ulong2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 360 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 364 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 367 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline long4 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 368 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 372 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 375 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline ulong4 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 376 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 380 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 385 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline float surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 386 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 388 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 391 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline float1 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 392 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 394 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 397 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline float2 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 398 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 402 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 405 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline float4 surf1Dread(surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode)
# 406 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 410 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 457 "/usr/local/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void
# 458 "/usr/local/cuda/bin/../include/surface_functions.h"
surf2Dread(T *res, surface< void, 2> surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 459 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 466 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 468 "/usr/local/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline T
# 469 "/usr/local/cuda/bin/../include/surface_functions.h"
surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 470 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 476 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 478 "/usr/local/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void
# 479 "/usr/local/cuda/bin/../include/surface_functions.h"
surf2Dread(T *res, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 480 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 482 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 485 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline char surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 486 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 488 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 491 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline signed char surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 492 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 494 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 497 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline unsigned char surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 498 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 500 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 503 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline char1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 504 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 506 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 509 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline uchar1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 510 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 512 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 515 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline char2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 516 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 520 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 523 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline uchar2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 524 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 526 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 529 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline char4 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 530 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 534 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 537 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline uchar4 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 538 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 540 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 543 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline short surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 544 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 546 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 549 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline unsigned short surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 550 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 552 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 555 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline short1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 556 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 558 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 561 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline ushort1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 562 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 564 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 567 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline short2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 568 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 572 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 575 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline ushort2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 576 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 578 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 581 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline short4 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 582 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 586 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 589 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline ushort4 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 590 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 592 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 595 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline int surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 596 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 598 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 601 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline unsigned surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 602 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 604 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 607 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline int1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 608 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 610 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 613 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline uint1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 614 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 616 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 619 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline int2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 620 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 624 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 627 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline uint2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 628 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 630 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 633 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline int4 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 634 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 638 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 641 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline uint4 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 642 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 644 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 647 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline long long surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 648 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 650 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 653 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline unsigned long long surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 654 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 656 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 659 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline longlong1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 660 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 662 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 665 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline ulonglong1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 666 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 668 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 671 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline longlong2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 672 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 676 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 679 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline ulonglong2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 680 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 682 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 687 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline long surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 688 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 690 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 693 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline unsigned long surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 694 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 696 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 699 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline long1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 700 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 702 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 705 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline ulong1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 706 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 708 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 711 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline long2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 712 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 716 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 719 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline ulong2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 720 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 724 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 727 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline long4 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 728 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 732 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 735 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline ulong4 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 736 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 740 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 745 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline float surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 746 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 748 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 751 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline float1 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 752 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 754 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 757 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline float2 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 758 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 762 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 765 "/usr/local/cuda/bin/../include/surface_functions.h"
template<> __attribute__((unused)) static inline float4 surf2Dread(surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode)
# 766 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 770 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 817 "/usr/local/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void
# 818 "/usr/local/cuda/bin/../include/surface_functions.h"
surf1Dwrite(T val, surface< void, 1> surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 819 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 837 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 839 "/usr/local/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void
# 840 "/usr/local/cuda/bin/../include/surface_functions.h"
surf1Dwrite(T val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 841 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 843 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 846 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(char val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 847 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 849 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 851 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(signed char val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 852 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 854 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 856 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(unsigned char val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 857 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 859 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 861 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(char1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 862 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 864 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 866 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uchar1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 867 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 869 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 871 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(char2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 872 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 874 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 876 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uchar2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 877 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 879 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 881 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(char4 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 882 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 884 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 886 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uchar4 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 887 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 889 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 891 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(short val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 892 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 894 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 896 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(unsigned short val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 897 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 899 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 901 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(short1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 902 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 904 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 906 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ushort1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 907 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 909 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 911 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(short2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 912 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 914 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 916 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ushort2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 917 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 919 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 921 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(short4 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 922 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 924 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 926 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ushort4 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 927 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 929 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 931 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(int val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 932 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 934 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 936 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(unsigned val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 937 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 939 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 941 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(int1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 942 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 944 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 946 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uint1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 947 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 949 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 951 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(int2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 952 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 954 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 956 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uint2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 957 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 959 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 961 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(int4 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 962 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 964 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 966 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(uint4 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 967 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 969 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 971 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(long long val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 972 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 974 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 976 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(unsigned long long val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 977 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 979 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 981 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(longlong1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 982 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 984 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 986 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ulonglong1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 987 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 989 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 991 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(longlong2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 992 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 994 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 996 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ulonglong2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 997 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 999 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1003 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(long val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1004 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1006 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1008 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(unsigned long val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1009 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1011 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1013 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(long1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1014 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1016 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1018 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ulong1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1019 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1021 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1023 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(long2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1024 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1026 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1028 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ulong2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1029 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1031 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1033 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(long4 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1034 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1036 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1038 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(ulong4 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1039 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1041 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1045 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(float val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1046 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1048 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1050 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(float1 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1051 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1053 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1055 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(float2 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1056 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1058 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1060 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf1Dwrite(float4 val, surface< void, 1> surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1061 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1063 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1110 "/usr/local/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void
# 1111 "/usr/local/cuda/bin/../include/surface_functions.h"
surf2Dwrite(T val, surface< void, 2> surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1112 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1130 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1132 "/usr/local/cuda/bin/../include/surface_functions.h"
template< class T> __attribute__((unused)) static inline void
# 1133 "/usr/local/cuda/bin/../include/surface_functions.h"
surf2Dwrite(T val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1134 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1136 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1139 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(char val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1140 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1142 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1144 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(signed char val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1145 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1147 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1149 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(unsigned char val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1150 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1152 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1154 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(char1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1155 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1157 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1159 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uchar1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1160 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1162 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1164 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(char2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1165 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1167 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1169 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uchar2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1170 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1172 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1174 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(char4 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1175 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1177 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1179 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uchar4 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1180 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1182 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1184 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(short val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1185 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1187 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1189 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(unsigned short val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1190 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1192 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1194 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(short1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1195 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1197 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1199 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ushort1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1200 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1202 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1204 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(short2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1205 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1207 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1209 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ushort2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1210 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1212 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1214 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(short4 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1215 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1217 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1219 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ushort4 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1220 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1222 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1224 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(int val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1225 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1227 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1229 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(unsigned val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1230 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1232 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1234 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(int1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1235 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1237 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1239 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uint1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1240 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1242 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1244 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(int2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1245 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1247 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1249 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uint2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1250 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1252 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1254 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(int4 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1255 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1257 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1259 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(uint4 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1260 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1262 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1264 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(long long val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1265 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1267 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1269 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(unsigned long long val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1270 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1272 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1274 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(longlong1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1275 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1277 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1279 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ulonglong1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1280 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1282 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1284 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(longlong2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1285 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1287 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1289 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ulonglong2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1290 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1292 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1296 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(long val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1297 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1299 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1301 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(unsigned long val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1302 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1304 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1306 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(long1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1307 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1309 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1311 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ulong1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1312 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1314 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1316 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(long2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1317 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1319 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1321 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ulong2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1322 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1324 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1326 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(long4 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1327 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1329 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1331 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(ulong4 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1332 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1334 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1338 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(float val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1339 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1341 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1343 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(float1 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1344 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1346 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1348 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(float2 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1349 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1351 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 1353 "/usr/local/cuda/bin/../include/surface_functions.h"
__attribute__((unused)) static inline void surf2Dwrite(float4 val, surface< void, 2> surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
# 1354 "/usr/local/cuda/bin/../include/surface_functions.h"
{int volatile ___ = 1;
# 1356 "/usr/local/cuda/bin/../include/surface_functions.h"
exit(___);}
# 61 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
template< class T, cudaTextureReadMode readMode> __attribute__((unused)) extern uint4 __utexfetchi(texture< T, 1, readMode> , int4);
# 63 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
template< class T, cudaTextureReadMode readMode> __attribute__((unused)) extern int4 __itexfetchi(texture< T, 1, readMode> , int4);
# 65 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
template< class T, cudaTextureReadMode readMode> __attribute__((unused)) extern float4 __ftexfetchi(texture< T, 1, readMode> , int4);
# 68 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
template< class T, int dim, cudaTextureReadMode readMode> __attribute__((unused)) extern uint4 __utexfetch(texture< T, dim, readMode> , float4, int = dim);
# 70 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
template< class T, int dim, cudaTextureReadMode readMode> __attribute__((unused)) extern int4 __itexfetch(texture< T, dim, readMode> , float4, int = dim);
# 72 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
template< class T, int dim, cudaTextureReadMode readMode> __attribute__((unused)) extern float4 __ftexfetch(texture< T, dim, readMode> , float4, int = dim);
# 80 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char tex1Dfetch(texture< char, 1, cudaReadModeElementType> t, int x)
# 81 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 89 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 91 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline signed char tex1Dfetch(texture< signed char, 1, cudaReadModeElementType> t, int x)
# 92 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 96 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 98 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned char tex1Dfetch(texture< unsigned char, 1, cudaReadModeElementType> t, int x)
# 99 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 103 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 105 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char1 tex1Dfetch(texture< char1, 1, cudaReadModeElementType> t, int x)
# 106 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 110 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 112 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar1 tex1Dfetch(texture< uchar1, 1, cudaReadModeElementType> t, int x)
# 113 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 117 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 119 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char2 tex1Dfetch(texture< char2, 1, cudaReadModeElementType> t, int x)
# 120 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 124 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 126 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar2 tex1Dfetch(texture< uchar2, 1, cudaReadModeElementType> t, int x)
# 127 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 131 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 133 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex1Dfetch(texture< char4, 1, cudaReadModeElementType> t, int x)
# 134 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 138 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 140 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex1Dfetch(texture< uchar4, 1, cudaReadModeElementType> t, int x)
# 141 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 145 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 153 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short tex1Dfetch(texture< short, 1, cudaReadModeElementType> t, int x)
# 154 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 158 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 160 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned short tex1Dfetch(texture< unsigned short, 1, cudaReadModeElementType> t, int x)
# 161 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 165 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 167 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short1 tex1Dfetch(texture< short1, 1, cudaReadModeElementType> t, int x)
# 168 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 172 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 174 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort1 tex1Dfetch(texture< ushort1, 1, cudaReadModeElementType> t, int x)
# 175 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 179 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 181 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short2 tex1Dfetch(texture< short2, 1, cudaReadModeElementType> t, int x)
# 182 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 186 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 188 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort2 tex1Dfetch(texture< ushort2, 1, cudaReadModeElementType> t, int x)
# 189 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 193 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 195 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex1Dfetch(texture< short4, 1, cudaReadModeElementType> t, int x)
# 196 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 200 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 202 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex1Dfetch(texture< ushort4, 1, cudaReadModeElementType> t, int x)
# 203 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 207 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 215 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int tex1Dfetch(texture< int, 1, cudaReadModeElementType> t, int x)
# 216 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 220 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 222 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned tex1Dfetch(texture< unsigned, 1, cudaReadModeElementType> t, int x)
# 223 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 227 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 229 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int1 tex1Dfetch(texture< int1, 1, cudaReadModeElementType> t, int x)
# 230 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 234 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 236 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint1 tex1Dfetch(texture< uint1, 1, cudaReadModeElementType> t, int x)
# 237 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 241 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 243 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int2 tex1Dfetch(texture< int2, 1, cudaReadModeElementType> t, int x)
# 244 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 248 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 250 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint2 tex1Dfetch(texture< uint2, 1, cudaReadModeElementType> t, int x)
# 251 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 255 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 257 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex1Dfetch(texture< int4, 1, cudaReadModeElementType> t, int x)
# 258 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 262 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 264 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex1Dfetch(texture< uint4, 1, cudaReadModeElementType> t, int x)
# 265 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 269 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 279 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline long tex1Dfetch(texture< long, 1, cudaReadModeElementType> t, int x)
# 280 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 284 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 286 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned long tex1Dfetch(texture< unsigned long, 1, cudaReadModeElementType> t, int x)
# 287 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 291 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 293 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline long1 tex1Dfetch(texture< long1, 1, cudaReadModeElementType> t, int x)
# 294 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 298 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 300 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ulong1 tex1Dfetch(texture< ulong1, 1, cudaReadModeElementType> t, int x)
# 301 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 305 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 307 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline long2 tex1Dfetch(texture< long2, 1, cudaReadModeElementType> t, int x)
# 308 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 312 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 314 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ulong2 tex1Dfetch(texture< ulong2, 1, cudaReadModeElementType> t, int x)
# 315 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 319 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 321 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline long4 tex1Dfetch(texture< long4, 1, cudaReadModeElementType> t, int x)
# 322 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 326 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 328 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ulong4 tex1Dfetch(texture< ulong4, 1, cudaReadModeElementType> t, int x)
# 329 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 333 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 343 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< float, 1, cudaReadModeElementType> t, int x)
# 344 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 348 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 350 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1Dfetch(texture< float1, 1, cudaReadModeElementType> t, int x)
# 351 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 355 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 357 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1Dfetch(texture< float2, 1, cudaReadModeElementType> t, int x)
# 358 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 362 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 364 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1Dfetch(texture< float4, 1, cudaReadModeElementType> t, int x)
# 365 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 369 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 377 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< char, 1, cudaReadModeNormalizedFloat> t, int x)
# 378 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 387 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 389 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< signed char, 1, cudaReadModeNormalizedFloat> t, int x)
# 390 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 395 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 397 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< unsigned char, 1, cudaReadModeNormalizedFloat> t, int x)
# 398 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 403 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 405 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1Dfetch(texture< char1, 1, cudaReadModeNormalizedFloat> t, int x)
# 406 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 411 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 413 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1Dfetch(texture< uchar1, 1, cudaReadModeNormalizedFloat> t, int x)
# 414 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 419 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 421 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1Dfetch(texture< char2, 1, cudaReadModeNormalizedFloat> t, int x)
# 422 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 427 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 429 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1Dfetch(texture< uchar2, 1, cudaReadModeNormalizedFloat> t, int x)
# 430 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 435 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 437 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1Dfetch(texture< char4, 1, cudaReadModeNormalizedFloat> t, int x)
# 438 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 443 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 445 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1Dfetch(texture< uchar4, 1, cudaReadModeNormalizedFloat> t, int x)
# 446 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 451 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 459 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< short, 1, cudaReadModeNormalizedFloat> t, int x)
# 460 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 465 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 467 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1Dfetch(texture< unsigned short, 1, cudaReadModeNormalizedFloat> t, int x)
# 468 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 473 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 475 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1Dfetch(texture< short1, 1, cudaReadModeNormalizedFloat> t, int x)
# 476 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 481 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 483 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1Dfetch(texture< ushort1, 1, cudaReadModeNormalizedFloat> t, int x)
# 484 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 489 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 491 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1Dfetch(texture< short2, 1, cudaReadModeNormalizedFloat> t, int x)
# 492 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 497 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 499 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1Dfetch(texture< ushort2, 1, cudaReadModeNormalizedFloat> t, int x)
# 500 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 505 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 507 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1Dfetch(texture< short4, 1, cudaReadModeNormalizedFloat> t, int x)
# 508 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 513 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 515 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1Dfetch(texture< ushort4, 1, cudaReadModeNormalizedFloat> t, int x)
# 516 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 521 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 529 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char tex1D(texture< char, 1, cudaReadModeElementType> t, float x)
# 530 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 538 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 540 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline signed char tex1D(texture< signed char, 1, cudaReadModeElementType> t, float x)
# 541 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 545 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 547 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned char tex1D(texture< unsigned char, 1, cudaReadModeElementType> t, float x)
# 548 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 552 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 554 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char1 tex1D(texture< char1, 1, cudaReadModeElementType> t, float x)
# 555 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 559 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 561 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar1 tex1D(texture< uchar1, 1, cudaReadModeElementType> t, float x)
# 562 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 566 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 568 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char2 tex1D(texture< char2, 1, cudaReadModeElementType> t, float x)
# 569 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 573 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 575 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar2 tex1D(texture< uchar2, 1, cudaReadModeElementType> t, float x)
# 576 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 580 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 582 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex1D(texture< char4, 1, cudaReadModeElementType> t, float x)
# 583 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 587 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 589 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex1D(texture< uchar4, 1, cudaReadModeElementType> t, float x)
# 590 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 594 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 602 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short tex1D(texture< short, 1, cudaReadModeElementType> t, float x)
# 603 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 607 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 609 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned short tex1D(texture< unsigned short, 1, cudaReadModeElementType> t, float x)
# 610 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 614 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 616 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short1 tex1D(texture< short1, 1, cudaReadModeElementType> t, float x)
# 617 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 621 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 623 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort1 tex1D(texture< ushort1, 1, cudaReadModeElementType> t, float x)
# 624 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 628 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 630 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short2 tex1D(texture< short2, 1, cudaReadModeElementType> t, float x)
# 631 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 635 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 637 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort2 tex1D(texture< ushort2, 1, cudaReadModeElementType> t, float x)
# 638 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 642 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 644 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex1D(texture< short4, 1, cudaReadModeElementType> t, float x)
# 645 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 649 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 651 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex1D(texture< ushort4, 1, cudaReadModeElementType> t, float x)
# 652 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 656 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 664 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int tex1D(texture< int, 1, cudaReadModeElementType> t, float x)
# 665 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 669 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 671 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned tex1D(texture< unsigned, 1, cudaReadModeElementType> t, float x)
# 672 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 676 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 678 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int1 tex1D(texture< int1, 1, cudaReadModeElementType> t, float x)
# 679 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 683 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 685 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint1 tex1D(texture< uint1, 1, cudaReadModeElementType> t, float x)
# 686 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 690 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 692 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int2 tex1D(texture< int2, 1, cudaReadModeElementType> t, float x)
# 693 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 697 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 699 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint2 tex1D(texture< uint2, 1, cudaReadModeElementType> t, float x)
# 700 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 704 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 706 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex1D(texture< int4, 1, cudaReadModeElementType> t, float x)
# 707 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 711 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 713 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex1D(texture< uint4, 1, cudaReadModeElementType> t, float x)
# 714 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 718 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 734 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline long tex1D(texture< long, 1, cudaReadModeElementType> t, float x)
# 735 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 739 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 741 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned long tex1D(texture< unsigned long, 1, cudaReadModeElementType> t, float x)
# 742 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 746 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 748 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline long1 tex1D(texture< long1, 1, cudaReadModeElementType> t, float x)
# 749 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 753 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 755 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ulong1 tex1D(texture< ulong1, 1, cudaReadModeElementType> t, float x)
# 756 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 760 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 762 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline long2 tex1D(texture< long2, 1, cudaReadModeElementType> t, float x)
# 763 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 767 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 769 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ulong2 tex1D(texture< ulong2, 1, cudaReadModeElementType> t, float x)
# 770 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 774 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 776 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline long4 tex1D(texture< long4, 1, cudaReadModeElementType> t, float x)
# 777 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 781 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 783 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ulong4 tex1D(texture< ulong4, 1, cudaReadModeElementType> t, float x)
# 784 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 788 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 798 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< float, 1, cudaReadModeElementType> t, float x)
# 799 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 803 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 805 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1D(texture< float1, 1, cudaReadModeElementType> t, float x)
# 806 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 810 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 812 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1D(texture< float2, 1, cudaReadModeElementType> t, float x)
# 813 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 817 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 819 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1D(texture< float4, 1, cudaReadModeElementType> t, float x)
# 820 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 824 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 832 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< char, 1, cudaReadModeNormalizedFloat> t, float x)
# 833 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 842 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 844 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< signed char, 1, cudaReadModeNormalizedFloat> t, float x)
# 845 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 850 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 852 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< unsigned char, 1, cudaReadModeNormalizedFloat> t, float x)
# 853 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 858 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 860 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1D(texture< char1, 1, cudaReadModeNormalizedFloat> t, float x)
# 861 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 866 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 868 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1D(texture< uchar1, 1, cudaReadModeNormalizedFloat> t, float x)
# 869 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 874 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 876 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1D(texture< char2, 1, cudaReadModeNormalizedFloat> t, float x)
# 877 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 882 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 884 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1D(texture< uchar2, 1, cudaReadModeNormalizedFloat> t, float x)
# 885 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 890 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 892 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1D(texture< char4, 1, cudaReadModeNormalizedFloat> t, float x)
# 893 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 898 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 900 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1D(texture< uchar4, 1, cudaReadModeNormalizedFloat> t, float x)
# 901 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 906 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 914 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< short, 1, cudaReadModeNormalizedFloat> t, float x)
# 915 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 920 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 922 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex1D(texture< unsigned short, 1, cudaReadModeNormalizedFloat> t, float x)
# 923 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 928 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 930 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1D(texture< short1, 1, cudaReadModeNormalizedFloat> t, float x)
# 931 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 936 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 938 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex1D(texture< ushort1, 1, cudaReadModeNormalizedFloat> t, float x)
# 939 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 944 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 946 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1D(texture< short2, 1, cudaReadModeNormalizedFloat> t, float x)
# 947 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 952 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 954 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex1D(texture< ushort2, 1, cudaReadModeNormalizedFloat> t, float x)
# 955 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 960 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 962 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1D(texture< short4, 1, cudaReadModeNormalizedFloat> t, float x)
# 963 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 968 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 970 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex1D(texture< ushort4, 1, cudaReadModeNormalizedFloat> t, float x)
# 971 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 976 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 984 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char tex2D(texture< char, 2, cudaReadModeElementType> t, float x, float y)
# 985 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 993 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 995 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline signed char tex2D(texture< signed char, 2, cudaReadModeElementType> t, float x, float y)
# 996 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1000 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1002 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned char tex2D(texture< unsigned char, 2, cudaReadModeElementType> t, float x, float y)
# 1003 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1007 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1009 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char1 tex2D(texture< char1, 2, cudaReadModeElementType> t, float x, float y)
# 1010 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1014 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1016 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar1 tex2D(texture< uchar1, 2, cudaReadModeElementType> t, float x, float y)
# 1017 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1021 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1023 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char2 tex2D(texture< char2, 2, cudaReadModeElementType> t, float x, float y)
# 1024 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1028 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1030 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar2 tex2D(texture< uchar2, 2, cudaReadModeElementType> t, float x, float y)
# 1031 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1035 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1037 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2D(texture< char4, 2, cudaReadModeElementType> t, float x, float y)
# 1038 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1042 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1044 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2D(texture< uchar4, 2, cudaReadModeElementType> t, float x, float y)
# 1045 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1049 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1057 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short tex2D(texture< short, 2, cudaReadModeElementType> t, float x, float y)
# 1058 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1062 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1064 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned short tex2D(texture< unsigned short, 2, cudaReadModeElementType> t, float x, float y)
# 1065 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1069 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1071 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short1 tex2D(texture< short1, 2, cudaReadModeElementType> t, float x, float y)
# 1072 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1076 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1078 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort1 tex2D(texture< ushort1, 2, cudaReadModeElementType> t, float x, float y)
# 1079 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1083 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1085 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short2 tex2D(texture< short2, 2, cudaReadModeElementType> t, float x, float y)
# 1086 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1090 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1092 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort2 tex2D(texture< ushort2, 2, cudaReadModeElementType> t, float x, float y)
# 1093 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1097 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1099 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2D(texture< short4, 2, cudaReadModeElementType> t, float x, float y)
# 1100 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1104 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1106 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2D(texture< ushort4, 2, cudaReadModeElementType> t, float x, float y)
# 1107 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1111 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1119 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int tex2D(texture< int, 2, cudaReadModeElementType> t, float x, float y)
# 1120 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1124 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1126 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned tex2D(texture< unsigned, 2, cudaReadModeElementType> t, float x, float y)
# 1127 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1131 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1133 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int1 tex2D(texture< int1, 2, cudaReadModeElementType> t, float x, float y)
# 1134 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1138 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1140 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint1 tex2D(texture< uint1, 2, cudaReadModeElementType> t, float x, float y)
# 1141 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1145 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1147 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int2 tex2D(texture< int2, 2, cudaReadModeElementType> t, float x, float y)
# 1148 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1152 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1154 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint2 tex2D(texture< uint2, 2, cudaReadModeElementType> t, float x, float y)
# 1155 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1159 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1161 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2D(texture< int4, 2, cudaReadModeElementType> t, float x, float y)
# 1162 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1166 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1168 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2D(texture< uint4, 2, cudaReadModeElementType> t, float x, float y)
# 1169 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1173 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1183 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline long tex2D(texture< long, 2, cudaReadModeElementType> t, float x, float y)
# 1184 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1188 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1190 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned long tex2D(texture< unsigned long, 2, cudaReadModeElementType> t, float x, float y)
# 1191 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1195 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1197 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline long1 tex2D(texture< long1, 2, cudaReadModeElementType> t, float x, float y)
# 1198 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1202 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1204 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ulong1 tex2D(texture< ulong1, 2, cudaReadModeElementType> t, float x, float y)
# 1205 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1209 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1211 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline long2 tex2D(texture< long2, 2, cudaReadModeElementType> t, float x, float y)
# 1212 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1216 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1218 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ulong2 tex2D(texture< ulong2, 2, cudaReadModeElementType> t, float x, float y)
# 1219 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1223 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1225 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline long4 tex2D(texture< long4, 2, cudaReadModeElementType> t, float x, float y)
# 1226 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1230 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1232 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ulong4 tex2D(texture< ulong4, 2, cudaReadModeElementType> t, float x, float y)
# 1233 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1237 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1247 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< float, 2, cudaReadModeElementType> t, float x, float y)
# 1248 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1252 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1254 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2D(texture< float1, 2, cudaReadModeElementType> t, float x, float y)
# 1255 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1259 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1261 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2D(texture< float2, 2, cudaReadModeElementType> t, float x, float y)
# 1262 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1266 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1268 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2D(texture< float4, 2, cudaReadModeElementType> t, float x, float y)
# 1269 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1273 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1281 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< char, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1282 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1291 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1293 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< signed char, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1294 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1299 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1301 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< unsigned char, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1302 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1307 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1309 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2D(texture< char1, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1310 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1315 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1317 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2D(texture< uchar1, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1318 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1323 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1325 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2D(texture< char2, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1326 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1331 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1333 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2D(texture< uchar2, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1334 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1339 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1341 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2D(texture< char4, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1342 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1347 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1349 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2D(texture< uchar4, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1350 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1355 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1363 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< short, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1364 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1369 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1371 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex2D(texture< unsigned short, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1372 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1377 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1379 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2D(texture< short1, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1380 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1385 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1387 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex2D(texture< ushort1, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1388 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1393 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1395 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2D(texture< short2, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1396 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1401 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1403 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex2D(texture< ushort2, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1404 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1409 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1411 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2D(texture< short4, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1412 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1417 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1419 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2D(texture< ushort4, 2, cudaReadModeNormalizedFloat> t, float x, float y)
# 1420 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1425 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1433 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char tex3D(texture< char, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1434 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1442 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1444 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline signed char tex3D(texture< signed char, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1445 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1449 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1451 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned char tex3D(texture< unsigned char, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1452 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1456 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1458 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char1 tex3D(texture< char1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1459 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1463 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1465 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar1 tex3D(texture< uchar1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1466 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1470 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1472 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char2 tex3D(texture< char2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1473 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1477 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1479 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar2 tex3D(texture< uchar2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1480 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1484 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1486 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex3D(texture< char4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1487 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1491 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1493 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex3D(texture< uchar4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1494 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1498 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1506 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short tex3D(texture< short, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1507 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1511 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1513 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned short tex3D(texture< unsigned short, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1514 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1518 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1520 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short1 tex3D(texture< short1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1521 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1525 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1527 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort1 tex3D(texture< ushort1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1528 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1532 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1534 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short2 tex3D(texture< short2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1535 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1539 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1541 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort2 tex3D(texture< ushort2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1542 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1546 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1548 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex3D(texture< short4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1549 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1553 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1555 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex3D(texture< ushort4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1556 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1560 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1568 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int tex3D(texture< int, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1569 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1573 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1575 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned tex3D(texture< unsigned, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1576 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1580 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1582 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int1 tex3D(texture< int1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1583 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1587 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1589 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint1 tex3D(texture< uint1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1590 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1594 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1596 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int2 tex3D(texture< int2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1597 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1601 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1603 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint2 tex3D(texture< uint2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1604 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1608 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1610 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex3D(texture< int4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1611 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1615 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1617 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex3D(texture< uint4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1618 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1622 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1632 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline long tex3D(texture< long, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1633 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1637 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1639 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline unsigned long tex3D(texture< unsigned long, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1640 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1644 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1646 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline long1 tex3D(texture< long1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1647 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1651 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1653 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ulong1 tex3D(texture< ulong1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1654 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1658 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1660 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline long2 tex3D(texture< long2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1661 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1665 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1667 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ulong2 tex3D(texture< ulong2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1668 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1672 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1674 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline long4 tex3D(texture< long4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1675 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1679 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1681 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ulong4 tex3D(texture< ulong4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1682 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1686 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1696 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< float, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1697 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1701 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1703 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex3D(texture< float1, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1704 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1708 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1710 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex3D(texture< float2, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1711 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1715 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1717 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex3D(texture< float4, 3, cudaReadModeElementType> t, float x, float y, float z)
# 1718 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1722 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1730 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< char, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1731 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1740 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1742 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< signed char, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1743 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1748 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1750 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< unsigned char, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1751 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1756 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1758 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex3D(texture< char1, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1759 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1764 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1766 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex3D(texture< uchar1, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1767 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1772 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1774 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex3D(texture< char2, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1775 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1780 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1782 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex3D(texture< uchar2, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1783 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1788 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1790 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex3D(texture< char4, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1791 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1796 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1798 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex3D(texture< uchar4, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1799 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1804 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1812 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< short, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1813 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1818 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1820 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float tex3D(texture< unsigned short, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1821 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1826 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1828 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex3D(texture< short1, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1829 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1834 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1836 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float1 tex3D(texture< ushort1, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1837 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1842 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1844 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex3D(texture< short2, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1845 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1850 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1852 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float2 tex3D(texture< ushort2, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1853 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1858 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1860 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex3D(texture< short4, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1861 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1866 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1868 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex3D(texture< ushort4, 3, cudaReadModeNormalizedFloat> t, float x, float y, float z)
# 1869 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1874 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1930 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
template< int comp, class T> __attribute__((unused)) extern int4 __itex2Dgather(texture< T, 2, cudaReadModeElementType> , float2, int = comp);
# 1932 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
template< int comp, class T> __attribute__((unused)) extern uint4 __utex2Dgather(texture< T, 2, cudaReadModeElementType> , float2, int = comp);
# 1934 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
template< int comp, class T> __attribute__((unused)) extern float4 __ftex2Dgather(texture< T, 2, cudaReadModeElementType> , float2, int = comp);
# 1954 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< char, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1955 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1957 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1959 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< signed char, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1960 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1962 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1964 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2Dgather(texture< unsigned char, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1965 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1967 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1969 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< char1, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1970 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1972 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1974 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar1, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1975 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1977 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1979 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< char2, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1980 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1982 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1984 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar2, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1985 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1987 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1989 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< char3, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1990 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1992 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1994 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar3, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 1995 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 1997 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 1999 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline char4 tex2Dgather(texture< char4, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2000 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2002 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2004 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uchar4 tex2Dgather(texture< uchar4, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2005 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2007 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2009 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2Dgather(texture< short, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2010 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2012 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2014 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2Dgather(texture< unsigned short, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2015 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2017 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2019 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2Dgather(texture< short1, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2020 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2022 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2024 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort1, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2025 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2027 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2029 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2Dgather(texture< short2, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2030 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2032 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2034 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort2, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2035 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2037 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2039 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2Dgather(texture< short3, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2040 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2042 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2044 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort3, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2045 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2047 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2049 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline short4 tex2Dgather(texture< short4, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2050 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2052 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2054 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline ushort4 tex2Dgather(texture< ushort4, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2055 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2057 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2059 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2Dgather(texture< int, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2060 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2062 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2064 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2Dgather(texture< unsigned, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2065 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2067 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2069 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2Dgather(texture< int1, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2070 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2072 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2074 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2Dgather(texture< uint1, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2075 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2077 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2079 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2Dgather(texture< int2, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2080 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2082 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2084 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2Dgather(texture< uint2, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2085 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2087 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2089 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2Dgather(texture< int3, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2090 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2092 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2094 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2Dgather(texture< uint3, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2095 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2097 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2099 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline int4 tex2Dgather(texture< int4, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2100 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2102 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2104 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline uint4 tex2Dgather(texture< uint4, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2105 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2107 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2109 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< float, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2110 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2112 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2114 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< float1, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2115 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2117 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2119 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< float2, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2120 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2122 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2124 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< float3, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2125 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2127 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 2129 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
__attribute__((unused)) static inline float4 tex2Dgather(texture< float4, 2, cudaReadModeElementType> t, float x, float y, int comp = 0)
# 2130 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
{int volatile ___ = 1;
# 2132 "/usr/local/cuda/bin/../include/texture_fetch_functions.h"
exit(___);}
# 53 "/usr/local/cuda/bin/../include/device_launch_parameters.h"
extern "C" { extern const uint3 threadIdx; }
# 55 "/usr/local/cuda/bin/../include/device_launch_parameters.h"
extern "C" { extern const uint3 blockIdx; }
# 57 "/usr/local/cuda/bin/../include/device_launch_parameters.h"
extern "C" { extern const dim3 blockDim; }
# 59 "/usr/local/cuda/bin/../include/device_launch_parameters.h"
extern "C" { extern const dim3 gridDim; }
# 61 "/usr/local/cuda/bin/../include/device_launch_parameters.h"
extern "C" { extern const int warpSize; }
# 106 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 107 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaSetupArgument(T
# 108 "/usr/local/cuda/bin/../include/cuda_runtime.h"
arg, size_t
# 109 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset)
# 111 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 112 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaSetupArgument((const void *)(&arg), sizeof(T), offset);
# 113 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 145 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaEventCreate(cudaEvent_t *
# 146 "/usr/local/cuda/bin/../include/cuda_runtime.h"
event, unsigned
# 147 "/usr/local/cuda/bin/../include/cuda_runtime.h"
flags)
# 149 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 150 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaEventCreateWithFlags(event, 0);
# 151 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 208 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMallocHost(void **
# 209 "/usr/local/cuda/bin/../include/cuda_runtime.h"
ptr, size_t
# 210 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size, unsigned
# 211 "/usr/local/cuda/bin/../include/cuda_runtime.h"
flags)
# 213 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 214 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaHostAlloc(ptr, size, flags);
# 215 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 217 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 218 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaHostAlloc(T **
# 219 "/usr/local/cuda/bin/../include/cuda_runtime.h"
ptr, size_t
# 220 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size, unsigned
# 221 "/usr/local/cuda/bin/../include/cuda_runtime.h"
flags)
# 223 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 224 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaHostAlloc((void **)((void *)ptr), size, flags);
# 225 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 227 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 228 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaHostGetDevicePointer(T **
# 229 "/usr/local/cuda/bin/../include/cuda_runtime.h"
pDevice, void *
# 230 "/usr/local/cuda/bin/../include/cuda_runtime.h"
pHost, unsigned
# 231 "/usr/local/cuda/bin/../include/cuda_runtime.h"
flags)
# 233 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 234 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags);
# 235 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 237 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 238 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMalloc(T **
# 239 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, size_t
# 240 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size)
# 242 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 243 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMalloc((void **)((void *)devPtr), size);
# 244 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 246 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 247 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMallocHost(T **
# 248 "/usr/local/cuda/bin/../include/cuda_runtime.h"
ptr, size_t
# 249 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size, unsigned
# 250 "/usr/local/cuda/bin/../include/cuda_runtime.h"
flags = (0))
# 252 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 253 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMallocHost((void **)((void *)ptr), size, flags);
# 254 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 256 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 257 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMallocPitch(T **
# 258 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, size_t *
# 259 "/usr/local/cuda/bin/../include/cuda_runtime.h"
pitch, size_t
# 260 "/usr/local/cuda/bin/../include/cuda_runtime.h"
width, size_t
# 261 "/usr/local/cuda/bin/../include/cuda_runtime.h"
height)
# 263 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 264 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMallocPitch((void **)((void *)devPtr), pitch, width, height);
# 265 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 275 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyToSymbol(char *
# 276 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, const void *
# 277 "/usr/local/cuda/bin/../include/cuda_runtime.h"
src, size_t
# 278 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 279 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 280 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyHostToDevice)
# 282 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 283 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyToSymbol((const char *)symbol, src, count, offset, kind);
# 284 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 286 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 287 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMemcpyToSymbol(const T &
# 288 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, const void *
# 289 "/usr/local/cuda/bin/../include/cuda_runtime.h"
src, size_t
# 290 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 291 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 292 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyHostToDevice)
# 294 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 295 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyToSymbol((const char *)(&symbol), src, count, offset, kind);
# 296 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 298 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyToSymbolAsync(char *
# 299 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, const void *
# 300 "/usr/local/cuda/bin/../include/cuda_runtime.h"
src, size_t
# 301 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 302 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 303 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyHostToDevice, cudaStream_t
# 304 "/usr/local/cuda/bin/../include/cuda_runtime.h"
stream = 0)
# 306 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 307 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyToSymbolAsync((const char *)symbol, src, count, offset, kind, stream);
# 308 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 310 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 311 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMemcpyToSymbolAsync(const T &
# 312 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, const void *
# 313 "/usr/local/cuda/bin/../include/cuda_runtime.h"
src, size_t
# 314 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 315 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 316 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyHostToDevice, cudaStream_t
# 317 "/usr/local/cuda/bin/../include/cuda_runtime.h"
stream = 0)
# 319 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 320 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyToSymbolAsync((const char *)(&symbol), src, count, offset, kind, stream);
# 321 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 329 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyFromSymbol(void *
# 330 "/usr/local/cuda/bin/../include/cuda_runtime.h"
dst, char *
# 331 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, size_t
# 332 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 333 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 334 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyDeviceToHost)
# 336 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 337 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyFromSymbol(dst, (const char *)symbol, count, offset, kind);
# 338 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 340 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 341 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMemcpyFromSymbol(void *
# 342 "/usr/local/cuda/bin/../include/cuda_runtime.h"
dst, const T &
# 343 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, size_t
# 344 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 345 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 346 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyDeviceToHost)
# 348 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 349 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyFromSymbol(dst, (const char *)(&symbol), count, offset, kind);
# 350 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 352 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaMemcpyFromSymbolAsync(void *
# 353 "/usr/local/cuda/bin/../include/cuda_runtime.h"
dst, char *
# 354 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, size_t
# 355 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 356 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 357 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyDeviceToHost, cudaStream_t
# 358 "/usr/local/cuda/bin/../include/cuda_runtime.h"
stream = 0)
# 360 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 361 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyFromSymbolAsync(dst, (const char *)symbol, count, offset, kind, stream);
# 362 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 364 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 365 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaMemcpyFromSymbolAsync(void *
# 366 "/usr/local/cuda/bin/../include/cuda_runtime.h"
dst, const T &
# 367 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol, size_t
# 368 "/usr/local/cuda/bin/../include/cuda_runtime.h"
count, size_t
# 369 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset = (0), cudaMemcpyKind
# 370 "/usr/local/cuda/bin/../include/cuda_runtime.h"
kind = cudaMemcpyDeviceToHost, cudaStream_t
# 371 "/usr/local/cuda/bin/../include/cuda_runtime.h"
stream = 0)
# 373 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 374 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaMemcpyFromSymbolAsync(dst, (const char *)(&symbol), count, offset, kind, stream);
# 375 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 377 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaGetSymbolAddress(void **
# 378 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, char *
# 379 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol)
# 381 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 382 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaGetSymbolAddress(devPtr, (const char *)symbol);
# 383 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 410 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 411 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaGetSymbolAddress(void **
# 412 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, const T &
# 413 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol)
# 415 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 416 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaGetSymbolAddress(devPtr, (const char *)(&symbol));
# 417 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 425 "/usr/local/cuda/bin/../include/cuda_runtime.h"
static inline cudaError_t cudaGetSymbolSize(size_t *
# 426 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size, char *
# 427 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol)
# 429 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 430 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaGetSymbolSize(size, (const char *)symbol);
# 431 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 458 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 459 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaGetSymbolSize(size_t *
# 460 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size, const T &
# 461 "/usr/local/cuda/bin/../include/cuda_runtime.h"
symbol)
# 463 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 464 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaGetSymbolSize(size, (const char *)(&symbol));
# 465 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 507 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 508 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindTexture(size_t *
# 509 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 510 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex, const void *
# 511 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, const cudaChannelFormatDesc &
# 512 "/usr/local/cuda/bin/../include/cuda_runtime.h"
desc, size_t
# 513 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size = (((2147483647) * 2U) + 1U))
# 515 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 516 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaBindTexture(offset, &tex, devPtr, &desc, size);
# 517 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 552 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 553 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindTexture(size_t *
# 554 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 555 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex, const void *
# 556 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, size_t
# 557 "/usr/local/cuda/bin/../include/cuda_runtime.h"
size = (((2147483647) * 2U) + 1U))
# 559 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 560 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size);
# 561 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 608 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 609 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindTexture2D(size_t *
# 610 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 611 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex, const void *
# 612 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, const cudaChannelFormatDesc &
# 613 "/usr/local/cuda/bin/../include/cuda_runtime.h"
desc, size_t
# 614 "/usr/local/cuda/bin/../include/cuda_runtime.h"
width, size_t
# 615 "/usr/local/cuda/bin/../include/cuda_runtime.h"
height, size_t
# 616 "/usr/local/cuda/bin/../include/cuda_runtime.h"
pitch)
# 618 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 619 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch);
# 620 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 666 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 667 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindTexture2D(size_t *
# 668 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 669 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex, const void *
# 670 "/usr/local/cuda/bin/../include/cuda_runtime.h"
devPtr, size_t
# 671 "/usr/local/cuda/bin/../include/cuda_runtime.h"
width, size_t
# 672 "/usr/local/cuda/bin/../include/cuda_runtime.h"
height, size_t
# 673 "/usr/local/cuda/bin/../include/cuda_runtime.h"
pitch)
# 675 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 676 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaBindTexture2D(offset, &tex, devPtr, &(tex.texture< T, dim, readMode> ::channelDesc), width, height, pitch);
# 677 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 708 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 709 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode> &
# 710 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex, const cudaArray *
# 711 "/usr/local/cuda/bin/../include/cuda_runtime.h"
array, const cudaChannelFormatDesc &
# 712 "/usr/local/cuda/bin/../include/cuda_runtime.h"
desc)
# 714 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 715 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaBindTextureToArray(&tex, array, &desc);
# 716 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 746 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 747 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindTextureToArray(const texture< T, dim, readMode> &
# 748 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex, const cudaArray *
# 749 "/usr/local/cuda/bin/../include/cuda_runtime.h"
array)
# 751 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 752 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaChannelFormatDesc desc;
# 753 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaError_t err = cudaGetChannelDesc(&desc, array);
# 755 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err;
# 756 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 785 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 786 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaUnbindTexture(const texture< T, dim, readMode> &
# 787 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex)
# 789 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 790 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaUnbindTexture(&tex);
# 791 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 825 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim, cudaTextureReadMode readMode> inline cudaError_t
# 826 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaGetTextureAlignmentOffset(size_t *
# 827 "/usr/local/cuda/bin/../include/cuda_runtime.h"
offset, const texture< T, dim, readMode> &
# 828 "/usr/local/cuda/bin/../include/cuda_runtime.h"
tex)
# 830 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 831 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaGetTextureAlignmentOffset(offset, &tex);
# 832 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 886 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 887 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaFuncSetCacheConfig(T *
# 888 "/usr/local/cuda/bin/../include/cuda_runtime.h"
func, cudaFuncCache
# 889 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cacheConfig)
# 891 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 892 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaFuncSetCacheConfig((const char *)func, cacheConfig);
# 893 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 930 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 931 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaLaunch(T *
# 932 "/usr/local/cuda/bin/../include/cuda_runtime.h"
entry)
# 934 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 935 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaLaunch((const char *)entry);
# 936 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 970 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T> inline cudaError_t
# 971 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaFuncGetAttributes(cudaFuncAttributes *
# 972 "/usr/local/cuda/bin/../include/cuda_runtime.h"
attr, T *
# 973 "/usr/local/cuda/bin/../include/cuda_runtime.h"
entry)
# 975 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 976 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaFuncGetAttributes(attr, (const char *)entry);
# 977 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 999 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim> inline cudaError_t
# 1000 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindSurfaceToArray(const surface< T, dim> &
# 1001 "/usr/local/cuda/bin/../include/cuda_runtime.h"
surf, const cudaArray *
# 1002 "/usr/local/cuda/bin/../include/cuda_runtime.h"
array, const cudaChannelFormatDesc &
# 1003 "/usr/local/cuda/bin/../include/cuda_runtime.h"
desc)
# 1005 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 1006 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return cudaBindSurfaceToArray(&surf, array, &desc);
# 1007 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 1028 "/usr/local/cuda/bin/../include/cuda_runtime.h"
template< class T, int dim> inline cudaError_t
# 1029 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaBindSurfaceToArray(const surface< T, dim> &
# 1030 "/usr/local/cuda/bin/../include/cuda_runtime.h"
surf, const cudaArray *
# 1031 "/usr/local/cuda/bin/../include/cuda_runtime.h"
array)
# 1033 "/usr/local/cuda/bin/../include/cuda_runtime.h"
{
# 1034 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaChannelFormatDesc desc;
# 1035 "/usr/local/cuda/bin/../include/cuda_runtime.h"
cudaError_t err = cudaGetChannelDesc(&desc, array);
# 1037 "/usr/local/cuda/bin/../include/cuda_runtime.h"
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err;
# 1038 "/usr/local/cuda/bin/../include/cuda_runtime.h"
}
# 495 "/Users/jopasserat/programming/boost_1_44_0/boost/config/suffix.hpp"
namespace boost {
# 497 "/Users/jopasserat/programming/boost_1_44_0/boost/config/suffix.hpp"
typedef long long long_long_type;
# 498 "/Users/jopasserat/programming/boost_1_44_0/boost/config/suffix.hpp"
typedef unsigned long long ulong_long_type;
# 503 "/Users/jopasserat/programming/boost_1_44_0/boost/config/suffix.hpp"
}
# 7 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/backward_compatibility.hpp"
namespace boost {
# 9 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/backward_compatibility.hpp"
namespace concepts { }
# 14 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/backward_compatibility.hpp"
}
# 33 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/adl_barrier.hpp"
namespace mpl_ { namespace aux { }}
# 34 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/adl_barrier.hpp"
namespace boost { namespace mpl { using namespace mpl_;
# 35 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/adl_barrier.hpp"
namespace aux { using namespace mpl_::aux;}
# 36 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/adl_barrier.hpp"
}}
# 19 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool_fwd.hpp"
namespace mpl_ {
# 21 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool_fwd.hpp"
template< bool C_> struct bool_;
# 24 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool_fwd.hpp"
typedef bool_< true> true_;
# 25 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool_fwd.hpp"
typedef bool_< false> false_;
# 27 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool_fwd.hpp"
}
# 29 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool_fwd.hpp"
namespace boost { namespace mpl { using mpl_::bool_;}}
# 30 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool_fwd.hpp"
namespace boost { namespace mpl { using mpl_::true_;}}
# 31 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool_fwd.hpp"
namespace boost { namespace mpl { using mpl_::false_;}}
# 21 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c_tag.hpp"
namespace mpl_ {
# 22 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c_tag.hpp"
struct integral_c_tag { enum { value}; };
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c_tag.hpp"
}
# 24 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c_tag.hpp"
namespace boost { namespace mpl { using mpl_::integral_c_tag;}}
# 21 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool.hpp"
namespace mpl_ {
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool.hpp"
template< bool C_> struct bool_ {
# 25 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool.hpp"
enum { value = C_};
# 26 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool.hpp"
typedef integral_c_tag tag;
# 27 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool.hpp"
typedef mpl_::bool_< C_> type;
# 28 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool.hpp"
typedef bool value_type;
# 29 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool.hpp"
operator bool() const { return this->value; }
# 30 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool.hpp"
};
# 37 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/bool.hpp"
}
# 11 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/has_constraints.hpp"
namespace boost { namespace concepts {
# 13 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/has_constraints.hpp"
namespace detail {
# 18 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/has_constraints.hpp"
typedef char yes;
# 19 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/has_constraints.hpp"
typedef char (&no)[2];
# 21 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/has_constraints.hpp"
template< class Model, void (Model::*__T2)(void)>
# 22 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/has_constraints.hpp"
struct wrap_constraints { };
# 29 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/has_constraints.hpp"
inline no has_constraints_(...);
# 35 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/has_constraints.hpp"
}
# 39 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/has_constraints.hpp"
template< class Model>
# 40 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/has_constraints.hpp"
struct not_satisfied {
# 42 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/has_constraints.hpp"
enum { value = (sizeof(detail::has_constraints_((Model *)0)) == sizeof(detail::yes))};
# 45 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/has_constraints.hpp"
typedef mpl_::bool_< value> type;
# 46 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/has_constraints.hpp"
};
# 48 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/has_constraints.hpp"
}}
# 73 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/value_wknd.hpp"
namespace boost { namespace mpl { namespace aux {
# 75 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/value_wknd.hpp"
template< class T> struct value_type_wknd {
# 77 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/value_wknd.hpp"
typedef typename T::value_type type;
# 78 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/value_wknd.hpp"
};
# 87 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/value_wknd.hpp"
}}}
# 19 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/void_fwd.hpp"
namespace mpl_ {
# 21 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/void_fwd.hpp"
struct void_;
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/void_fwd.hpp"
}
# 24 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/void_fwd.hpp"
namespace boost { namespace mpl { using mpl_::void_;}}
# 19 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na_fwd.hpp"
namespace mpl_ {
# 22 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na_fwd.hpp"
struct na {
# 24 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na_fwd.hpp"
typedef na type;
# 25 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na_fwd.hpp"
enum { value};
# 26 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na_fwd.hpp"
};
# 28 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na_fwd.hpp"
}
# 29 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na_fwd.hpp"
namespace boost { namespace mpl { using mpl_::na;}}
# 22 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
namespace boost { namespace mpl {
# 24 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
template< class T>
# 25 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
struct is_na : public mpl_::false_ {
# 31 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
};
# 34 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
template<> struct is_na< mpl_::na> : public mpl_::true_ {
# 40 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
};
# 42 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
template< class T>
# 43 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
struct is_not_na : public mpl_::true_ {
# 49 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
};
# 52 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
template<> struct is_not_na< mpl_::na> : public mpl_::false_ {
# 58 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
};
# 61 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
template< class T, class U> struct if_na {
# 63 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
typedef T type;
# 64 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
};
# 66 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
template< class U> struct if_na< mpl_::na, U> {
# 68 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
typedef U type;
# 69 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
};
# 93 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/na.hpp"
}}
# 20 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/int_fwd.hpp"
namespace mpl_ {
# 22 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/int_fwd.hpp"
template< int N> struct int_;
# 24 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/int_fwd.hpp"
}
# 25 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/int_fwd.hpp"
namespace boost { namespace mpl { using mpl_::int_;}}
# 40 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
namespace mpl_ {
# 42 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
template< int N>
# 43 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
struct int_ {
# 45 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
enum { value = N};
# 51 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
typedef mpl_::int_< N> type;
# 53 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
typedef int value_type;
# 54 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
typedef integral_c_tag tag;
# 72 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
typedef mpl_::int_< (int)(value + 1)> next;
# 73 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
typedef mpl_::int_< (int)(value - 1)> prior;
# 80 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
operator int() const { return static_cast< int>((this->value)); }
# 81 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
};
# 88 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
}
# 17 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/template_arity_fwd.hpp"
namespace boost { namespace mpl { namespace aux {
# 19 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/template_arity_fwd.hpp"
template< class F> struct template_arity;
# 21 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/template_arity_fwd.hpp"
}}}
# 27 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/lambda_fwd.hpp"
namespace boost { namespace mpl {
# 29 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/lambda_fwd.hpp"
template< class
# 30 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/lambda_fwd.hpp"
T = mpl_::na, class
# 31 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/lambda_fwd.hpp"
Tag = mpl_::void_, class
# 32 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/lambda_fwd.hpp"
Arity = mpl_::int_< (aux::template_arity< T> ::value)> > struct lambda;
# 38 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/lambda_fwd.hpp"
}}
# 25 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
namespace boost { namespace mpl {
# 29 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
template< bool
# 30 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
C, class
# 31 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
T1, class
# 32 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
T2>
# 34 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
struct if_c {
# 36 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
typedef T1 type;
# 37 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
};
# 39 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
template< class
# 40 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
T1, class
# 41 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
T2>
# 43 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
struct if_c< false, T1, T2> {
# 45 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
typedef T2 type;
# 46 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
};
# 50 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
template< class
# 51 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
T1 = mpl_::na, class
# 52 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
T2 = mpl_::na, class
# 53 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
T3 = mpl_::na>
# 55 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
struct if_ {
# 67 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
private: typedef if_c< (bool)T1::value, T2, T3> almost_type_;
# 70 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
public: typedef typename if_c< (bool)T1::value, T2, T3> ::type type;
# 73 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
};
# 131 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
template<> struct if_< mpl_::na, mpl_::na, mpl_::na> { template< class T1, class T2, class T3, class T4 = mpl_::na, class T5 = mpl_::na> struct apply : public mpl::if_< T1, T2, T3> { }; }; template< class Tag> struct lambda< if_< mpl_::na, mpl_::na, mpl_::na> , Tag, mpl_::int_< (-1)> > { typedef mpl_::false_ is_le; typedef if_< mpl_::na, mpl_::na, mpl_::na> result_; typedef if_< mpl_::na, mpl_::na, mpl_::na> type; }; namespace aux { template< class T1, class T2, class T3> struct template_arity< if_< T1, T2, T3> > : public mpl_::int_< 3> { }; template<> struct template_arity< if_< mpl_::na, mpl_::na, mpl_::na> > : public mpl_::int_< (-1)> { }; }
# 133 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/if.hpp"
}}
# 17 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
namespace boost { namespace concepts {
# 19 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
template< class ModelFn> struct requirement_;
# 22 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
namespace detail {
# 24 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
template< void (*__T3)(void)> struct instantiate { };
# 25 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
}
# 27 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
template< class Model>
# 28 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
struct requirement {
# 30 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
static void failed() { (((Model *)0)->~Model()); }
# 31 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
};
# 33 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
struct failed { };
# 35 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
template< class Model>
# 36 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
struct requirement< failed ************Model::************> {
# 38 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
static void failed() { (((Model *)0)->~Model()); }
# 39 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
};
# 43 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
template< class Model>
# 44 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
struct constraint {
# 46 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
static void failed() { (((Model *)0)->constraints()); }
# 47 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
};
# 49 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
template< class Model>
# 50 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
struct requirement_< void (*)(Model)> : public mpl::if_< not_satisfied< Model> , constraint< Model> , requirement< failed ************Model::************> > ::type {
# 56 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
};
# 73 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/detail/general.hpp"
}}
# 69 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
namespace std {
# 80 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
struct input_iterator_tag { };
# 82 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
struct output_iterator_tag { };
# 84 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
struct forward_iterator_tag : public input_iterator_tag { };
# 87 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
struct bidirectional_iterator_tag : public forward_iterator_tag { };
# 90 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 104 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
template< class _Category, class _Tp, class _Distance = ptrdiff_t, class
# 105 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
_Pointer = _Tp *, class _Reference = _Tp &>
# 106 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
struct iterator {
# 109 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef _Category iterator_category;
# 111 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef _Tp value_type;
# 113 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef _Distance difference_type;
# 115 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef _Pointer pointer;
# 117 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef _Reference reference;
# 118 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
};
# 126 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
template< class _Iterator>
# 127 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
struct iterator_traits {
# 129 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::iterator_category iterator_category;
# 130 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::value_type value_type;
# 131 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::difference_type difference_type;
# 132 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::pointer pointer;
# 133 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef typename _Iterator::reference reference;
# 134 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
};
# 136 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
template< class _Tp>
# 137 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
struct iterator_traits< _Tp *> {
# 139 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef random_access_iterator_tag iterator_category;
# 140 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef _Tp value_type;
# 141 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef ptrdiff_t difference_type;
# 142 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef _Tp *pointer;
# 143 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef _Tp &reference;
# 144 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
};
# 146 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
template< class _Tp>
# 147 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
struct iterator_traits< const _Tp *> {
# 149 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef random_access_iterator_tag iterator_category;
# 150 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef _Tp value_type;
# 151 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef ptrdiff_t difference_type;
# 152 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef const _Tp *pointer;
# 153 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
typedef const _Tp &reference;
# 154 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
};
# 162 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
template < typename _Iter >
    inline typename iterator_traits < _Iter > :: iterator_category
    __iterator_category ( const _Iter & )
    { return typename iterator_traits < _Iter > :: iterator_category ( ); }
# 167 "/usr/include/c++/4.2.1/bits/stl_iterator_base_types.h" 3
}
# 71 "/usr/include/c++/4.2.1/bits/stl_iterator_base_funcs.h" 3
namespace std {
# 73 "/usr/include/c++/4.2.1/bits/stl_iterator_base_funcs.h" 3
template < typename _InputIterator >
    inline typename iterator_traits < _InputIterator > :: difference_type
    __distance ( _InputIterator __first, _InputIterator __last,
               input_iterator_tag )
    {



      typename iterator_traits < _InputIterator > :: difference_type __n = 0;
      while ( __first != __last )
 {
   ++ __first;
   ++ __n;
 }
      return __n;
    }
# 90 "/usr/include/c++/4.2.1/bits/stl_iterator_base_funcs.h" 3
template < typename _RandomAccessIterator >
    inline typename iterator_traits < _RandomAccessIterator > :: difference_type
    __distance ( _RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag )
    {



      return __last - __first;
    }
# 113 "/usr/include/c++/4.2.1/bits/stl_iterator_base_funcs.h" 3
template < typename _InputIterator >
    inline typename iterator_traits < _InputIterator > :: difference_type
    distance ( _InputIterator __first, _InputIterator __last )
    {

      return std :: __distance ( __first, __last,
        std :: __iterator_category ( __first ) );
    }
# 122 "/usr/include/c++/4.2.1/bits/stl_iterator_base_funcs.h" 3
template < typename _InputIterator, typename _Distance >
    inline void
    __advance ( _InputIterator & __i, _Distance __n, input_iterator_tag )
    {


      while ( __n -- )
 ++ __i;
    }
# 132 "/usr/include/c++/4.2.1/bits/stl_iterator_base_funcs.h" 3
template < typename _BidirectionalIterator, typename _Distance >
    inline void
    __advance ( _BidirectionalIterator & __i, _Distance __n,
       bidirectional_iterator_tag )
    {



      if ( __n > 0 )
        while ( __n -- )
   ++ __i;
      else
        while ( __n ++ )
   -- __i;
    }
# 148 "/usr/include/c++/4.2.1/bits/stl_iterator_base_funcs.h" 3
template < typename _RandomAccessIterator, typename _Distance >
    inline void
    __advance ( _RandomAccessIterator & __i, _Distance __n,
              random_access_iterator_tag )
    {



      __i += __n;
    }
# 171 "/usr/include/c++/4.2.1/bits/stl_iterator_base_funcs.h" 3
template < typename _InputIterator, typename _Distance >
    inline void
    advance ( _InputIterator & __i, _Distance __n )
    {

      typename iterator_traits < _InputIterator > :: difference_type __d = __n;
      std :: __advance ( __i, __d, std :: __iterator_category ( __i ) );
    }
# 180 "/usr/include/c++/4.2.1/bits/stl_iterator_base_funcs.h" 3
}
# 72 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
namespace std {
# 93 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator >
    class reverse_iterator
    : public iterator < typename iterator_traits < _Iterator > :: iterator_category,
        typename iterator_traits < _Iterator > :: value_type,
        typename iterator_traits < _Iterator > :: difference_type,
        typename iterator_traits < _Iterator > :: pointer,
                      typename iterator_traits < _Iterator > :: reference >
    {
    protected :
      _Iterator current;

    public :
      typedef _Iterator iterator_type;
      typedef typename iterator_traits < _Iterator > :: difference_type
              difference_type;
      typedef typename iterator_traits < _Iterator > :: reference reference;
      typedef typename iterator_traits < _Iterator > :: pointer pointer;

    public :






      reverse_iterator ( ) : current ( ) { }




      explicit
      reverse_iterator ( iterator_type __x ) : current ( __x ) { }




      reverse_iterator ( const reverse_iterator & __x )
      : current ( __x . current ) { }





      template < typename _Iter >
        reverse_iterator ( const reverse_iterator < _Iter > & __x )
 : current ( __x . base ( ) ) { }




      iterator_type
      base ( ) const
      { return current; }






      reference
      operator * ( ) const
      {
 _Iterator __tmp = current;
 return * -- __tmp;
      }






      pointer
      operator -> ( ) const
      { return & ( operator * ( ) ); }






      reverse_iterator &
      operator ++ ( )
      {
 -- current;
 return * this;
      }






      reverse_iterator
      operator ++ ( int )
      {
 reverse_iterator __tmp = * this;
 -- current;
 return __tmp;
      }






      reverse_iterator &
      operator -- ( )
      {
 ++ current;
 return * this;
      }






      reverse_iterator
      operator -- ( int )
      {
 reverse_iterator __tmp = * this;
 ++ current;
 return __tmp;
      }






      reverse_iterator
      operator + ( difference_type __n ) const
      { return reverse_iterator ( current - __n ); }






      reverse_iterator &
      operator += ( difference_type __n )
      {
 current -= __n;
 return * this;
      }






      reverse_iterator
      operator - ( difference_type __n ) const
      { return reverse_iterator ( current + __n ); }






      reverse_iterator &
      operator -= ( difference_type __n )
      {
 current += __n;
 return * this;
      }






      reference
      operator [ ] ( difference_type __n ) const
      { return * ( * this + __n ); }
    };
# 280 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator == ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return __x . base ( ) == __y . base ( ); }
# 286 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator < ( const reverse_iterator < _Iterator > & __x,
       const reverse_iterator < _Iterator > & __y )
    { return __y . base ( ) < __x . base ( ); }
# 292 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator != ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return ! ( __x == __y ); }
# 298 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator > ( const reverse_iterator < _Iterator > & __x,
       const reverse_iterator < _Iterator > & __y )
    { return __y < __x; }
# 304 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator <= ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return ! ( __y < __x ); }
# 310 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline bool
    operator >= ( const reverse_iterator < _Iterator > & __x,
        const reverse_iterator < _Iterator > & __y )
    { return ! ( __x < __y ); }
# 316 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline typename reverse_iterator < _Iterator > :: difference_type
    operator - ( const reverse_iterator < _Iterator > & __x,
       const reverse_iterator < _Iterator > & __y )
    { return __y . base ( ) - __x . base ( ); }
# 322 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator >
    inline reverse_iterator < _Iterator >
    operator + ( typename reverse_iterator < _Iterator > :: difference_type __n,
       const reverse_iterator < _Iterator > & __x )
    { return reverse_iterator < _Iterator > ( __x . base ( ) - __n ); }
# 330 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator == ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return __x . base ( ) == __y . base ( ); }
# 336 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator < ( const reverse_iterator < _IteratorL > & __x,
       const reverse_iterator < _IteratorR > & __y )
    { return __y . base ( ) < __x . base ( ); }
# 342 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator != ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return ! ( __x == __y ); }
# 348 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator > ( const reverse_iterator < _IteratorL > & __x,
       const reverse_iterator < _IteratorR > & __y )
    { return __y < __x; }
# 354 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator <= ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return ! ( __y < __x ); }
# 360 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline bool
    operator >= ( const reverse_iterator < _IteratorL > & __x,
        const reverse_iterator < _IteratorR > & __y )
    { return ! ( __x < __y ); }
# 366 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR >
    inline typename reverse_iterator < _IteratorL > :: difference_type
    operator - ( const reverse_iterator < _IteratorL > & __x,
       const reverse_iterator < _IteratorR > & __y )
    { return __y . base ( ) - __x . base ( ); }
# 384 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Container >
    class back_insert_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _Container * container;

    public :

      typedef _Container container_type;


      explicit
      back_insert_iterator ( _Container & __x ) : container ( & __x ) { }
# 410 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
      back_insert_iterator &
      operator = ( typename _Container :: const_reference __value )
      {
 container -> push_back ( __value );
 return * this;
      }


      back_insert_iterator &
      operator * ( )
      { return * this; }


      back_insert_iterator &
      operator ++ ( )
      { return * this; }


      back_insert_iterator
      operator ++ ( int )
      { return * this; }
    };
# 444 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Container >
    inline back_insert_iterator < _Container >
    back_inserter ( _Container & __x )
    { return back_insert_iterator < _Container > ( __x ); }
# 459 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Container >
    class front_insert_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _Container * container;

    public :

      typedef _Container container_type;


      explicit front_insert_iterator ( _Container & __x ) : container ( & __x ) { }
# 484 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
      front_insert_iterator &
      operator = ( typename _Container :: const_reference __value )
      {
 container -> push_front ( __value );
 return * this;
      }


      front_insert_iterator &
      operator * ( )
      { return * this; }


      front_insert_iterator &
      operator ++ ( )
      { return * this; }


      front_insert_iterator
      operator ++ ( int )
      { return * this; }
    };
# 518 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Container >
    inline front_insert_iterator < _Container >
    front_inserter ( _Container & __x )
    { return front_insert_iterator < _Container > ( __x ); }
# 537 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Container >
    class insert_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _Container * container;
      typename _Container :: iterator iter;

    public :

      typedef _Container container_type;





      insert_iterator ( _Container & __x, typename _Container :: iterator __i )
      : container ( & __x ), iter ( __i ) { }
# 579 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
      insert_iterator &
      operator = ( const typename _Container :: const_reference __value )
      {
 iter = container -> insert ( iter, __value );
 ++ iter;
 return * this;
      }


      insert_iterator &
      operator * ( )
      { return * this; }


      insert_iterator &
      operator ++ ( )
      { return * this; }


      insert_iterator &
      operator ++ ( int )
      { return * this; }
    };
# 614 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Container, typename _Iterator >
    inline insert_iterator < _Container >
    inserter ( _Container & __x, _Iterator __i )
    {
      return insert_iterator < _Container > ( __x,
      typename _Container :: iterator ( __i ) );
    }
# 622 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
}
# 624 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
namespace __gnu_cxx {
# 633 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
using std::iterator_traits;
# 634 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
using std::iterator;
# 635 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    class __normal_iterator
    {
    protected :
      _Iterator _M_current;

    public :
      typedef typename iterator_traits < _Iterator > :: iterator_category
                                                             iterator_category;
      typedef typename iterator_traits < _Iterator > :: value_type value_type;
      typedef typename iterator_traits < _Iterator > :: difference_type
                                                             difference_type;
      typedef typename iterator_traits < _Iterator > :: reference reference;
      typedef typename iterator_traits < _Iterator > :: pointer pointer;

      __normal_iterator ( ) : _M_current ( _Iterator ( ) ) { }

      explicit
      __normal_iterator ( const _Iterator & __i ) : _M_current ( __i ) { }


      template < typename _Iter >
        __normal_iterator ( const __normal_iterator < _Iter,
     typename __enable_if <
              ( std :: __are_same < _Iter, typename _Container :: pointer > :: __value ),
        _Container > :: __type > & __i )
        : _M_current ( __i . base ( ) ) { }


      reference
      operator * ( ) const
      { return * _M_current; }

      pointer
      operator -> ( ) const
      { return _M_current; }

      __normal_iterator &
      operator ++ ( )
      {
 ++ _M_current;
 return * this;
      }

      __normal_iterator
      operator ++ ( int )
      { return __normal_iterator ( _M_current ++ ); }


      __normal_iterator &
      operator -- ( )
      {
 -- _M_current;
 return * this;
      }

      __normal_iterator
      operator -- ( int )
      { return __normal_iterator ( _M_current -- ); }


      reference
      operator [ ] ( const difference_type & __n ) const
      { return _M_current [ __n ]; }

      __normal_iterator &
      operator += ( const difference_type & __n )
      { _M_current += __n; return * this; }

      __normal_iterator
      operator + ( const difference_type & __n ) const
      { return __normal_iterator ( _M_current + __n ); }

      __normal_iterator &
      operator -= ( const difference_type & __n )
      { _M_current -= __n; return * this; }

      __normal_iterator
      operator - ( const difference_type & __n ) const
      { return __normal_iterator ( _M_current - __n ); }

      const _Iterator &
      base ( ) const
      { return _M_current; }
    };
# 730 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator == ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) == __rhs . base ( ); }
# 736 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator == ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) == __rhs . base ( ); }
# 742 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator != ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) != __rhs . base ( ); }
# 748 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator != ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) != __rhs . base ( ); }
# 755 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator < ( const __normal_iterator < _IteratorL, _Container > & __lhs,
       const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) < __rhs . base ( ); }
# 761 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator < ( const __normal_iterator < _Iterator, _Container > & __lhs,
       const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) < __rhs . base ( ); }
# 767 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator > ( const __normal_iterator < _IteratorL, _Container > & __lhs,
       const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) > __rhs . base ( ); }
# 773 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator > ( const __normal_iterator < _Iterator, _Container > & __lhs,
       const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) > __rhs . base ( ); }
# 779 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator <= ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) <= __rhs . base ( ); }
# 785 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator <= ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) <= __rhs . base ( ); }
# 791 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline bool
    operator >= ( const __normal_iterator < _IteratorL, _Container > & __lhs,
        const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) >= __rhs . base ( ); }
# 797 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline bool
    operator >= ( const __normal_iterator < _Iterator, _Container > & __lhs,
        const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) >= __rhs . base ( ); }
# 807 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _IteratorL, typename _IteratorR, typename _Container >
    inline typename __normal_iterator < _IteratorL, _Container > :: difference_type
    operator - ( const __normal_iterator < _IteratorL, _Container > & __lhs,
       const __normal_iterator < _IteratorR, _Container > & __rhs )
    { return __lhs . base ( ) - __rhs . base ( ); }
# 813 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline typename __normal_iterator < _Iterator, _Container > :: difference_type
    operator - ( const __normal_iterator < _Iterator, _Container > & __lhs,
       const __normal_iterator < _Iterator, _Container > & __rhs )
    { return __lhs . base ( ) - __rhs . base ( ); }
# 819 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
template < typename _Iterator, typename _Container >
    inline __normal_iterator < _Iterator, _Container >
    operator + ( typename __normal_iterator < _Iterator, _Container > :: difference_type
       __n, const __normal_iterator < _Iterator, _Container > & __i )
    { return __normal_iterator < _Iterator, _Container > ( __i . base ( ) + __n ); }
# 825 "/usr/include/c++/4.2.1/bits/stl_iterator.h" 3
}
# 43 "/usr/include/_locale.h" 3
struct lconv {
# 44 "/usr/include/_locale.h" 3
char *decimal_point;
# 45 "/usr/include/_locale.h" 3
char *thousands_sep;
# 46 "/usr/include/_locale.h" 3
char *grouping;
# 47 "/usr/include/_locale.h" 3
char *int_curr_symbol;
# 48 "/usr/include/_locale.h" 3
char *currency_symbol;
# 49 "/usr/include/_locale.h" 3
char *mon_decimal_point;
# 50 "/usr/include/_locale.h" 3
char *mon_thousands_sep;
# 51 "/usr/include/_locale.h" 3
char *mon_grouping;
# 52 "/usr/include/_locale.h" 3
char *positive_sign;
# 53 "/usr/include/_locale.h" 3
char *negative_sign;
# 54 "/usr/include/_locale.h" 3
char int_frac_digits;
# 55 "/usr/include/_locale.h" 3
char frac_digits;
# 56 "/usr/include/_locale.h" 3
char p_cs_precedes;
# 57 "/usr/include/_locale.h" 3
char p_sep_by_space;
# 58 "/usr/include/_locale.h" 3
char n_cs_precedes;
# 59 "/usr/include/_locale.h" 3
char n_sep_by_space;
# 60 "/usr/include/_locale.h" 3
char p_sign_posn;
# 61 "/usr/include/_locale.h" 3
char n_sign_posn;
# 62 "/usr/include/_locale.h" 3
char int_p_cs_precedes;
# 63 "/usr/include/_locale.h" 3
char int_n_cs_precedes;
# 64 "/usr/include/_locale.h" 3
char int_p_sep_by_space;
# 65 "/usr/include/_locale.h" 3
char int_n_sep_by_space;
# 66 "/usr/include/_locale.h" 3
char int_p_sign_posn;
# 67 "/usr/include/_locale.h" 3
char int_n_sign_posn;
# 68 "/usr/include/_locale.h" 3
};
# 75 "/usr/include/_locale.h" 3
extern "C" lconv *localeconv();
# 53 "/usr/include/locale.h" 3
extern "C" char *setlocale(int, const char *);
# 57 "/usr/include/c++/4.2.1/clocale" 3
namespace std {
# 59 "/usr/include/c++/4.2.1/clocale" 3
using ::lconv;
# 60 "/usr/include/c++/4.2.1/clocale" 3
using ::setlocale;
# 61 "/usr/include/c++/4.2.1/clocale" 3
using ::localeconv;
# 63 "/usr/include/c++/4.2.1/clocale" 3
}
# 78 "/usr/include/c++/4.2.1/cstring" 3
namespace std {
# 80 "/usr/include/c++/4.2.1/cstring" 3
using ::memcpy;
# 81 "/usr/include/c++/4.2.1/cstring" 3
using ::memmove;
# 82 "/usr/include/c++/4.2.1/cstring" 3
using ::strcpy;
# 83 "/usr/include/c++/4.2.1/cstring" 3
using ::strncpy;
# 84 "/usr/include/c++/4.2.1/cstring" 3
using ::strcat;
# 85 "/usr/include/c++/4.2.1/cstring" 3
using ::strncat;
# 86 "/usr/include/c++/4.2.1/cstring" 3
using ::memcmp;
# 87 "/usr/include/c++/4.2.1/cstring" 3
using ::strcmp;
# 88 "/usr/include/c++/4.2.1/cstring" 3
using ::strcoll;
# 89 "/usr/include/c++/4.2.1/cstring" 3
using ::strncmp;
# 90 "/usr/include/c++/4.2.1/cstring" 3
using ::strxfrm;
# 91 "/usr/include/c++/4.2.1/cstring" 3
using ::strcspn;
# 92 "/usr/include/c++/4.2.1/cstring" 3
using ::strspn;
# 93 "/usr/include/c++/4.2.1/cstring" 3
using ::strtok;
# 94 "/usr/include/c++/4.2.1/cstring" 3
using ::memset;
# 95 "/usr/include/c++/4.2.1/cstring" 3
using ::strerror;
# 96 "/usr/include/c++/4.2.1/cstring" 3
using ::strlen;
# 98 "/usr/include/c++/4.2.1/cstring" 3
using ::memchr;
# 101 "/usr/include/c++/4.2.1/cstring" 3
inline void *memchr(void *__p, int __c, size_t __n)
# 102 "/usr/include/c++/4.2.1/cstring" 3
{ return memchr(const_cast< const void *>(__p), __c, __n); }
# 104 "/usr/include/c++/4.2.1/cstring" 3
using ::strchr;
# 107 "/usr/include/c++/4.2.1/cstring" 3
inline char *strchr(char *__s1, int __n)
# 108 "/usr/include/c++/4.2.1/cstring" 3
{ return __builtin_strchr(const_cast< const char *>(__s1), __n); }
# 110 "/usr/include/c++/4.2.1/cstring" 3
using ::strpbrk;
# 113 "/usr/include/c++/4.2.1/cstring" 3
inline char *strpbrk(char *__s1, const char *__s2)
# 114 "/usr/include/c++/4.2.1/cstring" 3
{ return __builtin_strpbrk(const_cast< const char *>(__s1), __s2); }
# 116 "/usr/include/c++/4.2.1/cstring" 3
using ::strrchr;
# 119 "/usr/include/c++/4.2.1/cstring" 3
inline char *strrchr(char *__s1, int __n)
# 120 "/usr/include/c++/4.2.1/cstring" 3
{ return __builtin_strrchr(const_cast< const char *>(__s1), __n); }
# 122 "/usr/include/c++/4.2.1/cstring" 3
using ::strstr;
# 125 "/usr/include/c++/4.2.1/cstring" 3
inline char *strstr(char *__s1, const char *__s2)
# 126 "/usr/include/c++/4.2.1/cstring" 3
{ return __builtin_strstr(const_cast< const char *>(__s1), __s2); }
# 128 "/usr/include/c++/4.2.1/cstring" 3
}
# 70 "/usr/include/stdio.h" 3
typedef __darwin_va_list va_list;
# 87 "/usr/include/stdio.h" 3
typedef __darwin_off_t fpos_t;
# 98 "/usr/include/stdio.h" 3
struct __sbuf {
# 99 "/usr/include/stdio.h" 3
unsigned char *_base;
# 100 "/usr/include/stdio.h" 3
int _size;
# 101 "/usr/include/stdio.h" 3
};
# 104 "/usr/include/stdio.h" 3
struct __sFILEX;
# 163 "/usr/include/stdio.h" 3
typedef
# 132 "/usr/include/stdio.h" 3
struct __sFILE {
# 133 "/usr/include/stdio.h" 3
unsigned char *_p;
# 134 "/usr/include/stdio.h" 3
int _r;
# 135 "/usr/include/stdio.h" 3
int _w;
# 136 "/usr/include/stdio.h" 3
short _flags;
# 137 "/usr/include/stdio.h" 3
short _file;
# 138 "/usr/include/stdio.h" 3
__sbuf _bf;
# 139 "/usr/include/stdio.h" 3
int _lbfsize;
# 142 "/usr/include/stdio.h" 3
void *_cookie;
# 143 "/usr/include/stdio.h" 3
int (*_close)(void *);
# 144 "/usr/include/stdio.h" 3
int (*_read)(void *, char *, int);
# 145 "/usr/include/stdio.h" 3
fpos_t (*_seek)(void *, fpos_t, int);
# 146 "/usr/include/stdio.h" 3
int (*_write)(void *, const char *, int);
# 149 "/usr/include/stdio.h" 3
__sbuf _ub;
# 150 "/usr/include/stdio.h" 3
__sFILEX *_extra;
# 151 "/usr/include/stdio.h" 3
int _ur;
# 154 "/usr/include/stdio.h" 3
unsigned char _ubuf[3];
# 155 "/usr/include/stdio.h" 3
unsigned char _nbuf[1];
# 158 "/usr/include/stdio.h" 3
__sbuf _lb;
# 161 "/usr/include/stdio.h" 3
int _blksize;
# 162 "/usr/include/stdio.h" 3
fpos_t _offset;
# 163 "/usr/include/stdio.h" 3
} FILE;
# 167 "/usr/include/stdio.h" 3
extern "C" { extern FILE *__stdinp; }
# 168 "/usr/include/stdio.h" 3
extern "C" { extern FILE *__stdoutp; }
# 169 "/usr/include/stdio.h" 3
extern "C" { extern FILE *__stderrp; }
# 249 "/usr/include/stdio.h" 3
extern "C" void clearerr(FILE *);
# 250 "/usr/include/stdio.h" 3
extern "C" int fclose(FILE *);
# 251 "/usr/include/stdio.h" 3
extern "C" int feof(FILE *);
# 252 "/usr/include/stdio.h" 3
extern "C" int ferror(FILE *);
# 253 "/usr/include/stdio.h" 3
extern "C" int fflush(FILE *);
# 254 "/usr/include/stdio.h" 3
extern "C" int fgetc(FILE *);
# 255 "/usr/include/stdio.h" 3
extern "C" int fgetpos(FILE *, fpos_t *);
# 256 "/usr/include/stdio.h" 3
extern "C" char *fgets(char *, int, FILE *);
# 260 "/usr/include/stdio.h" 3
extern "C" FILE *fopen(const char *, const char *) __asm__("_fopen$UNIX2003");
# 262 "/usr/include/stdio.h" 3
extern "C" int fprintf(FILE *, const char *, ...);
# 263 "/usr/include/stdio.h" 3
extern "C" int fputc(int, FILE *);
# 264 "/usr/include/stdio.h" 3
extern "C" int fputs(const char *, FILE *) __asm__("_fputs$UNIX2003");
# 265 "/usr/include/stdio.h" 3
extern "C" size_t fread(void *, size_t, size_t, FILE *);
# 266 "/usr/include/stdio.h" 3
extern "C" FILE *freopen(const char *, const char *, FILE *) __asm__("_freopen$UNIX2003");
# 268 "/usr/include/stdio.h" 3
extern "C" int fscanf(FILE *, const char *, ...);
# 269 "/usr/include/stdio.h" 3
extern "C" int fseek(FILE *, long, int);
# 270 "/usr/include/stdio.h" 3
extern "C" int fsetpos(FILE *, const fpos_t *);
# 271 "/usr/include/stdio.h" 3
extern "C" long ftell(FILE *);
# 272 "/usr/include/stdio.h" 3
extern "C" size_t fwrite(const void *, size_t, size_t, FILE *) __asm__("_fwrite$UNIX2003");
# 273 "/usr/include/stdio.h" 3
extern "C" int getc(FILE *);
# 274 "/usr/include/stdio.h" 3
extern "C" int getchar();
# 275 "/usr/include/stdio.h" 3
extern "C" char *gets(char *);
# 277 "/usr/include/stdio.h" 3
extern "C" { extern const int sys_nerr; }
# 278 "/usr/include/stdio.h" 3
extern "C" { extern const char *const sys_errlist[]; }
# 280 "/usr/include/stdio.h" 3
extern "C" void perror(const char *);
# 281 "/usr/include/stdio.h" 3
extern "C" int printf(const char *, ...);
# 282 "/usr/include/stdio.h" 3
extern "C" int putc(int, FILE *);
# 283 "/usr/include/stdio.h" 3
extern "C" int putchar(int);
# 284 "/usr/include/stdio.h" 3
extern "C" int puts(const char *);
# 285 "/usr/include/stdio.h" 3
extern "C" int remove(const char *);
# 286 "/usr/include/stdio.h" 3
extern "C" int rename(const char *, const char *);
# 287 "/usr/include/stdio.h" 3
extern "C" void rewind(FILE *);
# 288 "/usr/include/stdio.h" 3
extern "C" int scanf(const char *, ...);
# 289 "/usr/include/stdio.h" 3
extern "C" void setbuf(FILE *, char *);
# 290 "/usr/include/stdio.h" 3
extern "C" int setvbuf(FILE *, char *, int, size_t);
# 291 "/usr/include/stdio.h" 3
extern "C" int sprintf(char *, const char *, ...);
# 292 "/usr/include/stdio.h" 3
extern "C" int sscanf(const char *, const char *, ...);
# 293 "/usr/include/stdio.h" 3
extern "C" FILE *tmpfile();
# 294 "/usr/include/stdio.h" 3
extern "C" char *tmpnam(char *);
# 295 "/usr/include/stdio.h" 3
extern "C" int ungetc(int, FILE *);
# 296 "/usr/include/stdio.h" 3
extern "C" int vfprintf(FILE *, const char *, va_list);
# 297 "/usr/include/stdio.h" 3
extern "C" int vprintf(const char *, va_list);
# 298 "/usr/include/stdio.h" 3
extern "C" int vsprintf(char *, const char *, va_list);
# 300 "/usr/include/stdio.h" 3
extern "C" int asprintf(char **, const char *, ...);
# 301 "/usr/include/stdio.h" 3
extern "C" int vasprintf(char **, const char *, va_list);
# 312 "/usr/include/stdio.h" 3
extern "C" char *ctermid(char *);
# 314 "/usr/include/stdio.h" 3
extern "C" char *ctermid_r(char *);
# 319 "/usr/include/stdio.h" 3
extern "C" FILE *fdopen(int, const char *) __asm__("_fdopen$UNIX2003");
# 322 "/usr/include/stdio.h" 3
extern "C" char *fgetln(FILE *, size_t *);
# 324 "/usr/include/stdio.h" 3
extern "C" int fileno(FILE *);
# 325 "/usr/include/stdio.h" 3
extern "C" void flockfile(FILE *);
# 328 "/usr/include/stdio.h" 3
extern "C" const char *fmtcheck(const char *, const char *);
# 329 "/usr/include/stdio.h" 3
extern "C" int fpurge(FILE *);
# 331 "/usr/include/stdio.h" 3
extern "C" int fseeko(FILE *, off_t, int);
# 332 "/usr/include/stdio.h" 3
extern "C" off_t ftello(FILE *);
# 333 "/usr/include/stdio.h" 3
extern "C" int ftrylockfile(FILE *);
# 334 "/usr/include/stdio.h" 3
extern "C" void funlockfile(FILE *);
# 335 "/usr/include/stdio.h" 3
extern "C" int getc_unlocked(FILE *);
# 336 "/usr/include/stdio.h" 3
extern "C" int getchar_unlocked();
# 338 "/usr/include/stdio.h" 3
extern "C" int getw(FILE *);
# 340 "/usr/include/stdio.h" 3
extern "C" int pclose(FILE *);
# 344 "/usr/include/stdio.h" 3
extern "C" FILE *popen(const char *, const char *) __asm__("_popen$UNIX2003");
# 346 "/usr/include/stdio.h" 3
extern "C" int putc_unlocked(int, FILE *);
# 347 "/usr/include/stdio.h" 3
extern "C" int putchar_unlocked(int);
# 349 "/usr/include/stdio.h" 3
extern "C" int putw(int, FILE *);
# 350 "/usr/include/stdio.h" 3
extern "C" void setbuffer(FILE *, char *, int);
# 351 "/usr/include/stdio.h" 3
extern "C" int setlinebuf(FILE *);
# 353 "/usr/include/stdio.h" 3
extern "C" int snprintf(char *, size_t, const char *, ...);
# 354 "/usr/include/stdio.h" 3
extern "C" char *tempnam(const char *, const char *) __asm__("_tempnam$UNIX2003");
# 355 "/usr/include/stdio.h" 3
extern "C" int vfscanf(FILE *, const char *, va_list);
# 356 "/usr/include/stdio.h" 3
extern "C" int vscanf(const char *, va_list);
# 357 "/usr/include/stdio.h" 3
extern "C" int vsnprintf(char *, size_t, const char *, va_list);
# 358 "/usr/include/stdio.h" 3
extern "C" int vsscanf(const char *, const char *, va_list);
# 360 "/usr/include/stdio.h" 3
extern "C" FILE *zopen(const char *, const char *, int);
# 369 "/usr/include/stdio.h" 3
extern "C" FILE *funopen(const void *, int (*)(void *, char *, int), int (*)(void *, const char *, int), fpos_t (*)(void *, fpos_t, int), int (*)(void *));
# 384 "/usr/include/stdio.h" 3
extern "C" int __srget(FILE *);
# 385 "/usr/include/stdio.h" 3
extern "C" int __svfscanf(FILE *, const char *, va_list);
# 386 "/usr/include/stdio.h" 3
extern "C" int __swbuf(int, FILE *);
# 395 "/usr/include/stdio.h" 3
static inline int __sputc(int _c, FILE *_p) {
# 396 "/usr/include/stdio.h" 3
if (((--(_p->_w)) >= 0) || (((_p->_w) >= (_p->_lbfsize)) && (((char)_c) != ('\n')))) {
# 397 "/usr/include/stdio.h" 3
return (*((_p->_p)++)) = _c; } else {
# 399 "/usr/include/stdio.h" 3
return __swbuf(_c, _p); }
# 400 "/usr/include/stdio.h" 3
}
# 98 "/usr/include/c++/4.2.1/cstdio" 3
namespace std {
# 100 "/usr/include/c++/4.2.1/cstdio" 3
using ::FILE;
# 101 "/usr/include/c++/4.2.1/cstdio" 3
using ::fpos_t;
# 103 "/usr/include/c++/4.2.1/cstdio" 3
using ::clearerr;
# 104 "/usr/include/c++/4.2.1/cstdio" 3
using ::fclose;
# 105 "/usr/include/c++/4.2.1/cstdio" 3
using ::feof;
# 106 "/usr/include/c++/4.2.1/cstdio" 3
using ::ferror;
# 107 "/usr/include/c++/4.2.1/cstdio" 3
using ::fflush;
# 108 "/usr/include/c++/4.2.1/cstdio" 3
using ::fgetc;
# 109 "/usr/include/c++/4.2.1/cstdio" 3
using ::fgetpos;
# 110 "/usr/include/c++/4.2.1/cstdio" 3
using ::fgets;
# 111 "/usr/include/c++/4.2.1/cstdio" 3
using ::fopen;
# 112 "/usr/include/c++/4.2.1/cstdio" 3
using ::fprintf;
# 113 "/usr/include/c++/4.2.1/cstdio" 3
using ::fputc;
# 114 "/usr/include/c++/4.2.1/cstdio" 3
using ::fputs;
# 115 "/usr/include/c++/4.2.1/cstdio" 3
using ::fread;
# 116 "/usr/include/c++/4.2.1/cstdio" 3
using ::freopen;
# 117 "/usr/include/c++/4.2.1/cstdio" 3
using ::fscanf;
# 118 "/usr/include/c++/4.2.1/cstdio" 3
using ::fseek;
# 119 "/usr/include/c++/4.2.1/cstdio" 3
using ::fsetpos;
# 120 "/usr/include/c++/4.2.1/cstdio" 3
using ::ftell;
# 121 "/usr/include/c++/4.2.1/cstdio" 3
using ::fwrite;
# 122 "/usr/include/c++/4.2.1/cstdio" 3
using ::getc;
# 123 "/usr/include/c++/4.2.1/cstdio" 3
using ::getchar;
# 124 "/usr/include/c++/4.2.1/cstdio" 3
using ::gets;
# 125 "/usr/include/c++/4.2.1/cstdio" 3
using ::perror;
# 126 "/usr/include/c++/4.2.1/cstdio" 3
using ::printf;
# 127 "/usr/include/c++/4.2.1/cstdio" 3
using ::putc;
# 128 "/usr/include/c++/4.2.1/cstdio" 3
using ::putchar;
# 129 "/usr/include/c++/4.2.1/cstdio" 3
using ::puts;
# 130 "/usr/include/c++/4.2.1/cstdio" 3
using ::remove;
# 131 "/usr/include/c++/4.2.1/cstdio" 3
using ::rename;
# 132 "/usr/include/c++/4.2.1/cstdio" 3
using ::rewind;
# 133 "/usr/include/c++/4.2.1/cstdio" 3
using ::scanf;
# 134 "/usr/include/c++/4.2.1/cstdio" 3
using ::setbuf;
# 135 "/usr/include/c++/4.2.1/cstdio" 3
using ::setvbuf;
# 136 "/usr/include/c++/4.2.1/cstdio" 3
using ::sprintf;
# 137 "/usr/include/c++/4.2.1/cstdio" 3
using ::sscanf;
# 138 "/usr/include/c++/4.2.1/cstdio" 3
using ::tmpfile;
# 139 "/usr/include/c++/4.2.1/cstdio" 3
using ::tmpnam;
# 140 "/usr/include/c++/4.2.1/cstdio" 3
using ::ungetc;
# 141 "/usr/include/c++/4.2.1/cstdio" 3
using ::vfprintf;
# 142 "/usr/include/c++/4.2.1/cstdio" 3
using ::vprintf;
# 143 "/usr/include/c++/4.2.1/cstdio" 3
using ::vsprintf;
# 145 "/usr/include/c++/4.2.1/cstdio" 3
}
# 155 "/usr/include/c++/4.2.1/cstdio" 3
namespace __gnu_cxx {
# 170 "/usr/include/c++/4.2.1/cstdio" 3
using ::snprintf;
# 171 "/usr/include/c++/4.2.1/cstdio" 3
using ::vfscanf;
# 172 "/usr/include/c++/4.2.1/cstdio" 3
using ::vscanf;
# 173 "/usr/include/c++/4.2.1/cstdio" 3
using ::vsnprintf;
# 174 "/usr/include/c++/4.2.1/cstdio" 3
using ::vsscanf;
# 177 "/usr/include/c++/4.2.1/cstdio" 3
}
# 179 "/usr/include/c++/4.2.1/cstdio" 3
namespace std {
# 181 "/usr/include/c++/4.2.1/cstdio" 3
using __gnu_cxx::snprintf;
# 182 "/usr/include/c++/4.2.1/cstdio" 3
using __gnu_cxx::vfscanf;
# 183 "/usr/include/c++/4.2.1/cstdio" 3
using __gnu_cxx::vscanf;
# 184 "/usr/include/c++/4.2.1/cstdio" 3
using __gnu_cxx::vsnprintf;
# 185 "/usr/include/c++/4.2.1/cstdio" 3
using __gnu_cxx::vsscanf;
# 187 "/usr/include/c++/4.2.1/cstdio" 3
}
# 43 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list;
# 58 "/usr/include/c++/4.2.1/cstdarg" 3
namespace std {
# 60 "/usr/include/c++/4.2.1/cstdarg" 3
using ::va_list;
# 62 "/usr/include/c++/4.2.1/cstdarg" 3
}
# 54 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
namespace std {
# 56 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
typedef int *__c_locale;
# 63 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
inline int __convert_from_v(const __c_locale &, char *__out, const int
# 64 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
__size __attribute__((__unused__)), const char *
# 65 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
__fmt, ...)
# 66 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
{
# 67 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
char *__old = std::setlocale(4, __null);
# 68 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
char *__sav = (__null);
# 69 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
if (std::strcmp(__old, "C"))
# 70 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
{
# 71 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
__sav = (new char [std::strlen(__old) + (1)]);
# 72 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
std::strcpy(__sav, __old);
# 73 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
std::setlocale(4, "C");
# 74 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
}
# 76 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
va_list __args;
# 77 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
__builtin_va_start(__args,__fmt);
# 80 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
const int __ret = std::vsnprintf(__out, __size, __fmt, __args);
# 85 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
__builtin_va_end(__args);
# 87 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
if (__sav)
# 88 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
{
# 89 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
std::setlocale(4, __sav);
# 90 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
delete [] __sav;
# 91 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
}
# 92 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
return __ret;
# 93 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
}
# 95 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++locale.h" 3
}
# 35 "/usr/include/sched.h" 3
extern "C" { struct __attribute__((visibility("default"))) sched_param { int sched_priority; char __opaque[4]; }; }
# 38 "/usr/include/sched.h" 3
extern "C" int sched_yield() __attribute__((visibility("default")));
# 39 "/usr/include/sched.h" 3
extern "C" int sched_get_priority_min(int) __attribute__((visibility("default")));
# 40 "/usr/include/sched.h" 3
extern "C" int sched_get_priority_max(int) __attribute__((visibility("default")));
# 69 "/usr/include/pthread.h" 3
typedef __darwin_pthread_cond_t pthread_cond_t;
# 74 "/usr/include/pthread.h" 3
typedef __darwin_pthread_condattr_t pthread_condattr_t;
# 79 "/usr/include/pthread.h" 3
typedef __darwin_pthread_key_t pthread_key_t;
# 84 "/usr/include/pthread.h" 3
typedef __darwin_pthread_mutex_t pthread_mutex_t;
# 89 "/usr/include/pthread.h" 3
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
# 94 "/usr/include/pthread.h" 3
typedef __darwin_pthread_once_t pthread_once_t;
# 99 "/usr/include/pthread.h" 3
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
# 104 "/usr/include/pthread.h" 3
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
# 109 "/usr/include/pthread.h" 3
typedef __darwin_pthread_t pthread_t;
# 116 "/usr/include/pthread.h" 3
typedef __darwin_mach_port_t mach_port_t;
# 244 "/usr/include/pthread.h" 3
extern "C" int pthread_atfork(void (*)(void), void (*)(void), void (*)(void)) __attribute__((visibility("default")));
# 246 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_destroy(pthread_attr_t *) __attribute__((visibility("default")));
# 247 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getdetachstate(const pthread_attr_t *, int *) __attribute__((visibility("default")));
# 249 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getguardsize(const pthread_attr_t *, size_t *) __attribute__((visibility("default")));
# 251 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getinheritsched(const pthread_attr_t *, int *) __attribute__((visibility("default")));
# 253 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getschedparam(const pthread_attr_t *, sched_param *) __attribute__((visibility("default")));
# 255 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getschedpolicy(const pthread_attr_t *, int *) __attribute__((visibility("default")));
# 257 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getscope(const pthread_attr_t *, int *) __attribute__((visibility("default")));
# 258 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getstack(const pthread_attr_t *, void **, size_t *) __attribute__((visibility("default")));
# 260 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getstackaddr(const pthread_attr_t *, void **) __attribute__((visibility("default")));
# 262 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_getstacksize(const pthread_attr_t *, size_t *) __attribute__((visibility("default")));
# 264 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_init(pthread_attr_t *) __attribute__((visibility("default")));
# 265 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setdetachstate(pthread_attr_t *, int) __attribute__((visibility("default")));
# 267 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setguardsize(pthread_attr_t *, size_t) __attribute__((visibility("default")));
# 268 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setinheritsched(pthread_attr_t *, int) __attribute__((visibility("default")));
# 270 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setschedparam(pthread_attr_t *, const sched_param *) __attribute__((visibility("default")));
# 272 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setschedpolicy(pthread_attr_t *, int) __attribute__((visibility("default")));
# 274 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setscope(pthread_attr_t *, int) __attribute__((visibility("default")));
# 275 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setstack(pthread_attr_t *, void *, size_t) __attribute__((visibility("default")));
# 277 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setstackaddr(pthread_attr_t *, void *) __attribute__((visibility("default")));
# 279 "/usr/include/pthread.h" 3
extern "C" int pthread_attr_setstacksize(pthread_attr_t *, size_t) __attribute__((visibility("default")));
# 280 "/usr/include/pthread.h" 3
extern "C" int pthread_cancel(pthread_t) __asm__("_pthread_cancel$UNIX2003") __attribute__((visibility("default")));
# 282 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_broadcast(pthread_cond_t *) __attribute__((visibility("default")));
# 283 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_destroy(pthread_cond_t *) __attribute__((visibility("default")));
# 284 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_init(pthread_cond_t *, const pthread_condattr_t *) __asm__("_pthread_cond_init$UNIX2003") __attribute__((visibility("default")));
# 286 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_signal(pthread_cond_t *) __attribute__((visibility("default")));
# 287 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_timedwait(pthread_cond_t *, pthread_mutex_t *, const timespec *) __asm__("_pthread_cond_timedwait$UNIX2003") __attribute__((visibility("default")));
# 290 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *) __asm__("_pthread_cond_wait$UNIX2003") __attribute__((visibility("default")));
# 292 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_destroy(pthread_condattr_t *) __attribute__((visibility("default")));
# 293 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_init(pthread_condattr_t *) __attribute__((visibility("default")));
# 294 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_getpshared(const pthread_condattr_t *, int *) __attribute__((visibility("default")));
# 296 "/usr/include/pthread.h" 3
extern "C" int pthread_condattr_setpshared(pthread_condattr_t *, int) __attribute__((visibility("default")));
# 298 "/usr/include/pthread.h" 3
extern "C" int pthread_create(pthread_t *, const pthread_attr_t *, void *(*)(void *), void *) __attribute__((visibility("default")));
# 302 "/usr/include/pthread.h" 3
extern "C" int pthread_detach(pthread_t) __attribute__((visibility("default")));
# 303 "/usr/include/pthread.h" 3
extern "C" int pthread_equal(pthread_t, pthread_t) __attribute__((visibility("default")));
# 305 "/usr/include/pthread.h" 3
extern "C" void pthread_exit(void *) __attribute__((__noreturn__)) __attribute__((visibility("default")));
# 306 "/usr/include/pthread.h" 3
extern "C" int pthread_getconcurrency() __attribute__((visibility("default")));
# 307 "/usr/include/pthread.h" 3
extern "C" int pthread_getschedparam(pthread_t, int *, sched_param *) __attribute__((visibility("default")));
# 308 "/usr/include/pthread.h" 3
extern "C" void *pthread_getspecific(pthread_key_t) __attribute__((visibility("default")));
# 309 "/usr/include/pthread.h" 3
extern "C" int pthread_join(pthread_t, void **) __asm__("_pthread_join$UNIX2003") __attribute__((visibility("default")));
# 310 "/usr/include/pthread.h" 3
extern "C" int pthread_key_create(pthread_key_t *, void (*)(void *)) __attribute__((visibility("default")));
# 311 "/usr/include/pthread.h" 3
extern "C" int pthread_key_delete(pthread_key_t) __attribute__((visibility("default")));
# 312 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_destroy(pthread_mutex_t *) __attribute__((visibility("default")));
# 313 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_getprioceiling(const pthread_mutex_t *, int *) __attribute__((visibility("default")));
# 314 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *) __attribute__((visibility("default")));
# 315 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_lock(pthread_mutex_t *) __attribute__((visibility("default")));
# 316 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_setprioceiling(pthread_mutex_t *, int, int *) __attribute__((visibility("default")));
# 317 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_trylock(pthread_mutex_t *) __attribute__((visibility("default")));
# 318 "/usr/include/pthread.h" 3
extern "C" int pthread_mutex_unlock(pthread_mutex_t *) __attribute__((visibility("default")));
# 319 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_destroy(pthread_mutexattr_t *) __asm__("_pthread_mutexattr_destroy$UNIX2003") __attribute__((visibility("default")));
# 320 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *, int *) __attribute__((visibility("default")));
# 321 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *, int *) __attribute__((visibility("default")));
# 322 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_getpshared(const pthread_mutexattr_t *, int *) __attribute__((visibility("default")));
# 323 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_gettype(const pthread_mutexattr_t *, int *) __attribute__((visibility("default")));
# 324 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_init(pthread_mutexattr_t *) __attribute__((visibility("default")));
# 325 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *, int) __attribute__((visibility("default")));
# 326 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_setprotocol(pthread_mutexattr_t *, int) __attribute__((visibility("default")));
# 327 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_setpshared(pthread_mutexattr_t *, int) __attribute__((visibility("default")));
# 328 "/usr/include/pthread.h" 3
extern "C" int pthread_mutexattr_settype(pthread_mutexattr_t *, int) __attribute__((visibility("default")));
# 329 "/usr/include/pthread.h" 3
extern "C" int pthread_once(pthread_once_t *, void (*)(void)) __attribute__((visibility("default")));
# 330 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_destroy(pthread_rwlock_t *) __asm__("_pthread_rwlock_destroy$UNIX2003") __attribute__((visibility("default")));
# 331 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_init(pthread_rwlock_t *, const pthread_rwlockattr_t *) __asm__("_pthread_rwlock_init$UNIX2003") __attribute__((visibility("default")));
# 332 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_rdlock(pthread_rwlock_t *) __asm__("_pthread_rwlock_rdlock$UNIX2003") __attribute__((visibility("default")));
# 333 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_tryrdlock(pthread_rwlock_t *) __asm__("_pthread_rwlock_tryrdlock$UNIX2003") __attribute__((visibility("default")));
# 334 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_trywrlock(pthread_rwlock_t *) __asm__("_pthread_rwlock_trywrlock$UNIX2003") __attribute__((visibility("default")));
# 335 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_wrlock(pthread_rwlock_t *) __asm__("_pthread_rwlock_wrlock$UNIX2003") __attribute__((visibility("default")));
# 336 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlock_unlock(pthread_rwlock_t *) __asm__("_pthread_rwlock_unlock$UNIX2003") __attribute__((visibility("default")));
# 337 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_destroy(pthread_rwlockattr_t *) __attribute__((visibility("default")));
# 338 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *, int *) __attribute__((visibility("default")));
# 340 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_init(pthread_rwlockattr_t *) __attribute__((visibility("default")));
# 341 "/usr/include/pthread.h" 3
extern "C" int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *, int) __attribute__((visibility("default")));
# 343 "/usr/include/pthread.h" 3
extern "C" pthread_t pthread_self() __attribute__((visibility("default")));
# 345 "/usr/include/pthread.h" 3
extern "C" int pthread_setcancelstate(int, int *) __asm__("_pthread_setcancelstate$UNIX2003") __attribute__((visibility("default")));
# 346 "/usr/include/pthread.h" 3
extern "C" int pthread_setcanceltype(int, int *) __asm__("_pthread_setcanceltype$UNIX2003") __attribute__((visibility("default")));
# 347 "/usr/include/pthread.h" 3
extern "C" int pthread_setconcurrency(int) __attribute__((visibility("default")));
# 348 "/usr/include/pthread.h" 3
extern "C" int pthread_setschedparam(pthread_t, int, const sched_param *) __attribute__((visibility("default")));
# 351 "/usr/include/pthread.h" 3
extern "C" int pthread_setspecific(pthread_key_t, const void *) __attribute__((visibility("default")));
# 353 "/usr/include/pthread.h" 3
extern "C" void pthread_testcancel() __asm__("_pthread_testcancel$UNIX2003") __attribute__((visibility("default")));
# 357 "/usr/include/pthread.h" 3
extern "C" int pthread_is_threaded_np() __attribute__((visibility("default")));
# 360 "/usr/include/pthread.h" 3
extern "C" int pthread_threadid_np(pthread_t, __uint64_t *) __attribute__((visibility("default")));
# 364 "/usr/include/pthread.h" 3
extern "C" int pthread_getname_np(pthread_t, char *, size_t) __attribute__((visibility("default")));
# 365 "/usr/include/pthread.h" 3
extern "C" int pthread_setname_np(const char *) __attribute__((visibility("default")));
# 367 "/usr/include/pthread.h" 3
extern "C" int pthread_main_np() __attribute__((visibility("default")));
# 370 "/usr/include/pthread.h" 3
extern "C" mach_port_t pthread_mach_thread_np(pthread_t) __attribute__((visibility("default")));
# 371 "/usr/include/pthread.h" 3
extern "C" size_t pthread_get_stacksize_np(pthread_t) __attribute__((visibility("default")));
# 372 "/usr/include/pthread.h" 3
extern "C" void *pthread_get_stackaddr_np(pthread_t) __attribute__((visibility("default")));
# 375 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_signal_thread_np(pthread_cond_t *, pthread_t) __attribute__((visibility("default")));
# 378 "/usr/include/pthread.h" 3
extern "C" int pthread_cond_timedwait_relative_np(pthread_cond_t *, pthread_mutex_t *, const timespec *) __attribute__((visibility("default")));
# 383 "/usr/include/pthread.h" 3
extern "C" int pthread_create_suspended_np(pthread_t *, const pthread_attr_t *, void *(*)(void *), void *) __attribute__((visibility("default")));
# 387 "/usr/include/pthread.h" 3
extern "C" int pthread_kill(pthread_t, int) __attribute__((visibility("default")));
# 389 "/usr/include/pthread.h" 3
extern "C" pthread_t pthread_from_mach_thread_np(mach_port_t) __attribute__((visibility("default")));
# 391 "/usr/include/pthread.h" 3
extern "C" int pthread_sigmask(int, const sigset_t *, sigset_t *) __asm__("_pthread_sigmask$UNIX2003") __attribute__((visibility("default")));
# 392 "/usr/include/pthread.h" 3
extern "C" void pthread_yield_np() __attribute__((visibility("default")));
# 46 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
typedef pthread_key_t __gthread_key_t;
# 47 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
typedef pthread_once_t __gthread_once_t;
# 48 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
typedef pthread_mutex_t __gthread_mutex_t;
# 49 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
typedef pthread_mutex_t __gthread_recursive_mutex_t;
# 215 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_active_p()
# 216 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
{
# 217 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return 1;
# 218 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
}
# 572 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_once(__gthread_once_t *once, void (*func)(void))
# 573 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
{
# 574 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 575 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return pthread_once(once, func); } else {
# 577 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return -1; }
# 578 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
}
# 581 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_key_create(__gthread_key_t *key, void (*dtor)(void *))
# 582 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
{
# 583 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return pthread_key_create(key, dtor);
# 584 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
}
# 587 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_key_delete(__gthread_key_t key)
# 588 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
{
# 589 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return pthread_key_delete(key);
# 590 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
}
# 593 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) void *__gthread_getspecific(__gthread_key_t key)
# 594 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
{
# 595 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return pthread_getspecific(key);
# 596 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
}
# 599 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_setspecific(__gthread_key_t key, const void *ptr)
# 600 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
{
# 601 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return pthread_setspecific(key, ptr);
# 602 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
}
# 605 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_mutex_lock(__gthread_mutex_t *mutex)
# 606 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
{
# 607 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 608 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return pthread_mutex_lock(mutex); } else {
# 610 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return 0; }
# 611 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
}
# 614 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_mutex_trylock(__gthread_mutex_t *mutex)
# 615 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
{
# 616 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 617 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return pthread_mutex_trylock(mutex); } else {
# 619 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return 0; }
# 620 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
}
# 623 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_mutex_unlock(__gthread_mutex_t *mutex)
# 624 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
{
# 625 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
if (__gthread_active_p()) {
# 626 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return pthread_mutex_unlock(mutex); } else {
# 628 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return 0; }
# 629 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
}
# 633 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_recursive_mutex_init_function(__gthread_recursive_mutex_t *mutex)
# 634 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
{
# 635 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
if (__gthread_active_p())
# 636 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
{
# 637 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
pthread_mutexattr_t attr;
# 638 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
int r;
# 640 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
r = pthread_mutexattr_init(&attr);
# 641 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
if (!(r)) {
# 642 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
r = pthread_mutexattr_settype(&attr, 2); }
# 643 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
if (!(r)) {
# 644 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
r = pthread_mutex_init(mutex, &attr); }
# 645 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
if (!(r)) {
# 646 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
r = pthread_mutexattr_destroy(&attr); }
# 647 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return r;
# 648 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
}
# 649 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return 0;
# 650 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
}
# 654 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *mutex)
# 655 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
{
# 656 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return __gthread_mutex_lock(mutex);
# 657 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
}
# 660 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *mutex)
# 661 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
{
# 662 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return __gthread_mutex_trylock(mutex);
# 663 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
}
# 666 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
static inline __attribute__((visibility("default"))) int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *mutex)
# 667 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
{
# 668 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
return __gthread_mutex_unlock(mutex);
# 669 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/gthr-default.h" 3
}
# 45 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++io.h" 3
namespace std {
# 47 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++io.h" 3
typedef __gthread_mutex_t __c_lock;
# 50 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++io.h" 3
typedef FILE __c_file;
# 52 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/c++io.h" 3
}
# 70 "/usr/include/runetype.h" 3
typedef __darwin_wint_t wint_t;
# 86 "/usr/include/runetype.h" 3
typedef
# 81 "/usr/include/runetype.h" 3
struct {
# 82 "/usr/include/runetype.h" 3
__darwin_rune_t __min;
# 83 "/usr/include/runetype.h" 3
__darwin_rune_t __max;
# 84 "/usr/include/runetype.h" 3
__darwin_rune_t __map;
# 85 "/usr/include/runetype.h" 3
__uint32_t *__types;
# 86 "/usr/include/runetype.h" 3
} _RuneEntry;
# 91 "/usr/include/runetype.h" 3
typedef
# 88 "/usr/include/runetype.h" 3
struct {
# 89 "/usr/include/runetype.h" 3
int __nranges;
# 90 "/usr/include/runetype.h" 3
_RuneEntry *__ranges;
# 91 "/usr/include/runetype.h" 3
} _RuneRange;
# 96 "/usr/include/runetype.h" 3
typedef
# 93 "/usr/include/runetype.h" 3
struct {
# 94 "/usr/include/runetype.h" 3
char __name[14];
# 95 "/usr/include/runetype.h" 3
__uint32_t __mask;
# 96 "/usr/include/runetype.h" 3
} _RuneCharClass;
# 127 "/usr/include/runetype.h" 3
typedef
# 98 "/usr/include/runetype.h" 3
struct {
# 99 "/usr/include/runetype.h" 3
char __magic[8];
# 100 "/usr/include/runetype.h" 3
char __encoding[32];
# 102 "/usr/include/runetype.h" 3
__darwin_rune_t (*__sgetrune)(const char *, __darwin_size_t, const char **);
# 103 "/usr/include/runetype.h" 3
int (*__sputrune)(__darwin_rune_t, char *, __darwin_size_t, char **);
# 104 "/usr/include/runetype.h" 3
__darwin_rune_t __invalid_rune;
# 106 "/usr/include/runetype.h" 3
__uint32_t __runetype[(1 << 8)];
# 107 "/usr/include/runetype.h" 3
__darwin_rune_t __maplower[(1 << 8)];
# 108 "/usr/include/runetype.h" 3
__darwin_rune_t __mapupper[(1 << 8)];
# 115 "/usr/include/runetype.h" 3
_RuneRange __runetype_ext;
# 116 "/usr/include/runetype.h" 3
_RuneRange __maplower_ext;
# 117 "/usr/include/runetype.h" 3
_RuneRange __mapupper_ext;
# 119 "/usr/include/runetype.h" 3
void *__variable;
# 120 "/usr/include/runetype.h" 3
int __variable_len;
# 125 "/usr/include/runetype.h" 3
int __ncharclasses;
# 126 "/usr/include/runetype.h" 3
_RuneCharClass *__charclasses;
# 127 "/usr/include/runetype.h" 3
} _RuneLocale;
# 132 "/usr/include/runetype.h" 3
extern "C" { extern _RuneLocale _DefaultRuneLocale; }
# 133 "/usr/include/runetype.h" 3
extern "C" { extern _RuneLocale *_CurrentRuneLocale; }
# 146 "/usr/include/ctype.h" 3
extern "C" unsigned long ___runetype(__darwin_ct_rune_t);
# 147 "/usr/include/ctype.h" 3
extern "C" __darwin_ct_rune_t ___tolower(__darwin_ct_rune_t);
# 148 "/usr/include/ctype.h" 3
extern "C" __darwin_ct_rune_t ___toupper(__darwin_ct_rune_t);
# 152 "/usr/include/ctype.h" 3
static inline int isascii(int _c)
# 153 "/usr/include/ctype.h" 3
{
# 154 "/usr/include/ctype.h" 3
return (_c & (~127)) == 0;
# 155 "/usr/include/ctype.h" 3
}
# 165 "/usr/include/ctype.h" 3
extern "C" int __maskrune(__darwin_ct_rune_t, unsigned long);
# 170 "/usr/include/ctype.h" 3
static inline int __istype(__darwin_ct_rune_t _c, unsigned long _f)
# 171 "/usr/include/ctype.h" 3
{
# 175 "/usr/include/ctype.h" 3
return (isascii(_c)) ? (!(!(((_DefaultRuneLocale.__runetype)[_c]) & _f))) : (!(!(__maskrune(_c, _f))));
# 178 "/usr/include/ctype.h" 3
}
# 181 "/usr/include/ctype.h" 3
static inline __darwin_ct_rune_t __isctype(__darwin_ct_rune_t _c, unsigned long _f)
# 182 "/usr/include/ctype.h" 3
{
# 186 "/usr/include/ctype.h" 3
return ((_c < 0) || (_c >= (1 << 8))) ? 0 : (!(!(((_DefaultRuneLocale.__runetype)[_c]) & _f)));
# 189 "/usr/include/ctype.h" 3
}
# 205 "/usr/include/ctype.h" 3
extern "C" __darwin_ct_rune_t __toupper(__darwin_ct_rune_t);
# 206 "/usr/include/ctype.h" 3
extern "C" __darwin_ct_rune_t __tolower(__darwin_ct_rune_t);
# 211 "/usr/include/ctype.h" 3
static inline int __wcwidth(__darwin_ct_rune_t _c)
# 212 "/usr/include/ctype.h" 3
{
# 213 "/usr/include/ctype.h" 3
unsigned _x;
# 215 "/usr/include/ctype.h" 3
if (_c == 0) {
# 216 "/usr/include/ctype.h" 3
return 0; }
# 217 "/usr/include/ctype.h" 3
_x = ((unsigned)__maskrune(_c, 3758096384UL | (262144L)));
# 218 "/usr/include/ctype.h" 3
if ((_x & 3758096384UL) != (0)) {
# 219 "/usr/include/ctype.h" 3
return (_x & 3758096384UL) >> 30; }
# 220 "/usr/include/ctype.h" 3
return ((_x & (262144L)) != (0)) ? 1 : (-1);
# 221 "/usr/include/ctype.h" 3
}
# 229 "/usr/include/ctype.h" 3
static inline int isalnum(int _c)
# 230 "/usr/include/ctype.h" 3
{
# 231 "/usr/include/ctype.h" 3
return __istype(_c, 256L | 1024L);
# 232 "/usr/include/ctype.h" 3
}
# 235 "/usr/include/ctype.h" 3
static inline int isalpha(int _c)
# 236 "/usr/include/ctype.h" 3
{
# 237 "/usr/include/ctype.h" 3
return __istype(_c, 256L);
# 238 "/usr/include/ctype.h" 3
}
# 241 "/usr/include/ctype.h" 3
static inline int isblank(int _c)
# 242 "/usr/include/ctype.h" 3
{
# 243 "/usr/include/ctype.h" 3
return __istype(_c, 131072L);
# 244 "/usr/include/ctype.h" 3
}
# 247 "/usr/include/ctype.h" 3
static inline int iscntrl(int _c)
# 248 "/usr/include/ctype.h" 3
{
# 249 "/usr/include/ctype.h" 3
return __istype(_c, 512L);
# 250 "/usr/include/ctype.h" 3
}
# 254 "/usr/include/ctype.h" 3
static inline int isdigit(int _c)
# 255 "/usr/include/ctype.h" 3
{
# 256 "/usr/include/ctype.h" 3
return __isctype(_c, 1024L);
# 257 "/usr/include/ctype.h" 3
}
# 260 "/usr/include/ctype.h" 3
static inline int isgraph(int _c)
# 261 "/usr/include/ctype.h" 3
{
# 262 "/usr/include/ctype.h" 3
return __istype(_c, 2048L);
# 263 "/usr/include/ctype.h" 3
}
# 266 "/usr/include/ctype.h" 3
static inline int islower(int _c)
# 267 "/usr/include/ctype.h" 3
{
# 268 "/usr/include/ctype.h" 3
return __istype(_c, 4096L);
# 269 "/usr/include/ctype.h" 3
}
# 272 "/usr/include/ctype.h" 3
static inline int isprint(int _c)
# 273 "/usr/include/ctype.h" 3
{
# 274 "/usr/include/ctype.h" 3
return __istype(_c, 262144L);
# 275 "/usr/include/ctype.h" 3
}
# 278 "/usr/include/ctype.h" 3
static inline int ispunct(int _c)
# 279 "/usr/include/ctype.h" 3
{
# 280 "/usr/include/ctype.h" 3
return __istype(_c, 8192L);
# 281 "/usr/include/ctype.h" 3
}
# 284 "/usr/include/ctype.h" 3
static inline int isspace(int _c)
# 285 "/usr/include/ctype.h" 3
{
# 286 "/usr/include/ctype.h" 3
return __istype(_c, 16384L);
# 287 "/usr/include/ctype.h" 3
}
# 290 "/usr/include/ctype.h" 3
static inline int isupper(int _c)
# 291 "/usr/include/ctype.h" 3
{
# 292 "/usr/include/ctype.h" 3
return __istype(_c, 32768L);
# 293 "/usr/include/ctype.h" 3
}
# 297 "/usr/include/ctype.h" 3
static inline int isxdigit(int _c)
# 298 "/usr/include/ctype.h" 3
{
# 299 "/usr/include/ctype.h" 3
return __isctype(_c, 65536L);
# 300 "/usr/include/ctype.h" 3
}
# 303 "/usr/include/ctype.h" 3
static inline int toascii(int _c)
# 304 "/usr/include/ctype.h" 3
{
# 305 "/usr/include/ctype.h" 3
return _c & 127;
# 306 "/usr/include/ctype.h" 3
}
# 309 "/usr/include/ctype.h" 3
static inline int tolower(int _c)
# 310 "/usr/include/ctype.h" 3
{
# 311 "/usr/include/ctype.h" 3
return __tolower(_c);
# 312 "/usr/include/ctype.h" 3
}
# 315 "/usr/include/ctype.h" 3
static inline int toupper(int _c)
# 316 "/usr/include/ctype.h" 3
{
# 317 "/usr/include/ctype.h" 3
return __toupper(_c);
# 318 "/usr/include/ctype.h" 3
}
# 322 "/usr/include/ctype.h" 3
static inline int digittoint(int _c)
# 323 "/usr/include/ctype.h" 3
{
# 324 "/usr/include/ctype.h" 3
return __maskrune(_c, 15);
# 325 "/usr/include/ctype.h" 3
}
# 328 "/usr/include/ctype.h" 3
static inline int ishexnumber(int _c)
# 329 "/usr/include/ctype.h" 3
{
# 330 "/usr/include/ctype.h" 3
return __istype(_c, 65536L);
# 331 "/usr/include/ctype.h" 3
}
# 334 "/usr/include/ctype.h" 3
static inline int isideogram(int _c)
# 335 "/usr/include/ctype.h" 3
{
# 336 "/usr/include/ctype.h" 3
return __istype(_c, 524288L);
# 337 "/usr/include/ctype.h" 3
}
# 340 "/usr/include/ctype.h" 3
static inline int isnumber(int _c)
# 341 "/usr/include/ctype.h" 3
{
# 342 "/usr/include/ctype.h" 3
return __istype(_c, 1024L);
# 343 "/usr/include/ctype.h" 3
}
# 346 "/usr/include/ctype.h" 3
static inline int isphonogram(int _c)
# 347 "/usr/include/ctype.h" 3
{
# 348 "/usr/include/ctype.h" 3
return __istype(_c, 2097152L);
# 349 "/usr/include/ctype.h" 3
}
# 352 "/usr/include/ctype.h" 3
static inline int isrune(int _c)
# 353 "/usr/include/ctype.h" 3
{
# 354 "/usr/include/ctype.h" 3
return __istype(_c, 4294967280UL);
# 355 "/usr/include/ctype.h" 3
}
# 358 "/usr/include/ctype.h" 3
static inline int isspecial(int _c)
# 359 "/usr/include/ctype.h" 3
{
# 360 "/usr/include/ctype.h" 3
return __istype(_c, 1048576L);
# 361 "/usr/include/ctype.h" 3
}
# 68 "/usr/include/c++/4.2.1/cctype" 3
namespace std {
# 70 "/usr/include/c++/4.2.1/cctype" 3
using ::isalnum;
# 71 "/usr/include/c++/4.2.1/cctype" 3
using ::isalpha;
# 72 "/usr/include/c++/4.2.1/cctype" 3
using ::iscntrl;
# 73 "/usr/include/c++/4.2.1/cctype" 3
using ::isdigit;
# 74 "/usr/include/c++/4.2.1/cctype" 3
using ::isgraph;
# 75 "/usr/include/c++/4.2.1/cctype" 3
using ::islower;
# 76 "/usr/include/c++/4.2.1/cctype" 3
using ::isprint;
# 77 "/usr/include/c++/4.2.1/cctype" 3
using ::ispunct;
# 78 "/usr/include/c++/4.2.1/cctype" 3
using ::isspace;
# 79 "/usr/include/c++/4.2.1/cctype" 3
using ::isupper;
# 80 "/usr/include/c++/4.2.1/cctype" 3
using ::isxdigit;
# 81 "/usr/include/c++/4.2.1/cctype" 3
using ::tolower;
# 82 "/usr/include/c++/4.2.1/cctype" 3
using ::toupper;
# 84 "/usr/include/c++/4.2.1/cctype" 3
}
# 46 "/usr/include/c++/4.2.1/bits/stringfwd.h" 3
namespace std {
# 48 "/usr/include/c++/4.2.1/bits/stringfwd.h" 3
template < typename _Alloc >
    class allocator;
# 51 "/usr/include/c++/4.2.1/bits/stringfwd.h" 3
template< class _CharT> struct char_traits;
# 54 "/usr/include/c++/4.2.1/bits/stringfwd.h" 3
template < typename _CharT, typename _Traits = char_traits < _CharT >,
           typename _Alloc = allocator < _CharT > >
    class basic_string;
# 58 "/usr/include/c++/4.2.1/bits/stringfwd.h" 3
template<> struct char_traits< char> ;
# 60 "/usr/include/c++/4.2.1/bits/stringfwd.h" 3
typedef basic_string< char, char_traits< char> , allocator< char> > string;
# 63 "/usr/include/c++/4.2.1/bits/stringfwd.h" 3
template<> struct char_traits< wchar_t> ;
# 65 "/usr/include/c++/4.2.1/bits/stringfwd.h" 3
typedef basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wstring;
# 68 "/usr/include/c++/4.2.1/bits/stringfwd.h" 3
}
# 64 "/usr/include/c++/4.2.1/ctime" 3
namespace std {
# 66 "/usr/include/c++/4.2.1/ctime" 3
using ::clock_t;
# 67 "/usr/include/c++/4.2.1/ctime" 3
using ::time_t;
# 68 "/usr/include/c++/4.2.1/ctime" 3
using ::tm;
# 70 "/usr/include/c++/4.2.1/ctime" 3
using ::clock;
# 71 "/usr/include/c++/4.2.1/ctime" 3
using ::difftime;
# 72 "/usr/include/c++/4.2.1/ctime" 3
using ::mktime;
# 73 "/usr/include/c++/4.2.1/ctime" 3
using ::time;
# 74 "/usr/include/c++/4.2.1/ctime" 3
using ::asctime;
# 75 "/usr/include/c++/4.2.1/ctime" 3
using ::ctime;
# 76 "/usr/include/c++/4.2.1/ctime" 3
using ::gmtime;
# 77 "/usr/include/c++/4.2.1/ctime" 3
using ::localtime;
# 78 "/usr/include/c++/4.2.1/ctime" 3
using ::strftime;
# 80 "/usr/include/c++/4.2.1/ctime" 3
}
# 83 "/usr/include/wchar.h" 3
typedef __darwin_mbstate_t mbstate_t;
# 52 "/usr/include/_wctype.h" 3
typedef __darwin_wctype_t wctype_t;
# 72 "/usr/include/_wctype.h" 3
static inline int iswalnum(wint_t _wc)
# 73 "/usr/include/_wctype.h" 3
{
# 74 "/usr/include/_wctype.h" 3
return __istype(_wc, 256L | 1024L);
# 75 "/usr/include/_wctype.h" 3
}
# 78 "/usr/include/_wctype.h" 3
static inline int iswalpha(wint_t _wc)
# 79 "/usr/include/_wctype.h" 3
{
# 80 "/usr/include/_wctype.h" 3
return __istype(_wc, 256L);
# 81 "/usr/include/_wctype.h" 3
}
# 84 "/usr/include/_wctype.h" 3
static inline int iswcntrl(wint_t _wc)
# 85 "/usr/include/_wctype.h" 3
{
# 86 "/usr/include/_wctype.h" 3
return __istype(_wc, 512L);
# 87 "/usr/include/_wctype.h" 3
}
# 90 "/usr/include/_wctype.h" 3
static inline int iswctype(wint_t _wc, wctype_t _charclass)
# 91 "/usr/include/_wctype.h" 3
{
# 92 "/usr/include/_wctype.h" 3
return __istype(_wc, _charclass);
# 93 "/usr/include/_wctype.h" 3
}
# 96 "/usr/include/_wctype.h" 3
static inline int iswdigit(wint_t _wc)
# 97 "/usr/include/_wctype.h" 3
{
# 98 "/usr/include/_wctype.h" 3
return __isctype(_wc, 1024L);
# 99 "/usr/include/_wctype.h" 3
}
# 102 "/usr/include/_wctype.h" 3
static inline int iswgraph(wint_t _wc)
# 103 "/usr/include/_wctype.h" 3
{
# 104 "/usr/include/_wctype.h" 3
return __istype(_wc, 2048L);
# 105 "/usr/include/_wctype.h" 3
}
# 108 "/usr/include/_wctype.h" 3
static inline int iswlower(wint_t _wc)
# 109 "/usr/include/_wctype.h" 3
{
# 110 "/usr/include/_wctype.h" 3
return __istype(_wc, 4096L);
# 111 "/usr/include/_wctype.h" 3
}
# 114 "/usr/include/_wctype.h" 3
static inline int iswprint(wint_t _wc)
# 115 "/usr/include/_wctype.h" 3
{
# 116 "/usr/include/_wctype.h" 3
return __istype(_wc, 262144L);
# 117 "/usr/include/_wctype.h" 3
}
# 120 "/usr/include/_wctype.h" 3
static inline int iswpunct(wint_t _wc)
# 121 "/usr/include/_wctype.h" 3
{
# 122 "/usr/include/_wctype.h" 3
return __istype(_wc, 8192L);
# 123 "/usr/include/_wctype.h" 3
}
# 126 "/usr/include/_wctype.h" 3
static inline int iswspace(wint_t _wc)
# 127 "/usr/include/_wctype.h" 3
{
# 128 "/usr/include/_wctype.h" 3
return __istype(_wc, 16384L);
# 129 "/usr/include/_wctype.h" 3
}
# 132 "/usr/include/_wctype.h" 3
static inline int iswupper(wint_t _wc)
# 133 "/usr/include/_wctype.h" 3
{
# 134 "/usr/include/_wctype.h" 3
return __istype(_wc, 32768L);
# 135 "/usr/include/_wctype.h" 3
}
# 138 "/usr/include/_wctype.h" 3
static inline int iswxdigit(wint_t _wc)
# 139 "/usr/include/_wctype.h" 3
{
# 140 "/usr/include/_wctype.h" 3
return __isctype(_wc, 65536L);
# 141 "/usr/include/_wctype.h" 3
}
# 144 "/usr/include/_wctype.h" 3
static inline wint_t towlower(wint_t _wc)
# 145 "/usr/include/_wctype.h" 3
{
# 146 "/usr/include/_wctype.h" 3
return __tolower(_wc);
# 147 "/usr/include/_wctype.h" 3
}
# 150 "/usr/include/_wctype.h" 3
static inline wint_t towupper(wint_t _wc)
# 151 "/usr/include/_wctype.h" 3
{
# 152 "/usr/include/_wctype.h" 3
return __toupper(_wc);
# 153 "/usr/include/_wctype.h" 3
}
# 178 "/usr/include/_wctype.h" 3
extern "C" wctype_t wctype(const char *);
# 117 "/usr/include/wchar.h" 3
extern "C" wint_t btowc(int);
# 118 "/usr/include/wchar.h" 3
extern "C" wint_t fgetwc(FILE *);
# 119 "/usr/include/wchar.h" 3
extern "C" wchar_t *fgetws(wchar_t *, int, FILE *);
# 120 "/usr/include/wchar.h" 3
extern "C" wint_t fputwc(wchar_t, FILE *);
# 121 "/usr/include/wchar.h" 3
extern "C" int fputws(const wchar_t *, FILE *);
# 122 "/usr/include/wchar.h" 3
extern "C" int fwide(FILE *, int);
# 123 "/usr/include/wchar.h" 3
extern "C" int fwprintf(FILE *, const wchar_t *, ...);
# 124 "/usr/include/wchar.h" 3
extern "C" int fwscanf(FILE *, const wchar_t *, ...);
# 125 "/usr/include/wchar.h" 3
extern "C" wint_t getwc(FILE *);
# 126 "/usr/include/wchar.h" 3
extern "C" wint_t getwchar();
# 127 "/usr/include/wchar.h" 3
extern "C" size_t mbrlen(const char *, size_t, mbstate_t *);
# 128 "/usr/include/wchar.h" 3
extern "C" size_t mbrtowc(wchar_t *, const char *, size_t, mbstate_t *);
# 130 "/usr/include/wchar.h" 3
extern "C" int mbsinit(const mbstate_t *);
# 131 "/usr/include/wchar.h" 3
extern "C" size_t mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *);
# 133 "/usr/include/wchar.h" 3
extern "C" wint_t putwc(wchar_t, FILE *);
# 134 "/usr/include/wchar.h" 3
extern "C" wint_t putwchar(wchar_t);
# 135 "/usr/include/wchar.h" 3
extern "C" int swprintf(wchar_t *, size_t, const wchar_t *, ...);
# 137 "/usr/include/wchar.h" 3
extern "C" int swscanf(const wchar_t *, const wchar_t *, ...);
# 138 "/usr/include/wchar.h" 3
extern "C" wint_t ungetwc(wint_t, FILE *);
# 139 "/usr/include/wchar.h" 3
extern "C" int vfwprintf(FILE *, const wchar_t *, __darwin_va_list);
# 141 "/usr/include/wchar.h" 3
extern "C" int vswprintf(wchar_t *, size_t, const wchar_t *, __darwin_va_list);
# 143 "/usr/include/wchar.h" 3
extern "C" int vwprintf(const wchar_t *, __darwin_va_list);
# 144 "/usr/include/wchar.h" 3
extern "C" size_t wcrtomb(char *, wchar_t, mbstate_t *);
# 145 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcscat(wchar_t *, const wchar_t *);
# 146 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcschr(const wchar_t *, wchar_t);
# 147 "/usr/include/wchar.h" 3
extern "C" int wcscmp(const wchar_t *, const wchar_t *);
# 148 "/usr/include/wchar.h" 3
extern "C" int wcscoll(const wchar_t *, const wchar_t *);
# 149 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcscpy(wchar_t *, const wchar_t *);
# 150 "/usr/include/wchar.h" 3
extern "C" size_t wcscspn(const wchar_t *, const wchar_t *);
# 151 "/usr/include/wchar.h" 3
extern "C" size_t wcsftime(wchar_t *, size_t, const wchar_t *, const tm *) __asm__("_wcsftime$UNIX2003");
# 153 "/usr/include/wchar.h" 3
extern "C" size_t wcslen(const wchar_t *);
# 154 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcsncat(wchar_t *, const wchar_t *, size_t);
# 155 "/usr/include/wchar.h" 3
extern "C" int wcsncmp(const wchar_t *, const wchar_t *, size_t);
# 156 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcsncpy(wchar_t *, const wchar_t *, size_t);
# 157 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcspbrk(const wchar_t *, const wchar_t *);
# 158 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcsrchr(const wchar_t *, wchar_t);
# 159 "/usr/include/wchar.h" 3
extern "C" size_t wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *);
# 161 "/usr/include/wchar.h" 3
extern "C" size_t wcsspn(const wchar_t *, const wchar_t *);
# 162 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcsstr(const wchar_t *, const wchar_t *);
# 163 "/usr/include/wchar.h" 3
extern "C" size_t wcsxfrm(wchar_t *, const wchar_t *, size_t);
# 164 "/usr/include/wchar.h" 3
extern "C" int wctob(wint_t);
# 165 "/usr/include/wchar.h" 3
extern "C" double wcstod(const wchar_t *, wchar_t **);
# 166 "/usr/include/wchar.h" 3
extern "C" wchar_t *wcstok(wchar_t *, const wchar_t *, wchar_t **);
# 168 "/usr/include/wchar.h" 3
extern "C" long wcstol(const wchar_t *, wchar_t **, int);
# 170 "/usr/include/wchar.h" 3
extern "C" unsigned long wcstoul(const wchar_t *, wchar_t **, int);
# 171 "/usr/include/wchar.h" 3
extern "C" wchar_t *wmemchr(const wchar_t *, wchar_t, size_t);
# 172 "/usr/include/wchar.h" 3
extern "C" int wmemcmp(const wchar_t *, const wchar_t *, size_t);
# 173 "/usr/include/wchar.h" 3
extern "C" wchar_t *wmemcpy(wchar_t *, const wchar_t *, size_t);
# 174 "/usr/include/wchar.h" 3
extern "C" wchar_t *wmemmove(wchar_t *, const wchar_t *, size_t);
# 175 "/usr/include/wchar.h" 3
extern "C" wchar_t *wmemset(wchar_t *, wchar_t, size_t);
# 176 "/usr/include/wchar.h" 3
extern "C" int wprintf(const wchar_t *, ...);
# 177 "/usr/include/wchar.h" 3
extern "C" int wscanf(const wchar_t *, ...);
# 180 "/usr/include/wchar.h" 3
extern "C" int vfwscanf(FILE *, const wchar_t *, __darwin_va_list);
# 182 "/usr/include/wchar.h" 3
extern "C" int vswscanf(const wchar_t *, const wchar_t *, __darwin_va_list);
# 184 "/usr/include/wchar.h" 3
extern "C" int vwscanf(const wchar_t *, __darwin_va_list);
# 185 "/usr/include/wchar.h" 3
extern "C" float wcstof(const wchar_t *, wchar_t **);
# 187 "/usr/include/wchar.h" 3
extern "C" long double wcstold(const wchar_t *, wchar_t **);
# 190 "/usr/include/wchar.h" 3
extern "C" long long wcstoll(const wchar_t *, wchar_t **, int);
# 192 "/usr/include/wchar.h" 3
extern "C" unsigned long long wcstoull(const wchar_t *, wchar_t **, int);
# 194 "/usr/include/wchar.h" 3
extern "C" int wcswidth(const wchar_t *, size_t);
# 195 "/usr/include/wchar.h" 3
extern "C" int wcwidth(wchar_t);
# 199 "/usr/include/wchar.h" 3
extern "C" size_t mbsnrtowcs(wchar_t *, const char **, size_t, size_t, mbstate_t *);
# 201 "/usr/include/wchar.h" 3
extern "C" size_t wcslcat(wchar_t *, const wchar_t *, size_t);
# 202 "/usr/include/wchar.h" 3
extern "C" size_t wcslcpy(wchar_t *, const wchar_t *, size_t);
# 203 "/usr/include/wchar.h" 3
extern "C" size_t wcsnrtombs(char *, const wchar_t **, size_t, size_t, mbstate_t *);
# 70 "/usr/include/c++/4.2.1/cwchar" 3
namespace std {
# 72 "/usr/include/c++/4.2.1/cwchar" 3
using ::mbstate_t;
# 74 "/usr/include/c++/4.2.1/cwchar" 3
}
# 144 "/usr/include/c++/4.2.1/cwchar" 3
namespace std {
# 146 "/usr/include/c++/4.2.1/cwchar" 3
using ::wint_t;
# 148 "/usr/include/c++/4.2.1/cwchar" 3
using ::btowc;
# 149 "/usr/include/c++/4.2.1/cwchar" 3
using ::fgetwc;
# 150 "/usr/include/c++/4.2.1/cwchar" 3
using ::fgetws;
# 151 "/usr/include/c++/4.2.1/cwchar" 3
using ::fputwc;
# 152 "/usr/include/c++/4.2.1/cwchar" 3
using ::fputws;
# 153 "/usr/include/c++/4.2.1/cwchar" 3
using ::fwide;
# 154 "/usr/include/c++/4.2.1/cwchar" 3
using ::fwprintf;
# 155 "/usr/include/c++/4.2.1/cwchar" 3
using ::fwscanf;
# 156 "/usr/include/c++/4.2.1/cwchar" 3
using ::getwc;
# 157 "/usr/include/c++/4.2.1/cwchar" 3
using ::getwchar;
# 158 "/usr/include/c++/4.2.1/cwchar" 3
using ::mbrlen;
# 159 "/usr/include/c++/4.2.1/cwchar" 3
using ::mbrtowc;
# 160 "/usr/include/c++/4.2.1/cwchar" 3
using ::mbsinit;
# 161 "/usr/include/c++/4.2.1/cwchar" 3
using ::mbsrtowcs;
# 162 "/usr/include/c++/4.2.1/cwchar" 3
using ::putwc;
# 163 "/usr/include/c++/4.2.1/cwchar" 3
using ::putwchar;
# 164 "/usr/include/c++/4.2.1/cwchar" 3
using ::swprintf;
# 165 "/usr/include/c++/4.2.1/cwchar" 3
using ::swscanf;
# 166 "/usr/include/c++/4.2.1/cwchar" 3
using ::ungetwc;
# 167 "/usr/include/c++/4.2.1/cwchar" 3
using ::vfwprintf;
# 169 "/usr/include/c++/4.2.1/cwchar" 3
using ::vfwscanf;
# 171 "/usr/include/c++/4.2.1/cwchar" 3
using ::vswprintf;
# 173 "/usr/include/c++/4.2.1/cwchar" 3
using ::vswscanf;
# 175 "/usr/include/c++/4.2.1/cwchar" 3
using ::vwprintf;
# 177 "/usr/include/c++/4.2.1/cwchar" 3
using ::vwscanf;
# 179 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcrtomb;
# 180 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcscat;
# 181 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcscmp;
# 182 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcscoll;
# 183 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcscpy;
# 184 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcscspn;
# 185 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcsftime;
# 186 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcslen;
# 187 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcsncat;
# 188 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcsncmp;
# 189 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcsncpy;
# 190 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcsrtombs;
# 191 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcsspn;
# 192 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcstod;
# 194 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcstof;
# 196 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcstok;
# 197 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcstol;
# 198 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcstoul;
# 199 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcsxfrm;
# 200 "/usr/include/c++/4.2.1/cwchar" 3
using ::wctob;
# 201 "/usr/include/c++/4.2.1/cwchar" 3
using ::wmemcmp;
# 202 "/usr/include/c++/4.2.1/cwchar" 3
using ::wmemcpy;
# 203 "/usr/include/c++/4.2.1/cwchar" 3
using ::wmemmove;
# 204 "/usr/include/c++/4.2.1/cwchar" 3
using ::wmemset;
# 205 "/usr/include/c++/4.2.1/cwchar" 3
using ::wprintf;
# 206 "/usr/include/c++/4.2.1/cwchar" 3
using ::wscanf;
# 208 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcschr;
# 211 "/usr/include/c++/4.2.1/cwchar" 3
inline wchar_t *wcschr(wchar_t *__p, wchar_t __c)
# 212 "/usr/include/c++/4.2.1/cwchar" 3
{ return wcschr(const_cast< const wchar_t *>(__p), __c); }
# 214 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcspbrk;
# 217 "/usr/include/c++/4.2.1/cwchar" 3
inline wchar_t *wcspbrk(wchar_t *__s1, const wchar_t *__s2)
# 218 "/usr/include/c++/4.2.1/cwchar" 3
{ return wcspbrk(const_cast< const wchar_t *>(__s1), __s2); }
# 220 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcsrchr;
# 223 "/usr/include/c++/4.2.1/cwchar" 3
inline wchar_t *wcsrchr(wchar_t *__p, wchar_t __c)
# 224 "/usr/include/c++/4.2.1/cwchar" 3
{ return wcsrchr(const_cast< const wchar_t *>(__p), __c); }
# 226 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcsstr;
# 229 "/usr/include/c++/4.2.1/cwchar" 3
inline wchar_t *wcsstr(wchar_t *__s1, const wchar_t *__s2)
# 230 "/usr/include/c++/4.2.1/cwchar" 3
{ return wcsstr(const_cast< const wchar_t *>(__s1), __s2); }
# 232 "/usr/include/c++/4.2.1/cwchar" 3
using ::wmemchr;
# 235 "/usr/include/c++/4.2.1/cwchar" 3
inline wchar_t *wmemchr(wchar_t *__p, wchar_t __c, size_t __n)
# 236 "/usr/include/c++/4.2.1/cwchar" 3
{ return wmemchr(const_cast< const wchar_t *>(__p), __c, __n); }
# 238 "/usr/include/c++/4.2.1/cwchar" 3
}
# 246 "/usr/include/c++/4.2.1/cwchar" 3
namespace __gnu_cxx {
# 253 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcstold;
# 262 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcstoll;
# 263 "/usr/include/c++/4.2.1/cwchar" 3
using ::wcstoull;
# 266 "/usr/include/c++/4.2.1/cwchar" 3
}
# 268 "/usr/include/c++/4.2.1/cwchar" 3
namespace std {
# 270 "/usr/include/c++/4.2.1/cwchar" 3
using __gnu_cxx::wcstold;
# 271 "/usr/include/c++/4.2.1/cwchar" 3
using __gnu_cxx::wcstoll;
# 272 "/usr/include/c++/4.2.1/cwchar" 3
using __gnu_cxx::wcstoull;
# 274 "/usr/include/c++/4.2.1/cwchar" 3
}
# 40 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef unsigned char uint8_t;
# 45 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef unsigned short uint16_t;
# 50 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef unsigned uint32_t;
# 55 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef unsigned long long uint64_t;
# 59 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef int8_t int_least8_t;
# 60 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef int16_t int_least16_t;
# 61 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef int32_t int_least32_t;
# 62 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef int64_t int_least64_t;
# 63 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef uint8_t uint_least8_t;
# 64 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef uint16_t uint_least16_t;
# 65 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef uint32_t uint_least32_t;
# 66 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef uint64_t uint_least64_t;
# 70 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef int8_t int_fast8_t;
# 71 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef int16_t int_fast16_t;
# 72 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef int32_t int_fast32_t;
# 73 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef int64_t int_fast64_t;
# 74 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef uint8_t uint_fast8_t;
# 75 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef uint16_t uint_fast16_t;
# 76 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef uint32_t uint_fast32_t;
# 77 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef uint64_t uint_fast64_t;
# 97 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef long long intmax_t;
# 106 "/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/stdint.h" 3
typedef unsigned long long uintmax_t;
# 52 "/usr/include/c++/4.2.1/bits/postypes.h" 3
namespace std {
# 72 "/usr/include/c++/4.2.1/bits/postypes.h" 3
typedef int64_t streamoff;
# 78 "/usr/include/c++/4.2.1/bits/postypes.h" 3
typedef ptrdiff_t streamsize;
# 80 "/usr/include/c++/4.2.1/bits/postypes.h" 3
template < typename _StateT >
    class fpos;
# 94 "/usr/include/c++/4.2.1/bits/postypes.h" 3
template < typename _StateT >
    class fpos
    {
    private :
      streamoff _M_off;
      _StateT _M_state;

    public :




      fpos ( )
      : _M_off ( 0 ), _M_state ( ) { }
# 116 "/usr/include/c++/4.2.1/bits/postypes.h" 3
      fpos ( streamoff __off )
      : _M_off ( __off ), _M_state ( ) { }


      operator streamoff ( ) const { return _M_off; }


      void
      state ( _StateT __st )
      { _M_state = __st; }


      _StateT
      state ( ) const
      { return _M_state; }





      fpos &
      operator += ( streamoff __off )
      {
 _M_off += __off;
 return * this;
      }





      fpos &
      operator -= ( streamoff __off )
      {
 _M_off -= __off;
 return * this;
      }







      fpos
      operator + ( streamoff __off ) const
      {
 fpos __pos ( * this );
 __pos += __off;
 return __pos;
      }







      fpos
      operator - ( streamoff __off ) const
      {
 fpos __pos ( * this );
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator - ( const fpos & __other ) const
      { return _M_off - __other . _M_off; }
    };
# 197 "/usr/include/c++/4.2.1/bits/postypes.h" 3
template < typename _StateT >
    inline bool
    operator == ( const fpos < _StateT > & __lhs, const fpos < _StateT > & __rhs )
    { return streamoff ( __lhs ) == streamoff ( __rhs ); }
# 202 "/usr/include/c++/4.2.1/bits/postypes.h" 3
template < typename _StateT >
    inline bool
    operator != ( const fpos < _StateT > & __lhs, const fpos < _StateT > & __rhs )
    { return streamoff ( __lhs ) != streamoff ( __rhs ); }
# 211 "/usr/include/c++/4.2.1/bits/postypes.h" 3
typedef fpos< __mbstate_t> streampos;
# 213 "/usr/include/c++/4.2.1/bits/postypes.h" 3
typedef fpos< __mbstate_t> wstreampos;
# 215 "/usr/include/c++/4.2.1/bits/postypes.h" 3
}
# 44 "/usr/include/c++/4.2.1/bits/functexcept.h" 3
namespace std {
# 48 "/usr/include/c++/4.2.1/bits/functexcept.h" 3
void __throw_bad_exception() __attribute__((__noreturn__));
# 52 "/usr/include/c++/4.2.1/bits/functexcept.h" 3
void __throw_bad_alloc() __attribute__((__noreturn__));
# 56 "/usr/include/c++/4.2.1/bits/functexcept.h" 3
void __throw_bad_cast() __attribute__((__noreturn__));
# 59 "/usr/include/c++/4.2.1/bits/functexcept.h" 3
void __throw_bad_typeid() __attribute__((__noreturn__));
# 63 "/usr/include/c++/4.2.1/bits/functexcept.h" 3
void __throw_logic_error(const char *) __attribute__((__noreturn__));
# 66 "/usr/include/c++/4.2.1/bits/functexcept.h" 3
void __throw_domain_error(const char *) __attribute__((__noreturn__));
# 69 "/usr/include/c++/4.2.1/bits/functexcept.h" 3
void __throw_invalid_argument(const char *) __attribute__((__noreturn__));
# 72 "/usr/include/c++/4.2.1/bits/functexcept.h" 3
void __throw_length_error(const char *) __attribute__((__noreturn__));
# 75 "/usr/include/c++/4.2.1/bits/functexcept.h" 3
void __throw_out_of_range(const char *) __attribute__((__noreturn__));
# 78 "/usr/include/c++/4.2.1/bits/functexcept.h" 3
void __throw_runtime_error(const char *) __attribute__((__noreturn__));
# 81 "/usr/include/c++/4.2.1/bits/functexcept.h" 3
void __throw_range_error(const char *) __attribute__((__noreturn__));
# 84 "/usr/include/c++/4.2.1/bits/functexcept.h" 3
void __throw_overflow_error(const char *) __attribute__((__noreturn__));
# 87 "/usr/include/c++/4.2.1/bits/functexcept.h" 3
void __throw_underflow_error(const char *) __attribute__((__noreturn__));
# 91 "/usr/include/c++/4.2.1/bits/functexcept.h" 3
void __throw_ios_failure(const char *) __attribute__((__noreturn__));
# 93 "/usr/include/c++/4.2.1/bits/functexcept.h" 3
}
# 52 "/usr/include/c++/4.2.1/iosfwd" 3
namespace std {
# 54 "/usr/include/c++/4.2.1/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_ios;
# 57 "/usr/include/c++/4.2.1/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_streambuf;
# 60 "/usr/include/c++/4.2.1/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_istream;
# 63 "/usr/include/c++/4.2.1/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_ostream;
# 66 "/usr/include/c++/4.2.1/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class basic_iostream;
# 69 "/usr/include/c++/4.2.1/iosfwd" 3
template< class _CharT, class _Traits = char_traits< _CharT> , class
# 70 "/usr/include/c++/4.2.1/iosfwd" 3
_Alloc = allocator< _CharT> > class basic_stringbuf;
# 73 "/usr/include/c++/4.2.1/iosfwd" 3
template< class _CharT, class _Traits = char_traits< _CharT> , class
# 74 "/usr/include/c++/4.2.1/iosfwd" 3
_Alloc = allocator< _CharT> > class basic_istringstream;
# 77 "/usr/include/c++/4.2.1/iosfwd" 3
template< class _CharT, class _Traits = char_traits< _CharT> , class
# 78 "/usr/include/c++/4.2.1/iosfwd" 3
_Alloc = allocator< _CharT> > class basic_ostringstream;
# 81 "/usr/include/c++/4.2.1/iosfwd" 3
template< class _CharT, class _Traits = char_traits< _CharT> , class
# 82 "/usr/include/c++/4.2.1/iosfwd" 3
_Alloc = allocator< _CharT> > class basic_stringstream;
# 85 "/usr/include/c++/4.2.1/iosfwd" 3
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_filebuf;
# 88 "/usr/include/c++/4.2.1/iosfwd" 3
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ifstream;
# 91 "/usr/include/c++/4.2.1/iosfwd" 3
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ofstream;
# 94 "/usr/include/c++/4.2.1/iosfwd" 3
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_fstream;
# 97 "/usr/include/c++/4.2.1/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class istreambuf_iterator;
# 100 "/usr/include/c++/4.2.1/iosfwd" 3
template < typename _CharT, typename _Traits = char_traits < _CharT > >
    class ostreambuf_iterator;
# 105 "/usr/include/c++/4.2.1/iosfwd" 3
class ios_base;
# 135 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_ios< char, char_traits< char> > ios;
# 136 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_streambuf< char, char_traits< char> > streambuf;
# 137 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_istream< char, char_traits< char> > istream;
# 138 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_ostream< char, char_traits< char> > ostream;
# 139 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_iostream< char, char_traits< char> > iostream;
# 140 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_stringbuf< char, char_traits< char> , allocator< char> > stringbuf;
# 141 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_istringstream< char, char_traits< char> , allocator< char> > istringstream;
# 142 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_ostringstream< char, char_traits< char> , allocator< char> > ostringstream;
# 143 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_stringstream< char, char_traits< char> , allocator< char> > stringstream;
# 144 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_filebuf< char, char_traits< char> > filebuf;
# 145 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_ifstream< char, char_traits< char> > ifstream;
# 146 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_ofstream< char, char_traits< char> > ofstream;
# 147 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_fstream< char, char_traits< char> > fstream;
# 150 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_ios< wchar_t, char_traits< wchar_t> > wios;
# 151 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_streambuf< wchar_t, char_traits< wchar_t> > wstreambuf;
# 152 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_istream< wchar_t, char_traits< wchar_t> > wistream;
# 153 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_ostream< wchar_t, char_traits< wchar_t> > wostream;
# 154 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_iostream< wchar_t, char_traits< wchar_t> > wiostream;
# 155 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_stringbuf< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wstringbuf;
# 156 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_istringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wistringstream;
# 157 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_ostringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wostringstream;
# 158 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_stringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > wstringstream;
# 159 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_filebuf< wchar_t, char_traits< wchar_t> > wfilebuf;
# 160 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_ifstream< wchar_t, char_traits< wchar_t> > wifstream;
# 161 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_ofstream< wchar_t, char_traits< wchar_t> > wofstream;
# 162 "/usr/include/c++/4.2.1/iosfwd" 3
typedef basic_fstream< wchar_t, char_traits< wchar_t> > wfstream;
# 166 "/usr/include/c++/4.2.1/iosfwd" 3
}
# 46 "/usr/include/c++/4.2.1/exception" 3
namespace std {
# 56 "/usr/include/c++/4.2.1/exception" 3
class __attribute__((visibility("default"))) exception {
# 59 "/usr/include/c++/4.2.1/exception" 3
public: exception() throw() { }
# 60 "/usr/include/c++/4.2.1/exception" 3
virtual ~exception() throw();
# 64 "/usr/include/c++/4.2.1/exception" 3
virtual const char *what() const throw();
# 65 "/usr/include/c++/4.2.1/exception" 3
};
# 69 "/usr/include/c++/4.2.1/exception" 3
class __attribute__((visibility("default"))) bad_exception : public exception {
# 72 "/usr/include/c++/4.2.1/exception" 3
public: bad_exception() throw() { }
# 76 "/usr/include/c++/4.2.1/exception" 3
virtual ~bad_exception() throw();
# 79 "/usr/include/c++/4.2.1/exception" 3
virtual const char *what() const throw();
# 80 "/usr/include/c++/4.2.1/exception" 3
};
# 83 "/usr/include/c++/4.2.1/exception" 3
typedef void (*terminate_handler)(void);
# 86 "/usr/include/c++/4.2.1/exception" 3
typedef void (*unexpected_handler)(void);
# 89 "/usr/include/c++/4.2.1/exception" 3
terminate_handler set_terminate(terminate_handler) throw() __attribute__((visibility("default")));
# 93 "/usr/include/c++/4.2.1/exception" 3
void terminate() __attribute__((__noreturn__)) __attribute__((visibility("default")));
# 96 "/usr/include/c++/4.2.1/exception" 3
unexpected_handler set_unexpected(unexpected_handler) throw() __attribute__((visibility("default")));
# 100 "/usr/include/c++/4.2.1/exception" 3
void unexpected() __attribute__((__noreturn__)) __attribute__((visibility("default")));
# 112 "/usr/include/c++/4.2.1/exception" 3
bool uncaught_exception() throw() __attribute__((visibility("default")));
# 113 "/usr/include/c++/4.2.1/exception" 3
}
# 115 "/usr/include/c++/4.2.1/exception" 3
namespace __gnu_cxx {
# 127 "/usr/include/c++/4.2.1/exception" 3
void __verbose_terminate_handler() __attribute__((visibility("default")));
# 129 "/usr/include/c++/4.2.1/exception" 3
}
# 47 "/usr/include/c++/4.2.1/debug/debug.h" 3
namespace std {
# 49 "/usr/include/c++/4.2.1/debug/debug.h" 3
namespace __debug { }
# 50 "/usr/include/c++/4.2.1/debug/debug.h" 3
}
# 52 "/usr/include/c++/4.2.1/debug/debug.h" 3
namespace __gnu_cxx {
# 54 "/usr/include/c++/4.2.1/debug/debug.h" 3
namespace __debug { }
# 55 "/usr/include/c++/4.2.1/debug/debug.h" 3
}
# 57 "/usr/include/c++/4.2.1/debug/debug.h" 3
namespace __gnu_debug {
# 59 "/usr/include/c++/4.2.1/debug/debug.h" 3
using namespace std::__debug;
# 60 "/usr/include/c++/4.2.1/debug/debug.h" 3
using namespace __gnu_cxx::__debug;
# 61 "/usr/include/c++/4.2.1/debug/debug.h" 3
}
# 80 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
namespace std {
# 91 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _Tp >
    inline void
    swap ( _Tp & __a, _Tp & __b )
    {



      _Tp __tmp = __a;
      __a = __b;
      __b = __tmp;
    }
# 106 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template< bool _BoolType>
# 107 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
struct __iter_swap {
# 109 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
        static void
        iter_swap ( _ForwardIterator1 __a, _ForwardIterator2 __b )
        {
          typedef typename iterator_traits < _ForwardIterator1 > :: value_type
            _ValueType1;
          _ValueType1 __tmp = * __a;
          * __a = * __b;
          * __b = __tmp;
 }
# 119 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 122 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template<> struct __iter_swap< true> {
# 124 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
        static void
        iter_swap ( _ForwardIterator1 __a, _ForwardIterator2 __b )
        {
          swap ( * __a, * __b );
        }
# 130 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 141 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    inline void
    iter_swap ( _ForwardIterator1 __a, _ForwardIterator2 __b )
    {
      typedef typename iterator_traits < _ForwardIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _ForwardIterator2 > :: value_type
 _ValueType2;
# 160 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
      typedef typename iterator_traits < _ForwardIterator1 > :: reference
 _ReferenceType1;
      typedef typename iterator_traits < _ForwardIterator2 > :: reference
 _ReferenceType2;
      std :: __iter_swap < __are_same < _ValueType1, _ValueType2 > :: __value &&
 __are_same < _ValueType1 &, _ReferenceType1 > :: __value &&
 __are_same < _ValueType2 &, _ReferenceType2 > :: __value > ::
 iter_swap ( __a, __b );
    }
# 180 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _Tp >
    inline const _Tp &
    min ( const _Tp & __a, const _Tp & __b )
    {



      if ( __b < __a )
 return __b;
      return __a;
    }
# 202 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _Tp >
    inline const _Tp &
    max ( const _Tp & __a, const _Tp & __b )
    {



      if ( __a < __b )
 return __b;
      return __a;
    }
# 224 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _Tp, typename _Compare >
    inline const _Tp &
    min ( const _Tp & __a, const _Tp & __b, _Compare __comp )
    {

      if ( __comp ( __b, __a ) )
 return __b;
      return __a;
    }
# 244 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _Tp, typename _Compare >
    inline const _Tp &
    max ( const _Tp & __a, const _Tp & __b, _Compare __comp )
    {

      if ( __comp ( __a, __b ) )
 return __b;
      return __a;
    }
# 260 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template< bool __T4, class >
# 261 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
struct __copy {
# 263 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _II, typename _OI >
        static _OI
        copy ( _II __first, _II __last, _OI __result )
        {
   for (; __first != __last; ++ __result, ++ __first )
     * __result = * __first;
   return __result;
 }
# 271 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 273 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template< bool _BoolType>
# 274 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
struct __copy< _BoolType, random_access_iterator_tag> {
# 276 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _II, typename _OI >
        static _OI
        copy ( _II __first, _II __last, _OI __result )
        {
   typedef typename iterator_traits < _II > :: difference_type _Distance;
   for ( _Distance __n = __last - __first; __n > 0; -- __n )
     {
       * __result = * __first;
       ++ __first;
       ++ __result;
     }
   return __result;
 }
# 289 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 292 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template<> struct __copy< true, random_access_iterator_tag> {
# 294 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _Tp >
        static _Tp *
        copy ( const _Tp * __first, const _Tp * __last, _Tp * __result )
        {
   std :: memmove ( __result, __first, sizeof ( _Tp ) * ( __last - __first ) );
   return __result + ( __last - __first );
 }
# 301 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 303 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _II, typename _OI >
    inline _OI
    __copy_aux ( _II __first, _II __last, _OI __result )
    {
      typedef typename iterator_traits < _II > :: value_type _ValueTypeI;
      typedef typename iterator_traits < _OI > :: value_type _ValueTypeO;
      typedef typename iterator_traits < _II > :: iterator_category _Category;
      const bool __simple = ( __is_scalar < _ValueTypeI > :: __value
                      && __is_pointer < _II > :: __value
                      && __is_pointer < _OI > :: __value
        && __are_same < _ValueTypeI, _ValueTypeO > :: __value );

      return std :: __copy < __simple, _Category > :: copy ( __first, __last, __result );
    }
# 319 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _CharT >
  typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
      ostreambuf_iterator < _CharT > > :: __type
    __copy_aux ( _CharT *, _CharT *, ostreambuf_iterator < _CharT > );
# 324 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
        ostreambuf_iterator < _CharT > > :: __type
    __copy_aux ( const _CharT *, const _CharT *, ostreambuf_iterator < _CharT > );
# 329 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _CharT >
  typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value, _CharT * > :: __type
    __copy_aux ( istreambuf_iterator < _CharT >, istreambuf_iterator < _CharT >,
        _CharT * );
# 334 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template< bool __T5, bool __T6>
# 335 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
struct __copy_normal {
# 337 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _II, typename _OI >
        static _OI
        __copy_n ( _II __first, _II __last, _OI __result )
        { return std :: __copy_aux ( __first, __last, __result ); }
# 341 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 344 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template<> struct __copy_normal< true, false> {
# 346 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _II, typename _OI >
        static _OI
        __copy_n ( _II __first, _II __last, _OI __result )
        { return std :: __copy_aux ( __first . base ( ), __last . base ( ), __result ); }
# 350 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 353 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template<> struct __copy_normal< false, true> {
# 355 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _II, typename _OI >
        static _OI
        __copy_n ( _II __first, _II __last, _OI __result )
        { return _OI ( std :: __copy_aux ( __first, __last, __result . base ( ) ) ); }
# 359 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 362 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template<> struct __copy_normal< true, true> {
# 364 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _II, typename _OI >
        static _OI
        __copy_n ( _II __first, _II __last, _OI __result )
        { return _OI ( std :: __copy_aux ( __first . base ( ), __last . base ( ),
         __result . base ( ) ) ); }
# 369 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 387 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _InputIterator, typename _OutputIterator >
    inline _OutputIterator
    copy ( _InputIterator __first, _InputIterator __last,
  _OutputIterator __result )
    {




      ;

       const bool __in = __is_normal_iterator < _InputIterator > :: __value;
       const bool __out = __is_normal_iterator < _OutputIterator > :: __value;
       return std :: __copy_normal < __in, __out > :: __copy_n ( __first, __last,
       __result );
    }
# 405 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
                 ostreambuf_iterator < _CharT > > :: __type
    copy ( istreambuf_iterator < _CharT >, istreambuf_iterator < _CharT >,
  ostreambuf_iterator < _CharT > );
# 411 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template< bool __T7, class >
# 412 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
struct __copy_backward {
# 414 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _BI1, typename _BI2 >
        static _BI2
        __copy_b ( _BI1 __first, _BI1 __last, _BI2 __result )
        {
   while ( __first != __last )
     * -- __result = * -- __last;
   return __result;
 }
# 422 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 424 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template< bool _BoolType>
# 425 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
struct __copy_backward< _BoolType, random_access_iterator_tag> {
# 427 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _BI1, typename _BI2 >
        static _BI2
        __copy_b ( _BI1 __first, _BI1 __last, _BI2 __result )
        {
   typename iterator_traits < _BI1 > :: difference_type __n;
   for ( __n = __last - __first; __n > 0; -- __n )
     * -- __result = * -- __last;
   return __result;
 }
# 436 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 439 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template<> struct __copy_backward< true, random_access_iterator_tag> {
# 441 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _Tp >
        static _Tp *
        __copy_b ( const _Tp * __first, const _Tp * __last, _Tp * __result )
        {
   const ptrdiff_t _Num = __last - __first;
   std :: memmove ( __result - _Num, __first, sizeof ( _Tp ) * _Num );
   return __result - _Num;
 }
# 449 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 451 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _BI1, typename _BI2 >
    inline _BI2
    __copy_backward_aux ( _BI1 __first, _BI1 __last, _BI2 __result )
    {
      typedef typename iterator_traits < _BI1 > :: value_type _ValueType1;
      typedef typename iterator_traits < _BI2 > :: value_type _ValueType2;
      typedef typename iterator_traits < _BI1 > :: iterator_category _Category;
      const bool __simple = ( __is_scalar < _ValueType1 > :: __value
                      && __is_pointer < _BI1 > :: __value
                      && __is_pointer < _BI2 > :: __value
        && __are_same < _ValueType1, _ValueType2 > :: __value );

      return std :: __copy_backward < __simple, _Category > :: __copy_b ( __first,
         __last,
         __result );
    }
# 468 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template< bool __T8, bool __T9>
# 469 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
struct __copy_backward_normal {
# 471 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _BI1, typename _BI2 >
        static _BI2
        __copy_b_n ( _BI1 __first, _BI1 __last, _BI2 __result )
        { return std :: __copy_backward_aux ( __first, __last, __result ); }
# 475 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 478 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template<> struct __copy_backward_normal< true, false> {
# 480 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _BI1, typename _BI2 >
        static _BI2
        __copy_b_n ( _BI1 __first, _BI1 __last, _BI2 __result )
        { return std :: __copy_backward_aux ( __first . base ( ), __last . base ( ),
       __result ); }
# 485 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 488 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template<> struct __copy_backward_normal< false, true> {
# 490 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _BI1, typename _BI2 >
        static _BI2
        __copy_b_n ( _BI1 __first, _BI1 __last, _BI2 __result )
        { return _BI2 ( std :: __copy_backward_aux ( __first, __last,
            __result . base ( ) ) ); }
# 495 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 498 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template<> struct __copy_backward_normal< true, true> {
# 500 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _BI1, typename _BI2 >
        static _BI2
        __copy_b_n ( _BI1 __first, _BI1 __last, _BI2 __result )
        { return _BI2 ( std :: __copy_backward_aux ( __first . base ( ), __last . base ( ),
            __result . base ( ) ) ); }
# 505 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 524 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _BI1, typename _BI2 >
    inline _BI2
    copy_backward ( _BI1 __first, _BI1 __last, _BI2 __result )
    {






      ;

      const bool __bi1 = __is_normal_iterator < _BI1 > :: __value;
      const bool __bi2 = __is_normal_iterator < _BI2 > :: __value;
      return std :: __copy_backward_normal < __bi1, __bi2 > :: __copy_b_n ( __first,
           __last,
           __result );
    }
# 543 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template< bool __T10>
# 544 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
struct __fill {
# 546 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _ForwardIterator, typename _Tp >
        static void
        fill ( _ForwardIterator __first, _ForwardIterator __last,
      const _Tp & __value )
        {
   for (; __first != __last; ++ __first )
     * __first = __value;
 }
# 554 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 557 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template<> struct __fill< true> {
# 559 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _ForwardIterator, typename _Tp >
        static void
        fill ( _ForwardIterator __first, _ForwardIterator __last,
      const _Tp & __value )
        {
   const _Tp __tmp = __value;
   for (; __first != __last; ++ __first )
     * __first = __tmp;
 }
# 568 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 581 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _ForwardIterator, typename _Tp >
    void
    fill ( _ForwardIterator __first, _ForwardIterator __last, const _Tp & __value )
    {



      ;

      const bool __scalar = __is_scalar < _Tp > :: __value;
      std :: __fill < __scalar > :: fill ( __first, __last, __value );
    }
# 596 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
inline void fill(unsigned char *__first, unsigned char *__last, const unsigned char &__c)
# 597 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
{
# 598 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
;
# 599 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
const unsigned char __tmp = __c;
# 600 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
std::memset(__first, __tmp, __last - __first);
# 601 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
}
# 604 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
inline void fill(signed char *__first, signed char *__last, const signed char &__c)
# 605 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
{
# 606 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
;
# 607 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
const signed char __tmp = __c;
# 608 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
std::memset(__first, static_cast< unsigned char>(__tmp), __last - __first);
# 609 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
}
# 612 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
inline void fill(char *__first, char *__last, const char &__c)
# 613 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
{
# 614 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
;
# 615 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
const char __tmp = __c;
# 616 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
std::memset(__first, static_cast< unsigned char>(__tmp), __last - __first);
# 617 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
}
# 619 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template< bool __T11>
# 620 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
struct __fill_n {
# 622 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _OutputIterator, typename _Size, typename _Tp >
        static _OutputIterator
        fill_n ( _OutputIterator __first, _Size __n, const _Tp & __value )
        {
   for (; __n > 0; -- __n, ++ __first )
     * __first = __value;
   return __first;
 }
# 630 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 633 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template<> struct __fill_n< true> {
# 635 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _OutputIterator, typename _Size, typename _Tp >
        static _OutputIterator
        fill_n ( _OutputIterator __first, _Size __n, const _Tp & __value )
        {
   const _Tp __tmp = __value;
   for (; __n > 0; -- __n, ++ __first )
     * __first = __tmp;
   return __first;
 }
# 644 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
};
# 657 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _OutputIterator, typename _Size, typename _Tp >
    _OutputIterator
    fill_n ( _OutputIterator __first, _Size __n, const _Tp & __value )
    {



      const bool __scalar = __is_scalar < _Tp > :: __value;
      return std :: __fill_n < __scalar > :: fill_n ( __first, __n, __value );
    }
# 668 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _Size >
    inline unsigned char *
    fill_n ( unsigned char * __first, _Size __n, const unsigned char & __c )
    {
      std :: fill ( __first, __first + __n, __c );
      return __first + __n;
    }
# 676 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _Size >
    inline signed char *
    fill_n ( signed char * __first, _Size __n, const signed char & __c )
    {
      std :: fill ( __first, __first + __n, __c );
      return __first + __n;
    }
# 684 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _Size >
    inline char *
    fill_n ( char * __first, _Size __n, const char & __c )
    {
      std :: fill ( __first, __first + __n, __c );
      return __first + __n;
    }
# 704 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _InputIterator1, typename _InputIterator2 >
    pair < _InputIterator1, _InputIterator2 >
    mismatch ( _InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2 )
    {






      ;

      while ( __first1 != __last1 && * __first1 == * __first2 )
        {
   ++ __first1;
   ++ __first2;
        }
      return pair < _InputIterator1, _InputIterator2 > ( __first1, __first2 );
    }
# 739 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate >
    pair < _InputIterator1, _InputIterator2 >
    mismatch ( _InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred )
    {



      ;

      while ( __first1 != __last1 && __binary_pred ( * __first1, * __first2 ) )
        {
   ++ __first1;
   ++ __first2;
        }
      return pair < _InputIterator1, _InputIterator2 > ( __first1, __first2 );
    }
# 769 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _InputIterator1, typename _InputIterator2 >
    inline bool
    equal ( _InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2 )
    {






      ;

      for (; __first1 != __last1; ++ __first1, ++ __first2 )
 if ( ! ( * __first1 == * __first2 ) )
   return false;
      return true;
    }
# 801 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate >
    inline bool
    equal ( _InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2,
   _BinaryPredicate __binary_pred )
    {



      ;

      for (; __first1 != __last1; ++ __first1, ++ __first2 )
 if ( ! __binary_pred ( * __first1, * __first2 ) )
   return false;
      return true;
    }
# 833 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _InputIterator1, typename _InputIterator2 >
    bool
    lexicographical_compare ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2 )
    {
# 847 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
      ;
      ;

      for (; __first1 != __last1 && __first2 != __last2;
    ++ __first1, ++ __first2 )
 {
   if ( * __first1 < * __first2 )
     return true;
   if ( * __first2 < * __first1 )
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 873 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _Compare >
    bool
    lexicographical_compare ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _Compare __comp )
    {



      ;
      ;

      for (; __first1 != __last1 && __first2 != __last2;
    ++ __first1, ++ __first2 )
 {
   if ( __comp ( * __first1, * __first2 ) )
     return true;
   if ( __comp ( * __first2, * __first1 ) )
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 898 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
inline bool lexicographical_compare(const unsigned char *__first1, const unsigned char *
# 899 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
__last1, const unsigned char *
# 900 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
__first2, const unsigned char *
# 901 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
__last2)
# 902 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
{
# 903 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
;
# 904 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
;
# 906 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
const size_t __len1 = (__last1 - __first1);
# 907 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
const size_t __len2 = (__last2 - __first2);
# 908 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
const int __result = std::memcmp(__first1, __first2, std::min(__len1, __len2));
# 910 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
return (__result != 0) ? (__result < 0) : (__len1 < __len2);
# 911 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
}
# 914 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
inline bool lexicographical_compare(const char *__first1, const char *__last1, const char *
# 915 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
__first2, const char *__last2)
# 916 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
{
# 917 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
;
# 918 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
;
# 921 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
return std::lexicographical_compare((const signed char *)__first1, (const signed char *)__last1, (const signed char *)__first2, (const signed char *)__last2);
# 931 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
}
# 933 "/usr/include/c++/4.2.1/bits/stl_algobase.h" 3
}
# 49 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
namespace __gnu_cxx {
# 61 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
template< class _CharT>
# 62 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
struct _Char_types {
# 64 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
typedef unsigned long int_type;
# 65 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
typedef std::streampos pos_type;
# 66 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
typedef std::streamoff off_type;
# 67 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
typedef mbstate_t state_type;
# 68 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
};
# 86 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
template < typename _CharT >
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types < _CharT > :: int_type int_type;
      typedef typename _Char_types < _CharT > :: pos_type pos_type;
      typedef typename _Char_types < _CharT > :: off_type off_type;
      typedef typename _Char_types < _CharT > :: state_type state_type;

      static void
      assign ( char_type & __c1, const char_type & __c2 )
      { __c1 = __c2; }

      static bool
      eq ( const char_type & __c1, const char_type & __c2 )
      { return __c1 == __c2; }

      static bool
      lt ( const char_type & __c1, const char_type & __c2 )
      { return __c1 < __c2; }

      static int
      compare ( const char_type * __s1, const char_type * __s2, std :: size_t __n );

      static std :: size_t
      length ( const char_type * __s );

      static const char_type *
      find ( const char_type * __s, std :: size_t __n, const char_type & __a );

      static char_type *
      move ( char_type * __s1, const char_type * __s2, std :: size_t __n );

      static char_type *
      copy ( char_type * __s1, const char_type * __s2, std :: size_t __n );

      static char_type *
      assign ( char_type * __s, std :: size_t __n, char_type __a );

      static char_type
      to_char_type ( const int_type & __c )
      { return static_cast < char_type > ( __c ); }

      static int_type
      to_int_type ( const char_type & __c )
      { return static_cast < int_type > ( __c ); }

      static bool
      eq_int_type ( const int_type & __c1, const int_type & __c2 )
      { return __c1 == __c2; }

      static int_type
      eof ( )
      { return static_cast < int_type > ( ( - 1 ) ); }

      static int_type
      not_eof ( const int_type & __c )
      { return ! eq_int_type ( __c, eof ( ) ) ? __c : to_int_type ( char_type ( ) ); }
    };
# 146 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
template < typename _CharT >
    int
    char_traits < _CharT > ::
    compare ( const char_type * __s1, const char_type * __s2, std :: size_t __n )
    {
      for ( std :: size_t __i = 0; __i < __n; ++ __i )
 if ( lt ( __s1 [ __i ], __s2 [ __i ] ) )
   return - 1;
 else if ( lt ( __s2 [ __i ], __s1 [ __i ] ) )
   return 1;
      return 0;
    }
# 159 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
template < typename _CharT >
    std :: size_t
    char_traits < _CharT > ::
    length ( const char_type * __p )
    {
      std :: size_t __i = 0;
      while ( ! eq ( __p [ __i ], char_type ( ) ) )
        ++ __i;
      return __i;
    }
# 170 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
template < typename _CharT >
    const typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    find ( const char_type * __s, std :: size_t __n, const char_type & __a )
    {
      for ( std :: size_t __i = 0; __i < __n; ++ __i )
        if ( eq ( __s [ __i ], __a ) )
          return __s + __i;
      return 0;
    }
# 181 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
template < typename _CharT >
    typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    move ( char_type * __s1, const char_type * __s2, std :: size_t __n )
    {
      return static_cast < _CharT * > ( std :: memmove ( __s1, __s2,
            __n * sizeof ( char_type ) ) );
    }
# 190 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
template < typename _CharT >
    typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    copy ( char_type * __s1, const char_type * __s2, std :: size_t __n )
    {
      std :: copy ( __s2, __s2 + __n, __s1 );
      return __s1;
    }
# 199 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
template < typename _CharT >
    typename char_traits < _CharT > :: char_type *
    char_traits < _CharT > ::
    assign ( char_type * __s, std :: size_t __n, char_type __a )
    {
      std :: fill_n ( __s, __n, __a );
      return __s;
    }
# 208 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
}
# 210 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
namespace std {
# 225 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
template< class _CharT>
# 226 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
struct char_traits : public __gnu_cxx::char_traits< _CharT> {
# 227 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
};
# 232 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
template<> struct char_traits< char> {
# 234 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
typedef char char_type;
# 235 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
typedef int int_type;
# 236 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
typedef streampos pos_type;
# 237 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
typedef streamoff off_type;
# 238 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
typedef mbstate_t state_type;
# 241 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static void assign(char_type &__c1, const char_type &__c2)
# 242 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ __c1 = __c2; }
# 245 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static bool eq(const char_type &__c1, const char_type &__c2)
# 246 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 249 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static bool lt(const char_type &__c1, const char_type &__c2)
# 250 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return __c1 < __c2; }
# 253 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static int compare(const char_type *__s1, const char_type *__s2, size_t __n)
# 254 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return memcmp(__s1, __s2, __n); }
# 257 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static size_t length(const char_type *__s)
# 258 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return strlen(__s); }
# 261 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a)
# 262 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return static_cast< const char_type *>(memchr(__s, __a, __n)); }
# 265 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n)
# 266 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return static_cast< char_type *>(memmove(__s1, __s2, __n)); }
# 269 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n)
# 270 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return static_cast< char_type *>(memcpy(__s1, __s2, __n)); }
# 273 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static char_type *assign(char_type *__s, size_t __n, char_type __a)
# 274 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return static_cast< char_type *>(memset(__s, __a, __n)); }
# 277 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static char_type to_char_type(const int_type &__c)
# 278 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return static_cast< char_type>(__c); }
# 283 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static int_type to_int_type(const char_type &__c)
# 284 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return static_cast< int_type>((static_cast< unsigned char>(__c))); }
# 287 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static bool eq_int_type(const int_type &__c1, const int_type &__c2)
# 288 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 291 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static int_type eof() { return static_cast< int_type>((-1)); }
# 294 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static int_type not_eof(const int_type &__c)
# 295 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return (__c == eof()) ? 0 : __c; }
# 296 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
};
# 302 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
template<> struct char_traits< wchar_t> {
# 304 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
typedef wchar_t char_type;
# 305 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
typedef wint_t int_type;
# 306 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
typedef streamoff off_type;
# 307 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
typedef wstreampos pos_type;
# 308 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
typedef mbstate_t state_type;
# 311 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static void assign(char_type &__c1, const char_type &__c2)
# 312 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ __c1 = __c2; }
# 315 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static bool eq(const char_type &__c1, const char_type &__c2)
# 316 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 319 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static bool lt(const char_type &__c1, const char_type &__c2)
# 320 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return __c1 < __c2; }
# 323 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static int compare(const char_type *__s1, const char_type *__s2, size_t __n)
# 324 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return wmemcmp(__s1, __s2, __n); }
# 327 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static size_t length(const char_type *__s)
# 328 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return wcslen(__s); }
# 331 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a)
# 332 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return wmemchr(__s, __a, __n); }
# 335 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n)
# 336 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return wmemmove(__s1, __s2, __n); }
# 339 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n)
# 340 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return wmemcpy(__s1, __s2, __n); }
# 343 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static char_type *assign(char_type *__s, size_t __n, char_type __a)
# 344 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return wmemset(__s, __a, __n); }
# 347 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static char_type to_char_type(const int_type &__c) { return (char_type)__c; }
# 350 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static int_type to_int_type(const char_type &__c) { return (int_type)__c; }
# 353 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static bool eq_int_type(const int_type &__c1, const int_type &__c2)
# 354 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return __c1 == __c2; }
# 357 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static int_type eof() { return static_cast< int_type>(((__darwin_wint_t)(-1))); }
# 360 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
static int_type not_eof(const int_type &__c)
# 361 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
{ return eq_int_type(__c, eof()) ? 0 : __c; }
# 362 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
};
# 365 "/usr/include/c++/4.2.1/bits/char_traits.h" 3
}
# 50 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
namespace std {
# 53 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
class locale;
# 56 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    inline bool
    isspace ( _CharT, const locale & );
# 60 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    inline bool
    isprint ( _CharT, const locale & );
# 64 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    inline bool
    iscntrl ( _CharT, const locale & );
# 68 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    inline bool
    isupper ( _CharT, const locale & );
# 72 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    inline bool
    islower ( _CharT, const locale & );
# 76 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    inline bool
    isalpha ( _CharT, const locale & );
# 80 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    inline bool
    isdigit ( _CharT, const locale & );
# 84 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    inline bool
    ispunct ( _CharT, const locale & );
# 88 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    inline bool
    isxdigit ( _CharT, const locale & );
# 92 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    inline bool
    isalnum ( _CharT, const locale & );
# 96 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    inline bool
    isgraph ( _CharT, const locale & );
# 100 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    inline _CharT
    toupper ( _CharT, const locale & );
# 104 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    inline _CharT
    tolower ( _CharT, const locale & );
# 109 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
struct ctype_base;
# 110 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    class ctype;
# 112 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template<> class ctype< char> ;
# 114 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template<> class ctype< wchar_t> ;
# 116 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    class ctype_byname;
# 120 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
class codecvt_base;
# 121 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
class __enc_traits;
# 122 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _InternT, typename _ExternT, typename _StateT >
    class codecvt;
# 124 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template<> class codecvt< char, char, __mbstate_t> ;
# 126 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template<> class codecvt< wchar_t, char, __mbstate_t> ;
# 128 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _InternT, typename _ExternT, typename _StateT >
    class codecvt_byname;
# 133 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT, typename _InIter = istreambuf_iterator < _CharT > >
    class num_get;
# 135 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT, typename _OutIter = ostreambuf_iterator < _CharT > >
    class num_put;
# 138 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT > class numpunct;
# 139 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT > class numpunct_byname;
# 142 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    class collate;
# 144 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT > class
    collate_byname;
# 148 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
class time_base;
# 149 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT, typename _InIter = istreambuf_iterator < _CharT > >
    class time_get;
# 151 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT, typename _InIter = istreambuf_iterator < _CharT > >
    class time_get_byname;
# 153 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT, typename _OutIter = ostreambuf_iterator < _CharT > >
    class time_put;
# 155 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT, typename _OutIter = ostreambuf_iterator < _CharT > >
    class time_put_byname;
# 159 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
class money_base;
# 161 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT, typename _InIter = istreambuf_iterator < _CharT > >
    class money_get;
# 163 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT, typename _OutIter = ostreambuf_iterator < _CharT > >
    class money_put;
# 166 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT, bool _Intl = false >
    class moneypunct;
# 168 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT, bool _Intl = false >
    class moneypunct_byname;
# 172 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
struct messages_base;
# 173 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    class messages;
# 175 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _CharT >
    class messages_byname;
# 178 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _Facet >
    bool
    has_facet ( const locale & __loc ) throw ( );
# 182 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _Facet >
    const _Facet &
    use_facet ( const locale & __loc );
# 186 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
template < typename _Facet >
    inline const _Facet &
    __check_facet ( const _Facet * __f )
    {
      if ( ! __f )
 __throw_bad_cast ( );
      return * __f;
    }
# 195 "/usr/include/c++/4.2.1/bits/localefwd.h" 3
}
# 37 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 42 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
namespace __gnu_cxx {
# 50 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
static inline _Atomic_word __exchange_and_add(volatile _Atomic_word *__mem, int __val)
# 51 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
{ return __sync_fetch_and_add_4(__mem, __val); }
# 54 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
static inline void __atomic_add(volatile _Atomic_word *__mem, int __val)
# 55 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
{ __sync_fetch_and_add_4(__mem, __val); }
# 67 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
static inline _Atomic_word __exchange_and_add_single(_Atomic_word *__mem, int __val)
# 68 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
{
# 69 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
_Atomic_word __result = (*__mem);
# 70 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
(*__mem) += __val;
# 71 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
return __result;
# 72 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
}
# 75 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
static inline void __atomic_add_single(_Atomic_word *__mem, int __val)
# 76 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
{ (*__mem) += __val; }
# 80 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
static inline __attribute__((__unused__)) _Atomic_word __exchange_and_add_dispatch(_Atomic_word *__mem, int __val)
# 81 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
{
# 83 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
if (__gthread_active_p()) {
# 84 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
return __exchange_and_add(__mem, __val); } else {
# 86 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
return __exchange_and_add_single(__mem, __val); }
# 90 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
}
# 94 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
static inline __attribute__((__unused__)) void __atomic_add_dispatch(_Atomic_word *__mem, int __val)
# 95 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
{
# 97 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
if (__gthread_active_p()) {
# 98 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
__atomic_add(__mem, __val); } else {
# 100 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
__atomic_add_single(__mem, __val); }
# 104 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
}
# 106 "/usr/include/c++/4.2.1/ext/atomicity.h" 3
}
# 51 "/usr/include/c++/4.2.1/new" 3
namespace std {
# 58 "/usr/include/c++/4.2.1/new" 3
class __attribute__((visibility("default"))) bad_alloc : public exception {
# 61 "/usr/include/c++/4.2.1/new" 3
public: bad_alloc() throw() { }
# 65 "/usr/include/c++/4.2.1/new" 3
virtual ~bad_alloc() throw();
# 68 "/usr/include/c++/4.2.1/new" 3
virtual const char *what() const throw();
# 69 "/usr/include/c++/4.2.1/new" 3
};
# 71 "/usr/include/c++/4.2.1/new" 3
struct __attribute__((visibility("default"))) nothrow_t { };
# 73 "/usr/include/c++/4.2.1/new" 3
extern const nothrow_t nothrow __attribute__((visibility("default")));
# 77 "/usr/include/c++/4.2.1/new" 3
typedef void (*new_handler)(void);
# 81 "/usr/include/c++/4.2.1/new" 3
new_handler set_new_handler(new_handler) throw() __attribute__((visibility("default")));
# 82 "/usr/include/c++/4.2.1/new" 3
}
# 95 "/usr/include/c++/4.2.1/new" 3
void *operator new(size_t) throw(std::bad_alloc) __attribute__((visibility("default")));
# 96 "/usr/include/c++/4.2.1/new" 3
void *operator new[](size_t) throw(std::bad_alloc) __attribute__((visibility("default")));
# 97 "/usr/include/c++/4.2.1/new" 3
void operator delete(void *) throw() __attribute__((visibility("default")));
# 98 "/usr/include/c++/4.2.1/new" 3
void operator delete[](void *) throw() __attribute__((visibility("default")));
# 99 "/usr/include/c++/4.2.1/new" 3
void *operator new(size_t, const std::nothrow_t &) throw() __attribute__((visibility("default")));
# 100 "/usr/include/c++/4.2.1/new" 3
void *operator new[](size_t, const std::nothrow_t &) throw() __attribute__((visibility("default")));
# 101 "/usr/include/c++/4.2.1/new" 3
void operator delete(void *, const std::nothrow_t &) throw() __attribute__((visibility("default")));
# 102 "/usr/include/c++/4.2.1/new" 3
void operator delete[](void *, const std::nothrow_t &) throw() __attribute__((visibility("default")));
# 105 "/usr/include/c++/4.2.1/new" 3
inline __attribute__((visibility("default"))) void *operator new(size_t, void *__p) throw() { return __p; }
# 106 "/usr/include/c++/4.2.1/new" 3
inline __attribute__((visibility("default"))) void *operator new[](size_t, void *__p) throw() { return __p; }
# 109 "/usr/include/c++/4.2.1/new" 3
inline __attribute__((visibility("default"))) void operator delete(void *, void *) throw() { }
# 110 "/usr/include/c++/4.2.1/new" 3
inline __attribute__((visibility("default"))) void operator delete[](void *, void *) throw() { }
# 40 "/usr/include/c++/4.2.1/ext/new_allocator.h" 3
namespace __gnu_cxx {
# 42 "/usr/include/c++/4.2.1/ext/new_allocator.h" 3
using std::size_t;
# 43 "/usr/include/c++/4.2.1/ext/new_allocator.h" 3
using std::ptrdiff_t;
# 52 "/usr/include/c++/4.2.1/ext/new_allocator.h" 3
template < typename _Tp >
    class new_allocator
    {
    public :
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp * pointer;
      typedef const _Tp * const_pointer;
      typedef _Tp & reference;
      typedef const _Tp & const_reference;
      typedef _Tp value_type;

      template < typename _Tp1 >
        struct rebind
        { typedef new_allocator < _Tp1 > other; };

      new_allocator ( ) throw ( ) { }

      new_allocator ( const new_allocator & ) throw ( ) { }

      template < typename _Tp1 >
        new_allocator ( const new_allocator < _Tp1 > & ) throw ( ) { }

      ~ new_allocator ( ) throw ( ) { }

      pointer
      address ( reference __x ) const { return & __x; }

      const_pointer
      address ( const_reference __x ) const { return & __x; }



      pointer
      allocate ( size_type __n, const void * = 0 )
      {
 if ( __builtin_expect ( __n > this -> max_size ( ), false ) )
   std :: __throw_bad_alloc ( );

 return static_cast < _Tp * > ( :: operator new ( __n * sizeof ( _Tp ) ) );
      }


      void
      deallocate ( pointer __p, size_type )
      { :: operator delete ( __p ); }

      size_type
      max_size ( ) const throw ( )
      { return size_t ( - 1 ) / sizeof ( _Tp ); }



      void
      construct ( pointer __p, const _Tp & __val )
      { :: new ( __p ) _Tp ( __val ); }

      void
      destroy ( pointer __p ) { __p -> ~ _Tp ( ); }
    };
# 113 "/usr/include/c++/4.2.1/ext/new_allocator.h" 3
template < typename _Tp >
    inline bool
    operator == ( const new_allocator < _Tp > &, const new_allocator < _Tp > & )
    { return true; }
# 118 "/usr/include/c++/4.2.1/ext/new_allocator.h" 3
template < typename _Tp >
    inline bool
    operator != ( const new_allocator < _Tp > &, const new_allocator < _Tp > & )
    { return false; }
# 123 "/usr/include/c++/4.2.1/ext/new_allocator.h" 3
}
# 57 "/usr/include/c++/4.2.1/bits/allocator.h" 3
namespace std {
# 59 "/usr/include/c++/4.2.1/bits/allocator.h" 3
template< class _Tp> class allocator;
# 64 "/usr/include/c++/4.2.1/bits/allocator.h" 3
template<> class allocator< void> {
# 67 "/usr/include/c++/4.2.1/bits/allocator.h" 3
public: typedef size_t size_type;
# 68 "/usr/include/c++/4.2.1/bits/allocator.h" 3
typedef ptrdiff_t difference_type;
# 69 "/usr/include/c++/4.2.1/bits/allocator.h" 3
typedef void *pointer;
# 70 "/usr/include/c++/4.2.1/bits/allocator.h" 3
typedef const void *const_pointer;
# 71 "/usr/include/c++/4.2.1/bits/allocator.h" 3
typedef void value_type;
# 73 "/usr/include/c++/4.2.1/bits/allocator.h" 3
template< class _Tp1>
# 74 "/usr/include/c++/4.2.1/bits/allocator.h" 3
struct rebind {
# 75 "/usr/include/c++/4.2.1/bits/allocator.h" 3
typedef std::allocator< _Tp1> other; };
# 76 "/usr/include/c++/4.2.1/bits/allocator.h" 3
};
# 84 "/usr/include/c++/4.2.1/bits/allocator.h" 3
template < typename _Tp >
    class allocator : public __gnu_cxx :: new_allocator < _Tp >
    {
   public :
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp * pointer;
      typedef const _Tp * const_pointer;
      typedef _Tp & reference;
      typedef const _Tp & const_reference;
      typedef _Tp value_type;

      template < typename _Tp1 >
        struct rebind
        { typedef allocator < _Tp1 > other; };

      allocator ( ) throw ( ) { }

      allocator ( const allocator & __a ) throw ( )
      : __gnu_cxx :: new_allocator < _Tp > ( __a ) { }

      template < typename _Tp1 >
        allocator ( const allocator < _Tp1 > & ) throw ( ) { }

      ~ allocator ( ) throw ( ) { }


    };
# 113 "/usr/include/c++/4.2.1/bits/allocator.h" 3
template < typename _T1, typename _T2 >
    inline bool
    operator == ( const allocator < _T1 > &, const allocator < _T2 > & )
    { return true; }
# 118 "/usr/include/c++/4.2.1/bits/allocator.h" 3
template < typename _T1, typename _T2 >
    inline bool
    operator != ( const allocator < _T1 > &, const allocator < _T2 > & )
    { return false; }
# 127 "/usr/include/c++/4.2.1/bits/allocator.h" 3
extern template class allocator< char> ;
# 128 "/usr/include/c++/4.2.1/bits/allocator.h" 3
extern template class allocator< wchar_t> ;
# 135 "/usr/include/c++/4.2.1/bits/allocator.h" 3
template < typename _Alloc, bool = std :: __is_empty < _Alloc > :: __value >
    struct __alloc_swap
    { static void _S_do_it ( _Alloc &, _Alloc & ) { } };
# 139 "/usr/include/c++/4.2.1/bits/allocator.h" 3
template < typename _Alloc >
    struct __alloc_swap < _Alloc, false >
    {
      static void
      _S_do_it ( _Alloc & __one, _Alloc & __two )
      {

 if ( __one != __two )
   swap ( __one, __two );
      }
    };
# 151 "/usr/include/c++/4.2.1/bits/allocator.h" 3
}
# 67 "/usr/include/c++/4.2.1/bits/stl_construct.h" 3
namespace std {
# 75 "/usr/include/c++/4.2.1/bits/stl_construct.h" 3
template < typename _T1, typename _T2 >
    inline void
    _Construct ( _T1 * __p, const _T2 & __value )
    {


      :: new ( static_cast < void * > ( __p ) ) _T1 ( __value );
    }
# 90 "/usr/include/c++/4.2.1/bits/stl_construct.h" 3
template < typename _T1 >
    inline void
    _Construct ( _T1 * __p )
    {


      :: new ( static_cast < void * > ( __p ) ) _T1 ( );
    }
# 104 "/usr/include/c++/4.2.1/bits/stl_construct.h" 3
template < typename _Tp >
    inline void
    _Destroy ( _Tp * __pointer )
    { __pointer -> ~ _Tp ( ); }
# 116 "/usr/include/c++/4.2.1/bits/stl_construct.h" 3
template < typename _ForwardIterator >
    inline void
    __destroy_aux ( _ForwardIterator __first, _ForwardIterator __last,
    __false_type )
    {
      for (; __first != __last; ++ __first )
 std :: _Destroy ( & * __first );
    }
# 134 "/usr/include/c++/4.2.1/bits/stl_construct.h" 3
template < typename _ForwardIterator >
    inline void
    __destroy_aux ( _ForwardIterator, _ForwardIterator, __true_type )
    { }
# 146 "/usr/include/c++/4.2.1/bits/stl_construct.h" 3
template < typename _ForwardIterator >
    inline void
    _Destroy ( _ForwardIterator __first, _ForwardIterator __last )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
                       _Value_type;
      typedef typename std :: __is_scalar < _Value_type > :: __type
                _Has_trivial_destructor;

      std :: __destroy_aux ( __first, __last, _Has_trivial_destructor ( ) );
    }
# 166 "/usr/include/c++/4.2.1/bits/stl_construct.h" 3
template< class _Tp> class allocator;
# 168 "/usr/include/c++/4.2.1/bits/stl_construct.h" 3
template < typename _ForwardIterator, typename _Allocator >
    void
    _Destroy ( _ForwardIterator __first, _ForwardIterator __last,
      _Allocator __alloc )
    {
      for (; __first != __last; ++ __first )
 __alloc . destroy ( & * __first );
    }
# 177 "/usr/include/c++/4.2.1/bits/stl_construct.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline void
    _Destroy ( _ForwardIterator __first, _ForwardIterator __last,
      allocator < _Tp > )
    {
      _Destroy ( __first, __last );
    }
# 185 "/usr/include/c++/4.2.1/bits/stl_construct.h" 3
}
# 67 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
namespace std {
# 70 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator >
    inline _ForwardIterator
    __uninitialized_copy_aux ( _InputIterator __first, _InputIterator __last,
        _ForwardIterator __result,
        __true_type )
    { return std :: copy ( __first, __last, __result ); }
# 77 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator >
    inline _ForwardIterator
    __uninitialized_copy_aux ( _InputIterator __first, _InputIterator __last,
        _ForwardIterator __result,
        __false_type )
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __first != __last; ++ __first, ++ __cur )
     std :: _Construct ( & * __cur, * __first );
   return __cur;
 }
      catch ( ... )
 {
   std :: _Destroy ( __result, __cur );
   throw;
 }
    }
# 106 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator >
    inline _ForwardIterator
    uninitialized_copy ( _InputIterator __first, _InputIterator __last,
         _ForwardIterator __result )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type _ValueType;
      typedef typename std :: __is_scalar < _ValueType > :: __type _Is_POD;
      return std :: __uninitialized_copy_aux ( __first, __last, __result,
        _Is_POD ( ) );
    }
# 118 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
inline char *uninitialized_copy(const char *__first, const char *__last, char *__result)
# 119 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
{
# 120 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
std::memmove(__result, __first, __last - __first);
# 121 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
return __result + (__last - __first);
# 122 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
}
# 125 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
inline wchar_t *uninitialized_copy(const wchar_t *__first, const wchar_t *__last, wchar_t *
# 126 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
__result)
# 127 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
{
# 128 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
std::memmove(__result, __first, sizeof(wchar_t) * (__last - __first));
# 129 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
return __result + (__last - __first);
# 130 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
}
# 134 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline void
    __uninitialized_fill_aux ( _ForwardIterator __first,
        _ForwardIterator __last,
        const _Tp & __x, __true_type )
    { std :: fill ( __first, __last, __x ); }
# 141 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp >
    void
    __uninitialized_fill_aux ( _ForwardIterator __first, _ForwardIterator __last,
        const _Tp & __x, __false_type )
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __cur != __last; ++ __cur )
     std :: _Construct ( & * __cur, __x );
 }
      catch ( ... )
 {
   std :: _Destroy ( __first, __cur );
   throw;
 }
    }
# 168 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp >
    inline void
    uninitialized_fill ( _ForwardIterator __first, _ForwardIterator __last,
         const _Tp & __x )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type _ValueType;
      typedef typename std :: __is_scalar < _ValueType > :: __type _Is_POD;
      std :: __uninitialized_fill_aux ( __first, __last, __x, _Is_POD ( ) );
    }
# 180 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Size, typename _Tp >
    inline void
    __uninitialized_fill_n_aux ( _ForwardIterator __first, _Size __n,
          const _Tp & __x, __true_type )
    { std :: fill_n ( __first, __n, __x ); }
# 186 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Size, typename _Tp >
    void
    __uninitialized_fill_n_aux ( _ForwardIterator __first, _Size __n,
          const _Tp & __x, __false_type )
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __n > 0; -- __n, ++ __cur )
     std :: _Construct ( & * __cur, __x );
 }
      catch ( ... )
 {
   std :: _Destroy ( __first, __cur );
   throw;
 }
    }
# 213 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Size, typename _Tp >
    inline void
    uninitialized_fill_n ( _ForwardIterator __first, _Size __n, const _Tp & __x )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type _ValueType;
      typedef typename std :: __is_scalar < _ValueType > :: __type _Is_POD;
      std :: __uninitialized_fill_n_aux ( __first, __n, __x, _Is_POD ( ) );
    }
# 228 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator,
    typename _Allocator >
    _ForwardIterator
    __uninitialized_copy_a ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result,
      _Allocator __alloc )
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __first != __last; ++ __first, ++ __cur )
     __alloc . construct ( & * __cur, * __first );
   return __cur;
 }
      catch ( ... )
 {
   std :: _Destroy ( __result, __cur, __alloc );
   throw;
 }
    }
# 249 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator, typename _Tp >
    inline _ForwardIterator
    __uninitialized_copy_a ( _InputIterator __first, _InputIterator __last,
      _ForwardIterator __result,
      allocator < _Tp > )
    { return std :: uninitialized_copy ( __first, __last, __result ); }
# 256 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Allocator >
    void
    __uninitialized_fill_a ( _ForwardIterator __first, _ForwardIterator __last,
      const _Tp & __x, _Allocator __alloc )
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __cur != __last; ++ __cur )
     __alloc . construct ( & * __cur, __x );
 }
      catch ( ... )
 {
   std :: _Destroy ( __first, __cur, __alloc );
   throw;
 }
    }
# 274 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Tp2 >
    inline void
    __uninitialized_fill_a ( _ForwardIterator __first, _ForwardIterator __last,
      const _Tp & __x, allocator < _Tp2 > )
    { std :: uninitialized_fill ( __first, __last, __x ); }
# 280 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator >
    void
    __uninitialized_fill_n_a ( _ForwardIterator __first, _Size __n,
        const _Tp & __x,
        _Allocator __alloc )
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __n > 0; -- __n, ++ __cur )
     __alloc . construct ( & * __cur, __x );
 }
      catch ( ... )
 {
   std :: _Destroy ( __first, __cur, __alloc );
   throw;
 }
    }
# 300 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2 >
    inline void
    __uninitialized_fill_n_a ( _ForwardIterator __first, _Size __n,
        const _Tp & __x,
        allocator < _Tp2 > )
    { std :: uninitialized_fill_n ( __first, __n, __x ); }
# 318 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator >
    inline _ForwardIterator
    __uninitialized_copy_copy ( _InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator __alloc )
    {
      _ForwardIterator __mid = std :: __uninitialized_copy_a ( __first1, __last1,
          __result,
          __alloc );
      try
 {
   return std :: __uninitialized_copy_a ( __first2, __last2, __mid, __alloc );
 }
      catch ( ... )
 {
   std :: _Destroy ( __result, __mid, __alloc );
   throw;
 }
    }
# 345 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator >
    inline _ForwardIterator
    __uninitialized_fill_copy ( _ForwardIterator __result, _ForwardIterator __mid,
         const _Tp & __x, _InputIterator __first,
         _InputIterator __last,
         _Allocator __alloc )
    {
      std :: __uninitialized_fill_a ( __result, __mid, __x, __alloc );
      try
 {
   return std :: __uninitialized_copy_a ( __first, __last, __mid, __alloc );
 }
      catch ( ... )
 {
   std :: _Destroy ( __result, __mid, __alloc );
   throw;
 }
    }
# 368 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
template < typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator >
    inline void
    __uninitialized_copy_fill ( _InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp & __x,
         _Allocator __alloc )
    {
      _ForwardIterator __mid2 = std :: __uninitialized_copy_a ( __first1, __last1,
           __first2,
           __alloc );
      try
 {
   std :: __uninitialized_fill_a ( __mid2, __last2, __x, __alloc );
 }
      catch ( ... )
 {
   std :: _Destroy ( __first2, __mid2, __alloc );
   throw;
 }
    }
# 390 "/usr/include/c++/4.2.1/bits/stl_uninitialized.h" 3
}
# 64 "/usr/include/c++/4.2.1/bits/stl_raw_storage_iter.h" 3
namespace std {
# 70 "/usr/include/c++/4.2.1/bits/stl_raw_storage_iter.h" 3
template < class _ForwardIterator, class _Tp >
    class raw_storage_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    protected :
      _ForwardIterator _M_iter;

    public :
      explicit
      raw_storage_iterator ( _ForwardIterator __x )
      : _M_iter ( __x ) { }

      raw_storage_iterator &
      operator * ( ) { return * this; }

      raw_storage_iterator &
      operator = ( const _Tp & __element )
      {
 std :: _Construct ( & * _M_iter, __element );
 return * this;
      }

      raw_storage_iterator < _ForwardIterator, _Tp > &
      operator ++ ( )
      {
 ++ _M_iter;
 return * this;
      }

      raw_storage_iterator < _ForwardIterator, _Tp >
      operator ++ ( int )
      {
 raw_storage_iterator < _ForwardIterator, _Tp > __tmp = * this;
 ++ _M_iter;
 return __tmp;
      }
    };
# 108 "/usr/include/c++/4.2.1/bits/stl_raw_storage_iter.h" 3
}
# 150 "/usr/include/c++/4.2.1/limits" 3
namespace std {
# 157 "/usr/include/c++/4.2.1/limits" 3
enum float_round_style {
# 159 "/usr/include/c++/4.2.1/limits" 3
round_indeterminate = (-1),
# 160 "/usr/include/c++/4.2.1/limits" 3
round_toward_zero = 0,
# 161 "/usr/include/c++/4.2.1/limits" 3
round_to_nearest,
# 162 "/usr/include/c++/4.2.1/limits" 3
round_toward_infinity,
# 163 "/usr/include/c++/4.2.1/limits" 3
round_toward_neg_infinity
# 164 "/usr/include/c++/4.2.1/limits" 3
};
# 172 "/usr/include/c++/4.2.1/limits" 3
enum float_denorm_style {
# 175 "/usr/include/c++/4.2.1/limits" 3
denorm_indeterminate = (-1),
# 177 "/usr/include/c++/4.2.1/limits" 3
denorm_absent = 0,
# 179 "/usr/include/c++/4.2.1/limits" 3
denorm_present
# 180 "/usr/include/c++/4.2.1/limits" 3
};
# 192 "/usr/include/c++/4.2.1/limits" 3
struct __numeric_limits_base {
# 196 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = false;
# 201 "/usr/include/c++/4.2.1/limits" 3
static const int digits = 0;
# 203 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = 0;
# 205 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = false;
# 211 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = false;
# 216 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = false;
# 219 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 0;
# 223 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = 0;
# 226 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = 0;
# 230 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 0;
# 233 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 0;
# 236 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = false;
# 239 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = false;
# 242 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = false;
# 244 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 247 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 251 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = false;
# 255 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = false;
# 260 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = false;
# 263 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = false;
# 265 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 269 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_toward_zero;
# 270 "/usr/include/c++/4.2.1/limits" 3
};
# 285 "/usr/include/c++/4.2.1/limits" 3
template < typename _Tp >
    struct numeric_limits : public __numeric_limits_base
    {


      static _Tp min ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }

      static _Tp max ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }


      static _Tp epsilon ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }

      static _Tp round_error ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }

      static _Tp infinity ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }

      static _Tp quiet_NaN ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }


      static _Tp signaling_NaN ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }



      static _Tp denorm_min ( ) throw ( ) { return static_cast < _Tp > ( 0 ); }
    };
# 316 "/usr/include/c++/4.2.1/limits" 3
template<> struct numeric_limits< bool> {
# 318 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = true;
# 320 "/usr/include/c++/4.2.1/limits" 3
static bool min() throw()
# 321 "/usr/include/c++/4.2.1/limits" 3
{ return false; }
# 322 "/usr/include/c++/4.2.1/limits" 3
static bool max() throw()
# 323 "/usr/include/c++/4.2.1/limits" 3
{ return true; }
# 325 "/usr/include/c++/4.2.1/limits" 3
static const int digits = 1;
# 326 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = 0;
# 327 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = false;
# 328 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = true;
# 329 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = true;
# 330 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 2;
# 331 "/usr/include/c++/4.2.1/limits" 3
static bool epsilon() throw()
# 332 "/usr/include/c++/4.2.1/limits" 3
{ return false; }
# 333 "/usr/include/c++/4.2.1/limits" 3
static bool round_error() throw()
# 334 "/usr/include/c++/4.2.1/limits" 3
{ return false; }
# 336 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = 0;
# 337 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = 0;
# 338 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 0;
# 339 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 0;
# 341 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = false;
# 342 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = false;
# 343 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = false;
# 344 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 345 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 347 "/usr/include/c++/4.2.1/limits" 3
static bool infinity() throw()
# 348 "/usr/include/c++/4.2.1/limits" 3
{ return false; }
# 349 "/usr/include/c++/4.2.1/limits" 3
static bool quiet_NaN() throw()
# 350 "/usr/include/c++/4.2.1/limits" 3
{ return false; }
# 351 "/usr/include/c++/4.2.1/limits" 3
static bool signaling_NaN() throw()
# 352 "/usr/include/c++/4.2.1/limits" 3
{ return false; }
# 353 "/usr/include/c++/4.2.1/limits" 3
static bool denorm_min() throw()
# 354 "/usr/include/c++/4.2.1/limits" 3
{ return false; }
# 356 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = false;
# 357 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = true;
# 358 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = false;
# 363 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = true;
# 364 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 365 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_toward_zero;
# 366 "/usr/include/c++/4.2.1/limits" 3
};
# 370 "/usr/include/c++/4.2.1/limits" 3
template<> struct numeric_limits< char> {
# 372 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = true;
# 374 "/usr/include/c++/4.2.1/limits" 3
static char min() throw()
# 375 "/usr/include/c++/4.2.1/limits" 3
{ return (((char)(-1)) < 0) ? (((char)1) << ((sizeof(char) * (8)) - (((char)(-1)) < 0))) : ((char)0); }
# 376 "/usr/include/c++/4.2.1/limits" 3
static char max() throw()
# 377 "/usr/include/c++/4.2.1/limits" 3
{ return (((char)(-1)) < 0) ? ((((char)1) << ((sizeof(char) * (8)) - (((char)(-1)) < 0))) - 1) : (~((char)0)); }
# 379 "/usr/include/c++/4.2.1/limits" 3
static const int digits = ((sizeof(char) * (8)) - (((char)(-1)) < 0));
# 380 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = ((((sizeof(char) * (8)) - (((char)(-1)) < 0)) * (643)) / (2136));
# 381 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = (((char)(-1)) < 0);
# 382 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = true;
# 383 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = true;
# 384 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 2;
# 385 "/usr/include/c++/4.2.1/limits" 3
static char epsilon() throw()
# 386 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 387 "/usr/include/c++/4.2.1/limits" 3
static char round_error() throw()
# 388 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 390 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = 0;
# 391 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = 0;
# 392 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 0;
# 393 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 0;
# 395 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = false;
# 396 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = false;
# 397 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = false;
# 398 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 399 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 401 "/usr/include/c++/4.2.1/limits" 3
static char infinity() throw()
# 402 "/usr/include/c++/4.2.1/limits" 3
{ return (char)0; }
# 403 "/usr/include/c++/4.2.1/limits" 3
static char quiet_NaN() throw()
# 404 "/usr/include/c++/4.2.1/limits" 3
{ return (char)0; }
# 405 "/usr/include/c++/4.2.1/limits" 3
static char signaling_NaN() throw()
# 406 "/usr/include/c++/4.2.1/limits" 3
{ return (char)0; }
# 407 "/usr/include/c++/4.2.1/limits" 3
static char denorm_min() throw()
# 408 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< char>(0); }
# 410 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = false;
# 411 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = true;
# 412 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = true;
# 414 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = true;
# 415 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 416 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_toward_zero;
# 417 "/usr/include/c++/4.2.1/limits" 3
};
# 421 "/usr/include/c++/4.2.1/limits" 3
template<> struct numeric_limits< signed char> {
# 423 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = true;
# 425 "/usr/include/c++/4.2.1/limits" 3
static signed char min() throw()
# 426 "/usr/include/c++/4.2.1/limits" 3
{ return (-127) - 1; }
# 427 "/usr/include/c++/4.2.1/limits" 3
static signed char max() throw()
# 428 "/usr/include/c++/4.2.1/limits" 3
{ return 127; }
# 430 "/usr/include/c++/4.2.1/limits" 3
static const int digits = ((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0));
# 431 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = ((((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)) * (643)) / (2136));
# 432 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = true;
# 433 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = true;
# 434 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = true;
# 435 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 2;
# 436 "/usr/include/c++/4.2.1/limits" 3
static signed char epsilon() throw()
# 437 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 438 "/usr/include/c++/4.2.1/limits" 3
static signed char round_error() throw()
# 439 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 441 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = 0;
# 442 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = 0;
# 443 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 0;
# 444 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 0;
# 446 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = false;
# 447 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = false;
# 448 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = false;
# 449 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 450 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 452 "/usr/include/c++/4.2.1/limits" 3
static signed char infinity() throw()
# 453 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< signed char>(0); }
# 454 "/usr/include/c++/4.2.1/limits" 3
static signed char quiet_NaN() throw()
# 455 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< signed char>(0); }
# 456 "/usr/include/c++/4.2.1/limits" 3
static signed char signaling_NaN() throw()
# 457 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< signed char>(0); }
# 458 "/usr/include/c++/4.2.1/limits" 3
static signed char denorm_min() throw()
# 459 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< signed char>(0); }
# 461 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = false;
# 462 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = true;
# 463 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = true;
# 465 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = true;
# 466 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 467 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_toward_zero;
# 468 "/usr/include/c++/4.2.1/limits" 3
};
# 472 "/usr/include/c++/4.2.1/limits" 3
template<> struct numeric_limits< unsigned char> {
# 474 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = true;
# 476 "/usr/include/c++/4.2.1/limits" 3
static unsigned char min() throw()
# 477 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 478 "/usr/include/c++/4.2.1/limits" 3
static unsigned char max() throw()
# 479 "/usr/include/c++/4.2.1/limits" 3
{ return ((127) * 2U) + (1); }
# 481 "/usr/include/c++/4.2.1/limits" 3
static const int digits = ((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0));
# 482 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = ((((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)) * (643)) / (2136));
# 483 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = false;
# 484 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = true;
# 485 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = true;
# 486 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 2;
# 487 "/usr/include/c++/4.2.1/limits" 3
static unsigned char epsilon() throw()
# 488 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 489 "/usr/include/c++/4.2.1/limits" 3
static unsigned char round_error() throw()
# 490 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 492 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = 0;
# 493 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = 0;
# 494 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 0;
# 495 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 0;
# 497 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = false;
# 498 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = false;
# 499 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = false;
# 500 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 501 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 503 "/usr/include/c++/4.2.1/limits" 3
static unsigned char infinity() throw()
# 504 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned char>(0); }
# 505 "/usr/include/c++/4.2.1/limits" 3
static unsigned char quiet_NaN() throw()
# 506 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned char>(0); }
# 507 "/usr/include/c++/4.2.1/limits" 3
static unsigned char signaling_NaN() throw()
# 508 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned char>(0); }
# 509 "/usr/include/c++/4.2.1/limits" 3
static unsigned char denorm_min() throw()
# 510 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned char>(0); }
# 512 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = false;
# 513 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = true;
# 514 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = true;
# 516 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = true;
# 517 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 518 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_toward_zero;
# 519 "/usr/include/c++/4.2.1/limits" 3
};
# 523 "/usr/include/c++/4.2.1/limits" 3
template<> struct numeric_limits< wchar_t> {
# 525 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = true;
# 527 "/usr/include/c++/4.2.1/limits" 3
static wchar_t min() throw()
# 528 "/usr/include/c++/4.2.1/limits" 3
{ return (((wchar_t)(-1)) < 0) ? (((wchar_t)1) << ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0))) : ((wchar_t)0); }
# 529 "/usr/include/c++/4.2.1/limits" 3
static wchar_t max() throw()
# 530 "/usr/include/c++/4.2.1/limits" 3
{ return (((wchar_t)(-1)) < 0) ? ((((wchar_t)1) << ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0))) - 1) : (~((wchar_t)0)); }
# 532 "/usr/include/c++/4.2.1/limits" 3
static const int digits = ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0));
# 533 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = ((((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) * (643)) / (2136));
# 534 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = (((wchar_t)(-1)) < 0);
# 535 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = true;
# 536 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = true;
# 537 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 2;
# 538 "/usr/include/c++/4.2.1/limits" 3
static wchar_t epsilon() throw()
# 539 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 540 "/usr/include/c++/4.2.1/limits" 3
static wchar_t round_error() throw()
# 541 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 543 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = 0;
# 544 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = 0;
# 545 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 0;
# 546 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 0;
# 548 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = false;
# 549 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = false;
# 550 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = false;
# 551 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 552 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 554 "/usr/include/c++/4.2.1/limits" 3
static wchar_t infinity() throw()
# 555 "/usr/include/c++/4.2.1/limits" 3
{ return (wchar_t)0; }
# 556 "/usr/include/c++/4.2.1/limits" 3
static wchar_t quiet_NaN() throw()
# 557 "/usr/include/c++/4.2.1/limits" 3
{ return (wchar_t)0; }
# 558 "/usr/include/c++/4.2.1/limits" 3
static wchar_t signaling_NaN() throw()
# 559 "/usr/include/c++/4.2.1/limits" 3
{ return (wchar_t)0; }
# 560 "/usr/include/c++/4.2.1/limits" 3
static wchar_t denorm_min() throw()
# 561 "/usr/include/c++/4.2.1/limits" 3
{ return (wchar_t)0; }
# 563 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = false;
# 564 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = true;
# 565 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = true;
# 567 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = true;
# 568 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 569 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_toward_zero;
# 570 "/usr/include/c++/4.2.1/limits" 3
};
# 574 "/usr/include/c++/4.2.1/limits" 3
template<> struct numeric_limits< short> {
# 576 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = true;
# 578 "/usr/include/c++/4.2.1/limits" 3
static short min() throw()
# 579 "/usr/include/c++/4.2.1/limits" 3
{ return (-32767) - 1; }
# 580 "/usr/include/c++/4.2.1/limits" 3
static short max() throw()
# 581 "/usr/include/c++/4.2.1/limits" 3
{ return 32767; }
# 583 "/usr/include/c++/4.2.1/limits" 3
static const int digits = ((sizeof(short) * (8)) - (((short)(-1)) < 0));
# 584 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = ((((sizeof(short) * (8)) - (((short)(-1)) < 0)) * (643)) / (2136));
# 585 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = true;
# 586 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = true;
# 587 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = true;
# 588 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 2;
# 589 "/usr/include/c++/4.2.1/limits" 3
static short epsilon() throw()
# 590 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 591 "/usr/include/c++/4.2.1/limits" 3
static short round_error() throw()
# 592 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 594 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = 0;
# 595 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = 0;
# 596 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 0;
# 597 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 0;
# 599 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = false;
# 600 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = false;
# 601 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = false;
# 602 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 603 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 605 "/usr/include/c++/4.2.1/limits" 3
static short infinity() throw()
# 606 "/usr/include/c++/4.2.1/limits" 3
{ return (short)0; }
# 607 "/usr/include/c++/4.2.1/limits" 3
static short quiet_NaN() throw()
# 608 "/usr/include/c++/4.2.1/limits" 3
{ return (short)0; }
# 609 "/usr/include/c++/4.2.1/limits" 3
static short signaling_NaN() throw()
# 610 "/usr/include/c++/4.2.1/limits" 3
{ return (short)0; }
# 611 "/usr/include/c++/4.2.1/limits" 3
static short denorm_min() throw()
# 612 "/usr/include/c++/4.2.1/limits" 3
{ return (short)0; }
# 614 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = false;
# 615 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = true;
# 616 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = true;
# 618 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = true;
# 619 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 620 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_toward_zero;
# 621 "/usr/include/c++/4.2.1/limits" 3
};
# 625 "/usr/include/c++/4.2.1/limits" 3
template<> struct numeric_limits< unsigned short> {
# 627 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = true;
# 629 "/usr/include/c++/4.2.1/limits" 3
static unsigned short min() throw()
# 630 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 631 "/usr/include/c++/4.2.1/limits" 3
static unsigned short max() throw()
# 632 "/usr/include/c++/4.2.1/limits" 3
{ return ((32767) * 2U) + (1); }
# 634 "/usr/include/c++/4.2.1/limits" 3
static const int digits = ((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0));
# 635 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = ((((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)) * (643)) / (2136));
# 636 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = false;
# 637 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = true;
# 638 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = true;
# 639 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 2;
# 640 "/usr/include/c++/4.2.1/limits" 3
static unsigned short epsilon() throw()
# 641 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 642 "/usr/include/c++/4.2.1/limits" 3
static unsigned short round_error() throw()
# 643 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 645 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = 0;
# 646 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = 0;
# 647 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 0;
# 648 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 0;
# 650 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = false;
# 651 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = false;
# 652 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = false;
# 653 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 654 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 656 "/usr/include/c++/4.2.1/limits" 3
static unsigned short infinity() throw()
# 657 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned short>(0); }
# 658 "/usr/include/c++/4.2.1/limits" 3
static unsigned short quiet_NaN() throw()
# 659 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned short>(0); }
# 660 "/usr/include/c++/4.2.1/limits" 3
static unsigned short signaling_NaN() throw()
# 661 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned short>(0); }
# 662 "/usr/include/c++/4.2.1/limits" 3
static unsigned short denorm_min() throw()
# 663 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned short>(0); }
# 665 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = false;
# 666 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = true;
# 667 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = true;
# 669 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = true;
# 670 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 671 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_toward_zero;
# 672 "/usr/include/c++/4.2.1/limits" 3
};
# 676 "/usr/include/c++/4.2.1/limits" 3
template<> struct numeric_limits< int> {
# 678 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = true;
# 680 "/usr/include/c++/4.2.1/limits" 3
static int min() throw()
# 681 "/usr/include/c++/4.2.1/limits" 3
{ return (-2147483647) - 1; }
# 682 "/usr/include/c++/4.2.1/limits" 3
static int max() throw()
# 683 "/usr/include/c++/4.2.1/limits" 3
{ return 2147483647; }
# 685 "/usr/include/c++/4.2.1/limits" 3
static const int digits = ((sizeof(int) * (8)) - (((int)(-1)) < 0));
# 686 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = ((((sizeof(int) * (8)) - (((int)(-1)) < 0)) * (643)) / (2136));
# 687 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = true;
# 688 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = true;
# 689 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = true;
# 690 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 2;
# 691 "/usr/include/c++/4.2.1/limits" 3
static int epsilon() throw()
# 692 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 693 "/usr/include/c++/4.2.1/limits" 3
static int round_error() throw()
# 694 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 696 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = 0;
# 697 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = 0;
# 698 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 0;
# 699 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 0;
# 701 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = false;
# 702 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = false;
# 703 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = false;
# 704 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 705 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 707 "/usr/include/c++/4.2.1/limits" 3
static int infinity() throw()
# 708 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< int>(0); }
# 709 "/usr/include/c++/4.2.1/limits" 3
static int quiet_NaN() throw()
# 710 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< int>(0); }
# 711 "/usr/include/c++/4.2.1/limits" 3
static int signaling_NaN() throw()
# 712 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< int>(0); }
# 713 "/usr/include/c++/4.2.1/limits" 3
static int denorm_min() throw()
# 714 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< int>(0); }
# 716 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = false;
# 717 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = true;
# 718 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = true;
# 720 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = true;
# 721 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 722 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_toward_zero;
# 723 "/usr/include/c++/4.2.1/limits" 3
};
# 727 "/usr/include/c++/4.2.1/limits" 3
template<> struct numeric_limits< unsigned> {
# 729 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = true;
# 731 "/usr/include/c++/4.2.1/limits" 3
static unsigned min() throw()
# 732 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 733 "/usr/include/c++/4.2.1/limits" 3
static unsigned max() throw()
# 734 "/usr/include/c++/4.2.1/limits" 3
{ return ((2147483647) * 2U) + (1); }
# 736 "/usr/include/c++/4.2.1/limits" 3
static const int digits = ((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0)));
# 737 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = ((((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))) * (643)) / (2136));
# 738 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = false;
# 739 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = true;
# 740 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = true;
# 741 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 2;
# 742 "/usr/include/c++/4.2.1/limits" 3
static unsigned epsilon() throw()
# 743 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 744 "/usr/include/c++/4.2.1/limits" 3
static unsigned round_error() throw()
# 745 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 747 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = 0;
# 748 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = 0;
# 749 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 0;
# 750 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 0;
# 752 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = false;
# 753 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = false;
# 754 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = false;
# 755 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 756 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 758 "/usr/include/c++/4.2.1/limits" 3
static unsigned infinity() throw()
# 759 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned>(0); }
# 760 "/usr/include/c++/4.2.1/limits" 3
static unsigned quiet_NaN() throw()
# 761 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned>(0); }
# 762 "/usr/include/c++/4.2.1/limits" 3
static unsigned signaling_NaN() throw()
# 763 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned>(0); }
# 764 "/usr/include/c++/4.2.1/limits" 3
static unsigned denorm_min() throw()
# 765 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned>(0); }
# 767 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = false;
# 768 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = true;
# 769 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = true;
# 771 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = true;
# 772 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 773 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_toward_zero;
# 774 "/usr/include/c++/4.2.1/limits" 3
};
# 778 "/usr/include/c++/4.2.1/limits" 3
template<> struct numeric_limits< long> {
# 780 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = true;
# 782 "/usr/include/c++/4.2.1/limits" 3
static long min() throw()
# 783 "/usr/include/c++/4.2.1/limits" 3
{ return (-2147483647L) - (1); }
# 784 "/usr/include/c++/4.2.1/limits" 3
static long max() throw()
# 785 "/usr/include/c++/4.2.1/limits" 3
{ return 2147483647L; }
# 787 "/usr/include/c++/4.2.1/limits" 3
static const int digits = ((sizeof(long) * (8)) - (((long)(-1)) < (0)));
# 788 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = ((((sizeof(long) * (8)) - (((long)(-1)) < (0))) * (643)) / (2136));
# 789 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = true;
# 790 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = true;
# 791 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = true;
# 792 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 2;
# 793 "/usr/include/c++/4.2.1/limits" 3
static long epsilon() throw()
# 794 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 795 "/usr/include/c++/4.2.1/limits" 3
static long round_error() throw()
# 796 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 798 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = 0;
# 799 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = 0;
# 800 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 0;
# 801 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 0;
# 803 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = false;
# 804 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = false;
# 805 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = false;
# 806 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 807 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 809 "/usr/include/c++/4.2.1/limits" 3
static long infinity() throw()
# 810 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< long>(0); }
# 811 "/usr/include/c++/4.2.1/limits" 3
static long quiet_NaN() throw()
# 812 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< long>(0); }
# 813 "/usr/include/c++/4.2.1/limits" 3
static long signaling_NaN() throw()
# 814 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< long>(0); }
# 815 "/usr/include/c++/4.2.1/limits" 3
static long denorm_min() throw()
# 816 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< long>(0); }
# 818 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = false;
# 819 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = true;
# 820 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = true;
# 822 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = true;
# 823 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 824 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_toward_zero;
# 825 "/usr/include/c++/4.2.1/limits" 3
};
# 829 "/usr/include/c++/4.2.1/limits" 3
template<> struct numeric_limits< unsigned long> {
# 831 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = true;
# 833 "/usr/include/c++/4.2.1/limits" 3
static unsigned long min() throw()
# 834 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 835 "/usr/include/c++/4.2.1/limits" 3
static unsigned long max() throw()
# 836 "/usr/include/c++/4.2.1/limits" 3
{ return ((2147483647L) * 2UL) + (1); }
# 838 "/usr/include/c++/4.2.1/limits" 3
static const int digits = ((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0)));
# 839 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = ((((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))) * (643)) / (2136));
# 840 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = false;
# 841 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = true;
# 842 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = true;
# 843 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 2;
# 844 "/usr/include/c++/4.2.1/limits" 3
static unsigned long epsilon() throw()
# 845 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 846 "/usr/include/c++/4.2.1/limits" 3
static unsigned long round_error() throw()
# 847 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 849 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = 0;
# 850 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = 0;
# 851 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 0;
# 852 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 0;
# 854 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = false;
# 855 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = false;
# 856 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = false;
# 857 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 858 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 860 "/usr/include/c++/4.2.1/limits" 3
static unsigned long infinity() throw()
# 861 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned long>(0); }
# 862 "/usr/include/c++/4.2.1/limits" 3
static unsigned long quiet_NaN() throw()
# 863 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned long>(0); }
# 864 "/usr/include/c++/4.2.1/limits" 3
static unsigned long signaling_NaN() throw()
# 865 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned long>(0); }
# 866 "/usr/include/c++/4.2.1/limits" 3
static unsigned long denorm_min() throw()
# 867 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned long>(0); }
# 869 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = false;
# 870 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = true;
# 871 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = true;
# 873 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = true;
# 874 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 875 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_toward_zero;
# 876 "/usr/include/c++/4.2.1/limits" 3
};
# 880 "/usr/include/c++/4.2.1/limits" 3
template<> struct numeric_limits< long long> {
# 882 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = true;
# 884 "/usr/include/c++/4.2.1/limits" 3
static long long min() throw()
# 885 "/usr/include/c++/4.2.1/limits" 3
{ return (-9223372036854775807LL) - (1); }
# 886 "/usr/include/c++/4.2.1/limits" 3
static long long max() throw()
# 887 "/usr/include/c++/4.2.1/limits" 3
{ return 9223372036854775807LL; }
# 889 "/usr/include/c++/4.2.1/limits" 3
static const int digits = ((sizeof(long long) * (8)) - (((long long)(-1)) < (0)));
# 890 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = ((((sizeof(long long) * (8)) - (((long long)(-1)) < (0))) * (643)) / (2136));
# 891 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = true;
# 892 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = true;
# 893 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = true;
# 894 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 2;
# 895 "/usr/include/c++/4.2.1/limits" 3
static long long epsilon() throw()
# 896 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 897 "/usr/include/c++/4.2.1/limits" 3
static long long round_error() throw()
# 898 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 900 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = 0;
# 901 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = 0;
# 902 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 0;
# 903 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 0;
# 905 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = false;
# 906 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = false;
# 907 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = false;
# 908 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 909 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 911 "/usr/include/c++/4.2.1/limits" 3
static long long infinity() throw()
# 912 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< long long>(0); }
# 913 "/usr/include/c++/4.2.1/limits" 3
static long long quiet_NaN() throw()
# 914 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< long long>(0); }
# 915 "/usr/include/c++/4.2.1/limits" 3
static long long signaling_NaN() throw()
# 916 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< long long>(0); }
# 917 "/usr/include/c++/4.2.1/limits" 3
static long long denorm_min() throw()
# 918 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< long long>(0); }
# 920 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = false;
# 921 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = true;
# 922 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = true;
# 924 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = true;
# 925 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 926 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_toward_zero;
# 927 "/usr/include/c++/4.2.1/limits" 3
};
# 931 "/usr/include/c++/4.2.1/limits" 3
template<> struct numeric_limits< unsigned long long> {
# 933 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = true;
# 935 "/usr/include/c++/4.2.1/limits" 3
static unsigned long long min() throw()
# 936 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 937 "/usr/include/c++/4.2.1/limits" 3
static unsigned long long max() throw()
# 938 "/usr/include/c++/4.2.1/limits" 3
{ return ((9223372036854775807LL) * 2ULL) + (1); }
# 940 "/usr/include/c++/4.2.1/limits" 3
static const int digits = ((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0)));
# 941 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = ((((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))) * (643)) / (2136));
# 942 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = false;
# 943 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = true;
# 944 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = true;
# 945 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 2;
# 946 "/usr/include/c++/4.2.1/limits" 3
static unsigned long long epsilon() throw()
# 947 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 948 "/usr/include/c++/4.2.1/limits" 3
static unsigned long long round_error() throw()
# 949 "/usr/include/c++/4.2.1/limits" 3
{ return 0; }
# 951 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = 0;
# 952 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = 0;
# 953 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 0;
# 954 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 0;
# 956 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = false;
# 957 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = false;
# 958 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = false;
# 959 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_absent;
# 960 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 962 "/usr/include/c++/4.2.1/limits" 3
static unsigned long long infinity() throw()
# 963 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned long long>(0); }
# 964 "/usr/include/c++/4.2.1/limits" 3
static unsigned long long quiet_NaN() throw()
# 965 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned long long>(0); }
# 966 "/usr/include/c++/4.2.1/limits" 3
static unsigned long long signaling_NaN() throw()
# 967 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned long long>(0); }
# 968 "/usr/include/c++/4.2.1/limits" 3
static unsigned long long denorm_min() throw()
# 969 "/usr/include/c++/4.2.1/limits" 3
{ return static_cast< unsigned long long>(0); }
# 971 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = false;
# 972 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = true;
# 973 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = true;
# 975 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = true;
# 976 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 977 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_toward_zero;
# 978 "/usr/include/c++/4.2.1/limits" 3
};
# 982 "/usr/include/c++/4.2.1/limits" 3
template<> struct numeric_limits< float> {
# 984 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = true;
# 986 "/usr/include/c++/4.2.1/limits" 3
static float min() throw()
# 987 "/usr/include/c++/4.2.1/limits" 3
{ return (1.175494351e-38F); }
# 988 "/usr/include/c++/4.2.1/limits" 3
static float max() throw()
# 989 "/usr/include/c++/4.2.1/limits" 3
{ return (3.402823466e+38F); }
# 991 "/usr/include/c++/4.2.1/limits" 3
static const int digits = 24;
# 992 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = 6;
# 993 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = true;
# 994 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = false;
# 995 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = false;
# 996 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 2;
# 997 "/usr/include/c++/4.2.1/limits" 3
static float epsilon() throw()
# 998 "/usr/include/c++/4.2.1/limits" 3
{ return (1.192092896e-07F); }
# 999 "/usr/include/c++/4.2.1/limits" 3
static float round_error() throw()
# 1000 "/usr/include/c++/4.2.1/limits" 3
{ return (0.5F); }
# 1002 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = (-125);
# 1003 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = (-37);
# 1004 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 128;
# 1005 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 38;
# 1007 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = (1);
# 1008 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = (1);
# 1009 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = has_quiet_NaN;
# 1010 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_present;
# 1012 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 1014 "/usr/include/c++/4.2.1/limits" 3
static float infinity() throw()
# 1015 "/usr/include/c++/4.2.1/limits" 3
{ return __builtin_huge_valf(); }
# 1016 "/usr/include/c++/4.2.1/limits" 3
static float quiet_NaN() throw()
# 1017 "/usr/include/c++/4.2.1/limits" 3
{ return __builtin_nanf(""); }
# 1018 "/usr/include/c++/4.2.1/limits" 3
static float signaling_NaN() throw()
# 1019 "/usr/include/c++/4.2.1/limits" 3
{ return __builtin_nansf(""); }
# 1020 "/usr/include/c++/4.2.1/limits" 3
static float denorm_min() throw()
# 1021 "/usr/include/c++/4.2.1/limits" 3
{ return (1.401298464e-45F); }
# 1023 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = ((has_infinity && has_quiet_NaN) && ((denorm_present) == (denorm_present)));
# 1025 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = true;
# 1026 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = false;
# 1028 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = false;
# 1029 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 1030 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_to_nearest;
# 1031 "/usr/include/c++/4.2.1/limits" 3
};
# 1039 "/usr/include/c++/4.2.1/limits" 3
template<> struct numeric_limits< double> {
# 1041 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = true;
# 1043 "/usr/include/c++/4.2.1/limits" 3
static double min() throw()
# 1044 "/usr/include/c++/4.2.1/limits" 3
{ return (2.225073858507201383e-308); }
# 1045 "/usr/include/c++/4.2.1/limits" 3
static double max() throw()
# 1046 "/usr/include/c++/4.2.1/limits" 3
{ return (1.797693134862315708e+308); }
# 1048 "/usr/include/c++/4.2.1/limits" 3
static const int digits = 53;
# 1049 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = 15;
# 1050 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = true;
# 1051 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = false;
# 1052 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = false;
# 1053 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 2;
# 1054 "/usr/include/c++/4.2.1/limits" 3
static double epsilon() throw()
# 1055 "/usr/include/c++/4.2.1/limits" 3
{ return (2.220446049250313081e-16); }
# 1056 "/usr/include/c++/4.2.1/limits" 3
static double round_error() throw()
# 1057 "/usr/include/c++/4.2.1/limits" 3
{ return (0.5); }
# 1059 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = (-1021);
# 1060 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = (-307);
# 1061 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 1024;
# 1062 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 308;
# 1064 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = (1);
# 1065 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = (1);
# 1066 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = has_quiet_NaN;
# 1067 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_present;
# 1069 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 1071 "/usr/include/c++/4.2.1/limits" 3
static double infinity() throw()
# 1072 "/usr/include/c++/4.2.1/limits" 3
{ return __builtin_huge_val(); }
# 1073 "/usr/include/c++/4.2.1/limits" 3
static double quiet_NaN() throw()
# 1074 "/usr/include/c++/4.2.1/limits" 3
{ return __builtin_nan(""); }
# 1075 "/usr/include/c++/4.2.1/limits" 3
static double signaling_NaN() throw()
# 1076 "/usr/include/c++/4.2.1/limits" 3
{ return __builtin_nans(""); }
# 1077 "/usr/include/c++/4.2.1/limits" 3
static double denorm_min() throw()
# 1078 "/usr/include/c++/4.2.1/limits" 3
{ return (4.940656458412465442e-324); }
# 1080 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = ((has_infinity && has_quiet_NaN) && ((denorm_present) == (denorm_present)));
# 1082 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = true;
# 1083 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = false;
# 1085 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = false;
# 1086 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 1087 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_to_nearest;
# 1088 "/usr/include/c++/4.2.1/limits" 3
};
# 1096 "/usr/include/c++/4.2.1/limits" 3
template<> struct numeric_limits< long double> {
# 1098 "/usr/include/c++/4.2.1/limits" 3
static const bool is_specialized = true;
# 1100 "/usr/include/c++/4.2.1/limits" 3
static long double min() throw()
# 1101 "/usr/include/c++/4.2.1/limits" 3
{ return (0.0L); }
# 1102 "/usr/include/c++/4.2.1/limits" 3
static long double max() throw()
# 1103 "/usr/include/c++/4.2.1/limits" 3
{ return ((__builtin_huge_vall())); }
# 1105 "/usr/include/c++/4.2.1/limits" 3
static const int digits = 64;
# 1106 "/usr/include/c++/4.2.1/limits" 3
static const int digits10 = 18;
# 1107 "/usr/include/c++/4.2.1/limits" 3
static const bool is_signed = true;
# 1108 "/usr/include/c++/4.2.1/limits" 3
static const bool is_integer = false;
# 1109 "/usr/include/c++/4.2.1/limits" 3
static const bool is_exact = false;
# 1110 "/usr/include/c++/4.2.1/limits" 3
static const int radix = 2;
# 1111 "/usr/include/c++/4.2.1/limits" 3
static long double epsilon() throw()
# 1112 "/usr/include/c++/4.2.1/limits" 3
{ return (1.084202172485504434e-19L); }
# 1113 "/usr/include/c++/4.2.1/limits" 3
static long double round_error() throw()
# 1114 "/usr/include/c++/4.2.1/limits" 3
{ return (0.5L); }
# 1116 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent = (-16381);
# 1117 "/usr/include/c++/4.2.1/limits" 3
static const int min_exponent10 = (-4931);
# 1118 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent = 16384;
# 1119 "/usr/include/c++/4.2.1/limits" 3
static const int max_exponent10 = 4932;
# 1121 "/usr/include/c++/4.2.1/limits" 3
static const bool has_infinity = (1);
# 1122 "/usr/include/c++/4.2.1/limits" 3
static const bool has_quiet_NaN = (1);
# 1123 "/usr/include/c++/4.2.1/limits" 3
static const bool has_signaling_NaN = has_quiet_NaN;
# 1124 "/usr/include/c++/4.2.1/limits" 3
static const float_denorm_style has_denorm = denorm_present;
# 1126 "/usr/include/c++/4.2.1/limits" 3
static const bool has_denorm_loss = false;
# 1129 "/usr/include/c++/4.2.1/limits" 3
static long double infinity() throw()
# 1130 "/usr/include/c++/4.2.1/limits" 3
{ return __builtin_huge_vall(); }
# 1131 "/usr/include/c++/4.2.1/limits" 3
static long double quiet_NaN() throw()
# 1132 "/usr/include/c++/4.2.1/limits" 3
{ return __builtin_nanl(""); }
# 1133 "/usr/include/c++/4.2.1/limits" 3
static long double signaling_NaN() throw()
# 1134 "/usr/include/c++/4.2.1/limits" 3
{ return __builtin_nansl(""); }
# 1135 "/usr/include/c++/4.2.1/limits" 3
static long double denorm_min() throw()
# 1136 "/usr/include/c++/4.2.1/limits" 3
{ return (0.0L); }
# 1138 "/usr/include/c++/4.2.1/limits" 3
static const bool is_iec559 = ((has_infinity && has_quiet_NaN) && ((denorm_present) == (denorm_present)));
# 1140 "/usr/include/c++/4.2.1/limits" 3
static const bool is_bounded = true;
# 1141 "/usr/include/c++/4.2.1/limits" 3
static const bool is_modulo = false;
# 1143 "/usr/include/c++/4.2.1/limits" 3
static const bool traps = false;
# 1144 "/usr/include/c++/4.2.1/limits" 3
static const bool tinyness_before = false;
# 1145 "/usr/include/c++/4.2.1/limits" 3
static const float_round_style round_style = round_to_nearest;
# 1146 "/usr/include/c++/4.2.1/limits" 3
};
# 1152 "/usr/include/c++/4.2.1/limits" 3
}
# 62 "/usr/include/c++/4.2.1/memory" 3
namespace std {
# 72 "/usr/include/c++/4.2.1/memory" 3
template < typename _Tp >
    pair < _Tp *, ptrdiff_t >
    __get_temporary_buffer ( ptrdiff_t __len, _Tp * )
    {
      const ptrdiff_t __max = numeric_limits < ptrdiff_t > :: max ( ) / sizeof ( _Tp );
      if ( __len > __max )
 __len = __max;

      while ( __len > 0 )
 {
   _Tp * __tmp = static_cast < _Tp * > ( :: operator new ( __len * sizeof ( _Tp ),
       nothrow ) );
   if ( __tmp != 0 )
     return pair < _Tp *, ptrdiff_t > ( __tmp, __len );
   __len /= 2;
 }
      return pair < _Tp *, ptrdiff_t > ( static_cast < _Tp * > ( 0 ), 0 );
    }
# 108 "/usr/include/c++/4.2.1/memory" 3
template < typename _Tp >
    inline pair < _Tp *, ptrdiff_t >
    get_temporary_buffer ( ptrdiff_t __len )
    { return std :: __get_temporary_buffer ( __len, static_cast < _Tp * > ( 0 ) ); }
# 120 "/usr/include/c++/4.2.1/memory" 3
template < typename _Tp >
    void
    return_temporary_buffer ( _Tp * __p )
    { :: operator delete ( __p, nothrow ); }
# 132 "/usr/include/c++/4.2.1/memory" 3
template < typename _Tp1 >
    struct auto_ptr_ref
    {
      _Tp1 * _M_ptr;

      explicit
      auto_ptr_ref ( _Tp1 * __p ) : _M_ptr ( __p ) { }
    };
# 173 "/usr/include/c++/4.2.1/memory" 3
template < typename _Tp >
    class auto_ptr
    {
    private :
      _Tp * _M_ptr;

    public :

      typedef _Tp element_type;







      explicit
      auto_ptr ( element_type * __p = 0 ) throw ( ) : _M_ptr ( __p ) { }
# 199 "/usr/include/c++/4.2.1/memory" 3
      auto_ptr ( auto_ptr & __a ) throw ( ) : _M_ptr ( __a . release ( ) ) { }
# 211 "/usr/include/c++/4.2.1/memory" 3
      template < typename _Tp1 >
        auto_ptr ( auto_ptr < _Tp1 > & __a ) throw ( ) : _M_ptr ( __a . release ( ) ) { }
# 222 "/usr/include/c++/4.2.1/memory" 3
      auto_ptr &
      operator = ( auto_ptr & __a ) throw ( )
      {
 reset ( __a . release ( ) );
 return * this;
      }
# 239 "/usr/include/c++/4.2.1/memory" 3
      template < typename _Tp1 >
        auto_ptr &
        operator = ( auto_ptr < _Tp1 > & __a ) throw ( )
        {
   reset ( __a . release ( ) );
   return * this;
 }
# 259 "/usr/include/c++/4.2.1/memory" 3
      ~ auto_ptr ( ) { delete _M_ptr; }
# 269 "/usr/include/c++/4.2.1/memory" 3
      element_type &
      operator * ( ) const throw ( )
      {
 ;
 return * _M_ptr;
      }







      element_type *
      operator -> ( ) const throw ( )
      {
 ;
 return _M_ptr;
      }
# 299 "/usr/include/c++/4.2.1/memory" 3
      element_type *
      get ( ) const throw ( ) { return _M_ptr; }
# 313 "/usr/include/c++/4.2.1/memory" 3
      element_type *
      release ( ) throw ( )
      {
 element_type * __tmp = _M_ptr;
 _M_ptr = 0;
 return __tmp;
      }
# 328 "/usr/include/c++/4.2.1/memory" 3
      void
      reset ( element_type * __p = 0 ) throw ( )
      {
 if ( __p != _M_ptr )
   {
     delete _M_ptr;
     _M_ptr = __p;
   }
      }
# 349 "/usr/include/c++/4.2.1/memory" 3
      auto_ptr ( auto_ptr_ref < element_type > __ref ) throw ( )
      : _M_ptr ( __ref . _M_ptr ) { }

      auto_ptr &
      operator = ( auto_ptr_ref < element_type > __ref ) throw ( )
      {
 if ( __ref . _M_ptr != this -> get ( ) )
   {
     delete _M_ptr;
     _M_ptr = __ref . _M_ptr;
   }
 return * this;
      }

      template < typename _Tp1 >
        operator auto_ptr_ref < _Tp1 > ( ) throw ( )
        { return auto_ptr_ref < _Tp1 > ( this -> release ( ) ); }

      template < typename _Tp1 >
        operator auto_ptr < _Tp1 > ( ) throw ( )
        { return auto_ptr < _Tp1 > ( this -> release ( ) ); }
  };
# 372 "/usr/include/c++/4.2.1/memory" 3
}
# 42 "/usr/include/c++/4.2.1/bits/ostream_insert.h" 3
namespace std {
# 44 "/usr/include/c++/4.2.1/bits/ostream_insert.h" 3
template < typename _CharT, typename _Traits >
    inline void
    __ostream_write ( basic_ostream < _CharT, _Traits > & __out,
      const _CharT * __s, streamsize __n )
    {
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef typename __ostream_type :: ios_base __ios_base;

      const streamsize __put = __out . rdbuf ( ) -> sputn ( __s, __n );
      if ( __put != __n )
 __out . setstate ( __ios_base :: badbit );
    }
# 57 "/usr/include/c++/4.2.1/bits/ostream_insert.h" 3
template < typename _CharT, typename _Traits >
    inline void
    __ostream_fill ( basic_ostream < _CharT, _Traits > & __out, streamsize __n )
    {
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef typename __ostream_type :: ios_base __ios_base;

      const _CharT __c = __out . fill ( );
      for (; __n > 0; -- __n )
 {
   const typename _Traits :: int_type __put = __out . rdbuf ( ) -> sputc ( __c );
   if ( _Traits :: eq_int_type ( __put, _Traits :: eof ( ) ) )
     {
       __out . setstate ( __ios_base :: badbit );
       break;
     }
 }
    }
# 76 "/usr/include/c++/4.2.1/bits/ostream_insert.h" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    __ostream_insert ( basic_ostream < _CharT, _Traits > & __out,
       const _CharT * __s, streamsize __n )
    {
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef typename __ostream_type :: ios_base __ios_base;

      typename __ostream_type :: sentry __cerb ( __out );
      if ( __cerb )
 {
   try
     {
       const streamsize __w = __out . width ( );
       if ( __w > __n )
  {
    const bool __left = ( ( __out . flags ( )
     & __ios_base :: adjustfield )
           == __ios_base :: left );
    if ( ! __left )
      __ostream_fill ( __out, __w - __n );
    if ( __out . good ( ) )
      __ostream_write ( __out, __s, __n );
    if ( __left && __out . good ( ) )
      __ostream_fill ( __out, __w - __n );
  }
       else
  __ostream_write ( __out, __s, __n );
       __out . width ( 0 );
     }
   catch ( ... )
     { __out . _M_setstate ( __ios_base :: badbit ); }
 }
      return __out;
    }
# 116 "/usr/include/c++/4.2.1/bits/ostream_insert.h" 3
extern template basic_ostream< char, char_traits< char> > &__ostream_insert(basic_ostream< char, char_traits< char> > &, const char *, streamsize);
# 119 "/usr/include/c++/4.2.1/bits/ostream_insert.h" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &__ostream_insert(basic_ostream< wchar_t, char_traits< wchar_t> > &, const wchar_t *, streamsize);
# 124 "/usr/include/c++/4.2.1/bits/ostream_insert.h" 3
}
# 64 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
namespace std {
# 101 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template< class _Arg, class _Result>
# 102 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
struct unary_function {
# 104 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
typedef _Arg argument_type;
# 107 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
typedef _Result result_type;
# 108 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
};
# 113 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template< class _Arg1, class _Arg2, class _Result>
# 114 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
struct binary_function {
# 116 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
typedef _Arg1 first_argument_type;
# 119 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
typedef _Arg2 second_argument_type;
# 120 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
typedef _Result result_type;
# 121 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
};
# 133 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Tp >
    struct plus : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x + __y; }
    };
# 142 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Tp >
    struct minus : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x - __y; }
    };
# 151 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Tp >
    struct multiplies : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x * __y; }
    };
# 160 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Tp >
    struct divides : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x / __y; }
    };
# 169 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Tp >
    struct modulus : public binary_function < _Tp, _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x % __y; }
    };
# 178 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Tp >
    struct negate : public unary_function < _Tp, _Tp >
    {
      _Tp
      operator ( ) ( const _Tp & __x ) const
      { return - __x; }
    };
# 195 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Tp >
    struct equal_to : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x == __y; }
    };
# 204 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Tp >
    struct not_equal_to : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x != __y; }
    };
# 213 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Tp >
    struct greater : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x > __y; }
    };
# 222 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Tp >
    struct less : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x < __y; }
    };
# 231 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Tp >
    struct greater_equal : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x >= __y; }
    };
# 240 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Tp >
    struct less_equal : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x <= __y; }
    };
# 256 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Tp >
    struct logical_and : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x && __y; }
    };
# 265 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Tp >
    struct logical_or : public binary_function < _Tp, _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x, const _Tp & __y ) const
      { return __x || __y; }
    };
# 274 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Tp >
    struct logical_not : public unary_function < _Tp, bool >
    {
      bool
      operator ( ) ( const _Tp & __x ) const
      { return ! __x; }
    };
# 311 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Predicate >
    class unary_negate
    : public unary_function < typename _Predicate :: argument_type, bool >
    {
    protected :
      _Predicate _M_pred;
    public :
      explicit
      unary_negate ( const _Predicate & __x ) : _M_pred ( __x ) { }

      bool
      operator ( ) ( const typename _Predicate :: argument_type & __x ) const
      { return ! _M_pred ( __x ); }
    };
# 327 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Predicate >
    inline unary_negate < _Predicate >
    not1 ( const _Predicate & __pred )
    { return unary_negate < _Predicate > ( __pred ); }
# 333 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Predicate >
    class binary_negate
    : public binary_function < typename _Predicate :: first_argument_type,
        typename _Predicate :: second_argument_type,
        bool >
    {
    protected :
      _Predicate _M_pred;
    public :
      explicit
      binary_negate ( const _Predicate & __x )
      : _M_pred ( __x ) { }

      bool
      operator ( ) ( const typename _Predicate :: first_argument_type & __x,
   const typename _Predicate :: second_argument_type & __y ) const
      { return ! _M_pred ( __x, __y ); }
    };
# 353 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Predicate >
    inline binary_negate < _Predicate >
    not2 ( const _Predicate & __pred )
    { return binary_negate < _Predicate > ( __pred ); }
# 391 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Operation >
    class binder1st
    : public unary_function < typename _Operation :: second_argument_type,
       typename _Operation :: result_type >
    {
    protected :
      _Operation op;
      typename _Operation :: first_argument_type value;
    public :
      binder1st ( const _Operation & __x,
  const typename _Operation :: first_argument_type & __y )
      : op ( __x ), value ( __y ) { }

      typename _Operation :: result_type
      operator ( ) ( const typename _Operation :: second_argument_type & __x ) const
      { return op ( value, __x ); }



      typename _Operation :: result_type
      operator ( ) ( typename _Operation :: second_argument_type & __x ) const
      { return op ( value, __x ); }
    };
# 416 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Operation, class _Tp >
    inline binder1st < _Operation >
    bind1st ( const _Operation & __fn, const _Tp & __x )
    {
      typedef typename _Operation :: first_argument_type _Arg1_type;
      return binder1st < _Operation > ( __fn, _Arg1_type ( __x ) );
    }
# 425 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Operation >
    class binder2nd
    : public unary_function < typename _Operation :: first_argument_type,
       typename _Operation :: result_type >
    {
    protected :
      _Operation op;
      typename _Operation :: second_argument_type value;
    public :
      binder2nd ( const _Operation & __x,
  const typename _Operation :: second_argument_type & __y )
      : op ( __x ), value ( __y ) { }

      typename _Operation :: result_type
      operator ( ) ( const typename _Operation :: first_argument_type & __x ) const
      { return op ( __x, value ); }



      typename _Operation :: result_type
      operator ( ) ( typename _Operation :: first_argument_type & __x ) const
      { return op ( __x, value ); }
    };
# 450 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Operation, class _Tp >
    inline binder2nd < _Operation >
    bind2nd ( const _Operation & __fn, const _Tp & __x )
    {
      typedef typename _Operation :: second_argument_type _Arg2_type;
      return binder2nd < _Operation > ( __fn, _Arg2_type ( __x ) );
    }
# 480 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Arg, class _Result >
    class pointer_to_unary_function : public unary_function < _Arg, _Result >
    {
    protected :
      _Result ( * _M_ptr ) ( _Arg );
    public :
      pointer_to_unary_function ( ) { }

      explicit
      pointer_to_unary_function ( _Result ( * __x ) ( _Arg ) )
      : _M_ptr ( __x ) { }

      _Result
      operator ( ) ( _Arg __x ) const
      { return _M_ptr ( __x ); }
    };
# 498 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Arg, class _Result >
    inline pointer_to_unary_function < _Arg, _Result >
    ptr_fun ( _Result ( * __x ) ( _Arg ) )
    { return pointer_to_unary_function < _Arg, _Result > ( __x ); }
# 504 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Arg1, class _Arg2, class _Result >
    class pointer_to_binary_function
    : public binary_function < _Arg1, _Arg2, _Result >
    {
    protected :
      _Result ( * _M_ptr ) ( _Arg1, _Arg2 );
    public :
      pointer_to_binary_function ( ) { }

      explicit
      pointer_to_binary_function ( _Result ( * __x ) ( _Arg1, _Arg2 ) )
      : _M_ptr ( __x ) { }

      _Result
      operator ( ) ( _Arg1 __x, _Arg2 __y ) const
      { return _M_ptr ( __x, __y ); }
    };
# 523 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Arg1, class _Arg2, class _Result >
    inline pointer_to_binary_function < _Arg1, _Arg2, _Result >
    ptr_fun ( _Result ( * __x ) ( _Arg1, _Arg2 ) )
    { return pointer_to_binary_function < _Arg1, _Arg2, _Result > ( __x ); }
# 529 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Tp >
    struct _Identity : public unary_function < _Tp, _Tp >
    {
      _Tp &
      operator ( ) ( _Tp & __x ) const
      { return __x; }

      const _Tp &
      operator ( ) ( const _Tp & __x ) const
      { return __x; }
    };
# 541 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Pair >
    struct _Select1st : public unary_function < _Pair,
           typename _Pair :: first_type >
    {
      typename _Pair :: first_type &
      operator ( ) ( _Pair & __x ) const
      { return __x . first; }

      const typename _Pair :: first_type &
      operator ( ) ( const _Pair & __x ) const
      { return __x . first; }
    };
# 554 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Pair >
    struct _Select2nd : public unary_function < _Pair,
           typename _Pair :: second_type >
    {
      typename _Pair :: second_type &
      operator ( ) ( _Pair & __x ) const
      { return __x . second; }

      const typename _Pair :: second_type &
      operator ( ) ( const _Pair & __x ) const
      { return __x . second; }
    };
# 582 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Ret, class _Tp >
    class mem_fun_t : public unary_function < _Tp *, _Ret >
    {
    public :
      explicit
      mem_fun_t ( _Ret ( _Tp :: * __pf ) ( ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp * __p ) const
      { return ( __p ->* _M_f ) ( ); }
    private :
      _Ret ( _Tp :: * _M_f ) ( );
    };
# 598 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Ret, class _Tp >
    class const_mem_fun_t : public unary_function < const _Tp *, _Ret >
    {
    public :
      explicit
      const_mem_fun_t ( _Ret ( _Tp :: * __pf ) ( ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp * __p ) const
      { return ( __p ->* _M_f ) ( ); }
    private :
      _Ret ( _Tp :: * _M_f ) ( ) const;
    };
# 614 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Ret, class _Tp >
    class mem_fun_ref_t : public unary_function < _Tp, _Ret >
    {
    public :
      explicit
      mem_fun_ref_t ( _Ret ( _Tp :: * __pf ) ( ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp & __r ) const
      { return ( __r .* _M_f ) ( ); }
    private :
      _Ret ( _Tp :: * _M_f ) ( );
  };
# 630 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Ret, class _Tp >
    class const_mem_fun_ref_t : public unary_function < _Tp, _Ret >
    {
    public :
      explicit
      const_mem_fun_ref_t ( _Ret ( _Tp :: * __pf ) ( ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp & __r ) const
      { return ( __r .* _M_f ) ( ); }
    private :
      _Ret ( _Tp :: * _M_f ) ( ) const;
    };
# 646 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Ret, class _Tp, class _Arg >
    class mem_fun1_t : public binary_function < _Tp *, _Arg, _Ret >
    {
    public :
      explicit
      mem_fun1_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp * __p, _Arg __x ) const
      { return ( __p ->* _M_f ) ( __x ); }
    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg );
    };
# 662 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Ret, class _Tp, class _Arg >
    class const_mem_fun1_t : public binary_function < const _Tp *, _Arg, _Ret >
    {
    public :
      explicit
      const_mem_fun1_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp * __p, _Arg __x ) const
      { return ( __p ->* _M_f ) ( __x ); }
    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg ) const;
    };
# 678 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Ret, class _Tp, class _Arg >
    class mem_fun1_ref_t : public binary_function < _Tp, _Arg, _Ret >
    {
    public :
      explicit
      mem_fun1_ref_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( _Tp & __r, _Arg __x ) const
      { return ( __r .* _M_f ) ( __x ); }
    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg );
    };
# 694 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Ret, class _Tp, class _Arg >
    class const_mem_fun1_ref_t : public binary_function < _Tp, _Arg, _Ret >
    {
    public :
      explicit
      const_mem_fun1_ref_t ( _Ret ( _Tp :: * __pf ) ( _Arg ) const )
      : _M_f ( __pf ) { }

      _Ret
      operator ( ) ( const _Tp & __r, _Arg __x ) const
      { return ( __r .* _M_f ) ( __x ); }
    private :
      _Ret ( _Tp :: * _M_f ) ( _Arg ) const;
    };
# 711 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Ret, class _Tp >
    inline mem_fun_t < _Ret, _Tp >
    mem_fun ( _Ret ( _Tp :: * __f ) ( ) )
    { return mem_fun_t < _Ret, _Tp > ( __f ); }
# 716 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Ret, class _Tp >
    inline const_mem_fun_t < _Ret, _Tp >
    mem_fun ( _Ret ( _Tp :: * __f ) ( ) const )
    { return const_mem_fun_t < _Ret, _Tp > ( __f ); }
# 721 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Ret, class _Tp >
    inline mem_fun_ref_t < _Ret, _Tp >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( ) )
    { return mem_fun_ref_t < _Ret, _Tp > ( __f ); }
# 726 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Ret, class _Tp >
    inline const_mem_fun_ref_t < _Ret, _Tp >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( ) const )
    { return const_mem_fun_ref_t < _Ret, _Tp > ( __f ); }
# 731 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Ret, class _Tp, class _Arg >
    inline mem_fun1_t < _Ret, _Tp, _Arg >
    mem_fun ( _Ret ( _Tp :: * __f ) ( _Arg ) )
    { return mem_fun1_t < _Ret, _Tp, _Arg > ( __f ); }
# 736 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Ret, class _Tp, class _Arg >
    inline const_mem_fun1_t < _Ret, _Tp, _Arg >
    mem_fun ( _Ret ( _Tp :: * __f ) ( _Arg ) const )
    { return const_mem_fun1_t < _Ret, _Tp, _Arg > ( __f ); }
# 741 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Ret, class _Tp, class _Arg >
    inline mem_fun1_ref_t < _Ret, _Tp, _Arg >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( _Arg ) )
    { return mem_fun1_ref_t < _Ret, _Tp, _Arg > ( __f ); }
# 746 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
template < class _Ret, class _Tp, class _Arg >
    inline const_mem_fun1_ref_t < _Ret, _Tp, _Arg >
    mem_fun_ref ( _Ret ( _Tp :: * __f ) ( _Arg ) const )
    { return const_mem_fun1_ref_t < _Ret, _Tp, _Arg > ( __f ); }
# 753 "/usr/include/c++/4.2.1/bits/stl_function.h" 3
}
# 49 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
namespace std {
# 110 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    class basic_string
    {
      typedef typename _Alloc :: template rebind < _CharT > :: other _CharT_alloc_type;


    public :
      typedef _Traits traits_type;
      typedef typename _Traits :: char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type :: size_type size_type;
      typedef typename _CharT_alloc_type :: difference_type difference_type;
      typedef typename _CharT_alloc_type :: reference reference;
      typedef typename _CharT_alloc_type :: const_reference const_reference;
      typedef typename _CharT_alloc_type :: pointer pointer;
      typedef typename _CharT_alloc_type :: const_pointer const_pointer;
      typedef __gnu_cxx :: __normal_iterator < pointer, basic_string > iterator;
      typedef __gnu_cxx :: __normal_iterator < const_pointer, basic_string >
                                                            const_iterator;
      typedef std :: reverse_iterator < const_iterator > const_reverse_iterator;
      typedef std :: reverse_iterator < iterator > reverse_iterator;

    private :
# 147 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc :: template rebind < char > :: other _Raw_bytes_alloc;
# 172 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage [ ];

        static _Rep &
        _S_empty_rep ( )
        {



   void * __p = reinterpret_cast < void * > ( & _S_empty_rep_storage );
   return * reinterpret_cast < _Rep * > ( __p );
 }

        bool
 _M_is_leaked ( ) const
        { return this -> _M_refcount < 0; }

        bool
 _M_is_shared ( ) const
        { return this -> _M_refcount > 0; }

        void
 _M_set_leaked ( )
        { this -> _M_refcount = - 1; }

        void
 _M_set_sharable ( )
        { this -> _M_refcount = 0; }

 void
 _M_set_length_and_sharable ( size_type __n )
 {
   this -> _M_set_sharable ( );
   this -> _M_length = __n;
   traits_type :: assign ( this -> _M_refdata ( ) [ __n ], _S_terminal );


 }

 _CharT *
 _M_refdata ( ) throw ( )
 { return reinterpret_cast < _CharT * > ( this + 1 ); }

 _CharT *
 _M_grab ( const _Alloc & __alloc1, const _Alloc & __alloc2 )
 {
   return ( ! _M_is_leaked ( ) && __alloc1 == __alloc2 )
           ? _M_refcopy ( ) : _M_clone ( __alloc1 );
 }


 static _Rep *
 _S_create ( size_type, size_type, const _Alloc & );

 void
 _M_dispose ( const _Alloc & __a )
 {

   if ( __builtin_expect ( this != & _S_empty_rep ( ), false ) )

     if ( __gnu_cxx :: __exchange_and_add_dispatch ( & this -> _M_refcount,
             - 1 ) <= 0 )
       _M_destroy ( __a );
 }

 void
 _M_destroy ( const _Alloc & ) throw ( );

 _CharT *
 _M_refcopy ( ) throw ( )
 {

   if ( __builtin_expect ( this != & _S_empty_rep ( ), false ) )

            __gnu_cxx :: __atomic_add_dispatch ( & this -> _M_refcount, 1 );
   return _M_refdata ( );
 }

 _CharT *
 _M_clone ( const _Alloc &, size_type __res = 0 );
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider ( _CharT * __dat, const _Alloc & __a )
 : _Alloc ( __a ), _M_p ( __dat ) { }

 _CharT * _M_p;
      };

    public :




      static const size_type npos = static_cast < size_type > ( - 1 );

    private :

      mutable _Alloc_hider _M_dataplus;

      _CharT *
      _M_data ( ) const
      { return _M_dataplus . _M_p; }

      _CharT *
      _M_data ( _CharT * __p )
      { return ( _M_dataplus . _M_p = __p ); }

      _Rep *
      _M_rep ( ) const
      { return & ( ( reinterpret_cast < _Rep * > ( _M_data ( ) ) ) [ - 1 ] ); }



      iterator
      _M_ibegin ( ) const
      { return iterator ( _M_data ( ) ); }

      iterator
      _M_iend ( ) const
      { return iterator ( _M_data ( ) + this -> size ( ) ); }

      void
      _M_leak ( )
      {
 if ( ! _M_rep ( ) -> _M_is_leaked ( ) )
   _M_leak_hard ( );
      }

      size_type
      _M_check ( size_type __pos, const char * __s ) const
      {
 if ( __pos > this -> size ( ) )
   __throw_out_of_range ( ( __s ) );
 return __pos;
      }

      void
      _M_check_length ( size_type __n1, size_type __n2, const char * __s ) const
      {
 if ( this -> max_size ( ) - ( this -> size ( ) - __n1 ) < __n2 )
   __throw_length_error ( ( __s ) );
      }


      size_type
      _M_limit ( size_type __pos, size_type __off ) const
      {
 const bool __testoff = __off < this -> size ( ) - __pos;
 return __testoff ? __off : this -> size ( ) - __pos;
      }


      bool
      _M_disjunct ( const _CharT * __s ) const
      {
 return ( less < const _CharT * > ( ) ( __s, _M_data ( ) )
  || less < const _CharT * > ( ) ( _M_data ( ) + this -> size ( ), __s ) );
      }



      static void
      _M_copy ( _CharT * __d, const _CharT * __s, size_type __n )
      {
 if ( __n == 1 )
   traits_type :: assign ( * __d, * __s );
 else
   traits_type :: copy ( __d, __s, __n );
      }

      static void
      _M_move ( _CharT * __d, const _CharT * __s, size_type __n )
      {
 if ( __n == 1 )
   traits_type :: assign ( * __d, * __s );
 else
   traits_type :: move ( __d, __s, __n );
      }

      static void
      _M_assign ( _CharT * __d, size_type __n, _CharT __c )
      {
 if ( __n == 1 )
   traits_type :: assign ( * __d, __c );
 else
   traits_type :: assign ( __d, __n, __c );
      }



      template < class _Iterator >
        static void
        _S_copy_chars ( _CharT * __p, _Iterator __k1, _Iterator __k2 )
        {
   for (; __k1 != __k2; ++ __k1, ++ __p )
     traits_type :: assign ( * __p, * __k1 );
 }

      static void
      _S_copy_chars ( _CharT * __p, iterator __k1, iterator __k2 )
      { _S_copy_chars ( __p, __k1 . base ( ), __k2 . base ( ) ); }

      static void
      _S_copy_chars ( _CharT * __p, const_iterator __k1, const_iterator __k2 )
      { _S_copy_chars ( __p, __k1 . base ( ), __k2 . base ( ) ); }

      static void
      _S_copy_chars ( _CharT * __p, _CharT * __k1, _CharT * __k2 )
      { _M_copy ( __p, __k1, __k2 - __k1 ); }

      static void
      _S_copy_chars ( _CharT * __p, const _CharT * __k1, const _CharT * __k2 )
      { _M_copy ( __p, __k1, __k2 - __k1 ); }

      static int
      _S_compare ( size_type __x, size_type __y )
      {
         if ( __x > __y )
            return 1;
         if ( __x < __y )
            return - 1;
         return 0;
      }

      void
      _M_mutate ( size_type __pos, size_type __len1, size_type __len2 );

      void
      _M_leak_hard ( );

      static _Rep &
      _S_empty_rep ( )
      { return _Rep :: _S_empty_rep ( ); }

    public :







      inline
      basic_string ( );




      explicit
      basic_string ( const _Alloc & __a );






      basic_string ( const basic_string & __str );






      basic_string ( const basic_string & __str, size_type __pos,
     size_type __n = npos );







      basic_string ( const basic_string & __str, size_type __pos,
     size_type __n, const _Alloc & __a );
# 463 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string ( const _CharT * __s, size_type __n,
     const _Alloc & __a = _Alloc ( ) );





      basic_string ( const _CharT * __s, const _Alloc & __a = _Alloc ( ) );






      basic_string ( size_type __n, _CharT __c, const _Alloc & __a = _Alloc ( ) );







      template < class _InputIterator >
        basic_string ( _InputIterator __beg, _InputIterator __end,
       const _Alloc & __a = _Alloc ( ) );




      ~ basic_string ( )
      { _M_rep ( ) -> _M_dispose ( this -> get_allocator ( ) ); }





      basic_string &
      operator = ( const basic_string & __str )
      { return this -> assign ( __str ); }





      basic_string &
      operator = ( const _CharT * __s )
      { return this -> assign ( __s ); }
# 518 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      operator = ( _CharT __c )
      {
 this -> assign ( 1, __c );
 return * this;
      }






      iterator
      begin ( )
      {
 _M_leak ( );
 return iterator ( _M_data ( ) );
      }





      const_iterator
      begin ( ) const
      { return const_iterator ( _M_data ( ) ); }





      iterator
      end ( )
      {
 _M_leak ( );
 return iterator ( _M_data ( ) + this -> size ( ) );
      }





      const_iterator
      end ( ) const
      { return const_iterator ( _M_data ( ) + this -> size ( ) ); }






      reverse_iterator
      rbegin ( )
      { return reverse_iterator ( this -> end ( ) ); }






      const_reverse_iterator
      rbegin ( ) const
      { return const_reverse_iterator ( this -> end ( ) ); }






      reverse_iterator
      rend ( )
      { return reverse_iterator ( this -> begin ( ) ); }






      const_reverse_iterator
      rend ( ) const
      { return const_reverse_iterator ( this -> begin ( ) ); }

    public :



      size_type
      size ( ) const
      { return _M_rep ( ) -> _M_length; }



      size_type
      length ( ) const
      { return _M_rep ( ) -> _M_length; }


      size_type
      max_size ( ) const
      { return _Rep :: _S_max_size; }
# 629 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      void
      resize ( size_type __n, _CharT __c );
# 642 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      void
      resize ( size_type __n )
      { this -> resize ( __n, _CharT ( ) ); }





      size_type
      capacity ( ) const
      { return _M_rep ( ) -> _M_capacity; }
# 671 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      void
      reserve ( size_type __res_arg = 0 );




      void
      clear ( )
      { _M_mutate ( 0, this -> size ( ), 0 ); }




      bool
      empty ( ) const
      { return this -> size ( ) == 0; }
# 699 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      const_reference
      operator [ ] ( size_type __pos ) const
      {
 ;
 return _M_data ( ) [ __pos ];
      }
# 716 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      reference
      operator [ ] ( size_type __pos )
      {

 ;

 ;
 _M_leak ( );
 return _M_data ( ) [ __pos ];
      }
# 737 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      const_reference
      at ( size_type __n ) const
      {
 if ( __n >= this -> size ( ) )
   __throw_out_of_range ( ( "basic_string::at" ) );
 return _M_data ( ) [ __n ];
      }
# 756 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      reference
      at ( size_type __n )
      {
 if ( __n >= size ( ) )
   __throw_out_of_range ( ( "basic_string::at" ) );
 _M_leak ( );
 return _M_data ( ) [ __n ];
      }







      basic_string &
      operator += ( const basic_string & __str )
      { return this -> append ( __str ); }






      basic_string &
      operator += ( const _CharT * __s )
      { return this -> append ( __s ); }






      basic_string &
      operator += ( _CharT __c )
      {
 this -> push_back ( __c );
 return * this;
      }






      basic_string &
      append ( const basic_string & __str );
# 816 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      append ( const basic_string & __str, size_type __pos, size_type __n );







      basic_string &
      append ( const _CharT * __s, size_type __n );






      basic_string &
      append ( const _CharT * __s )
      {
 ;
 return this -> append ( __s, traits_type :: length ( __s ) );
      }
# 848 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      append ( size_type __n, _CharT __c );
# 859 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      template < class _InputIterator >
        basic_string &
        append ( _InputIterator __first, _InputIterator __last )
        { return this -> replace ( _M_iend ( ), _M_iend ( ), __first, __last ); }





      void
      push_back ( _CharT __c )
      {
 const size_type __len = 1 + this -> size ( );
 if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
   this -> reserve ( __len );
 traits_type :: assign ( _M_data ( ) [ this -> size ( ) ], __c );
 _M_rep ( ) -> _M_set_length_and_sharable ( __len );
      }






      basic_string &
      assign ( const basic_string & __str );
# 898 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      assign ( const basic_string & __str, size_type __pos, size_type __n )
      { return this -> assign ( __str . _M_data ( )
       + __str . _M_check ( __pos, "basic_string::assign" ),
       __str . _M_limit ( __pos, __n ) ); }
# 914 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      assign ( const _CharT * __s, size_type __n );
# 926 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      assign ( const _CharT * __s )
      {
 ;
 return this -> assign ( __s, traits_type :: length ( __s ) );
      }
# 942 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      assign ( size_type __n, _CharT __c )
      { return _M_replace_aux ( size_type ( 0 ), this -> size ( ), __n, __c ); }
# 954 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      template < class _InputIterator >
        basic_string &
        assign ( _InputIterator __first, _InputIterator __last )
        { return this -> replace ( _M_ibegin ( ), _M_iend ( ), __first, __last ); }
# 971 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      void
      insert ( iterator __p, size_type __n, _CharT __c )
      { this -> replace ( __p, __p, __n, __c ); }
# 986 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      template < class _InputIterator >
        void
        insert ( iterator __p, _InputIterator __beg, _InputIterator __end )
        { this -> replace ( __p, __p, __beg, __end ); }
# 1002 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      insert ( size_type __pos1, const basic_string & __str )
      { return this -> insert ( __pos1, __str, size_type ( 0 ), __str . size ( ) ); }
# 1024 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      insert ( size_type __pos1, const basic_string & __str,
      size_type __pos2, size_type __n )
      { return this -> insert ( __pos1, __str . _M_data ( )
       + __str . _M_check ( __pos2, "basic_string::insert" ),
       __str . _M_limit ( __pos2, __n ) ); }
# 1047 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      insert ( size_type __pos, const _CharT * __s, size_type __n );
# 1065 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      insert ( size_type __pos, const _CharT * __s )
      {
 ;
 return this -> insert ( __pos, __s, traits_type :: length ( __s ) );
      }
# 1088 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      insert ( size_type __pos, size_type __n, _CharT __c )
      { return _M_replace_aux ( _M_check ( __pos, "basic_string::insert" ),
         size_type ( 0 ), __n, __c ); }
# 1105 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      iterator
      insert ( iterator __p, _CharT __c )
      {
 ;
 const size_type __pos = __p - _M_ibegin ( );
 _M_replace_aux ( __pos, size_type ( 0 ), size_type ( 1 ), __c );
 _M_rep ( ) -> _M_set_leaked ( );
 return iterator ( _M_data ( ) + __pos );
      }
# 1129 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      erase ( size_type __pos = 0, size_type __n = npos )
      {
 _M_mutate ( _M_check ( __pos, "basic_string::erase" ),
    _M_limit ( __pos, __n ), size_type ( 0 ) );
 return * this;
      }
# 1145 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      iterator
      erase ( iterator __position )
      {
 ;

 const size_type __pos = __position - _M_ibegin ( );
 _M_mutate ( __pos, size_type ( 1 ), size_type ( 0 ) );
 _M_rep ( ) -> _M_set_leaked ( );
 return iterator ( _M_data ( ) + __pos );
      }
# 1165 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      iterator
      erase ( iterator __first, iterator __last )
      {
 ;

        const size_type __pos = __first - _M_ibegin ( );
 _M_mutate ( __pos, __last - __first, size_type ( 0 ) );
 _M_rep ( ) -> _M_set_leaked ( );
 return iterator ( _M_data ( ) + __pos );
      }
# 1192 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      replace ( size_type __pos, size_type __n, const basic_string & __str )
      { return this -> replace ( __pos, __n, __str . _M_data ( ), __str . size ( ) ); }
# 1214 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      replace ( size_type __pos1, size_type __n1, const basic_string & __str,
       size_type __pos2, size_type __n2 )
      { return this -> replace ( __pos1, __n1, __str . _M_data ( )
        + __str . _M_check ( __pos2, "basic_string::replace" ),
        __str . _M_limit ( __pos2, __n2 ) ); }
# 1238 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      replace ( size_type __pos, size_type __n1, const _CharT * __s,
       size_type __n2 );
# 1257 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      replace ( size_type __pos, size_type __n1, const _CharT * __s )
      {
 ;
 return this -> replace ( __pos, __n1, __s, traits_type :: length ( __s ) );
      }
# 1280 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      replace ( size_type __pos, size_type __n1, size_type __n2, _CharT __c )
      { return _M_replace_aux ( _M_check ( __pos, "basic_string::replace" ),
         _M_limit ( __pos, __n1 ), __n2, __c ); }
# 1298 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      replace ( iterator __i1, iterator __i2, const basic_string & __str )
      { return this -> replace ( __i1, __i2, __str . _M_data ( ), __str . size ( ) ); }
# 1316 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      replace ( iterator __i1, iterator __i2, const _CharT * __s, size_type __n )
      {
 ;

 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1, __s, __n );
      }
# 1337 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      replace ( iterator __i1, iterator __i2, const _CharT * __s )
      {
 ;
 return this -> replace ( __i1, __i2, __s, traits_type :: length ( __s ) );
      }
# 1358 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string &
      replace ( iterator __i1, iterator __i2, size_type __n, _CharT __c )
      {
 ;

 return _M_replace_aux ( __i1 - _M_ibegin ( ), __i2 - __i1, __n, __c );
      }
# 1380 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      template < class _InputIterator >
        basic_string &
        replace ( iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2 )
        {
   ;

   ;
   typedef typename std :: __is_integer < _InputIterator > :: __type _Integral;
   return _M_replace_dispatch ( __i1, __i2, __k1, __k2, _Integral ( ) );
 }



      basic_string &
      replace ( iterator __i1, iterator __i2, _CharT * __k1, _CharT * __k2 )
      {
 ;

 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1, __k2 - __k1 );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2,
       const _CharT * __k1, const _CharT * __k2 )
      {
 ;

 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1, __k2 - __k1 );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2, iterator __k1, iterator __k2 )
      {
 ;

 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1 . base ( ), __k2 - __k1 );
      }

      basic_string &
      replace ( iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2 )
      {
 ;

 ;
 return this -> replace ( __i1 - _M_ibegin ( ), __i2 - __i1,
        __k1 . base ( ), __k2 - __k1 );
      }

    private :
      template < class _Integer >
 basic_string &
 _M_replace_dispatch ( iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type )
        { return _M_replace_aux ( __i1 - _M_ibegin ( ), __i2 - __i1, __n, __val ); }

      template < class _InputIterator >
 basic_string &
 _M_replace_dispatch ( iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type );

      basic_string &
      _M_replace_aux ( size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c );

      basic_string &
      _M_replace_safe ( size_type __pos1, size_type __n1, const _CharT * __s,
        size_type __n2 );



      template < class _InIterator >
        static _CharT *
        _S_construct_aux ( _InIterator __beg, _InIterator __end,
    const _Alloc & __a, __false_type )
 {
          typedef typename iterator_traits < _InIterator > :: iterator_category _Tag;
          return _S_construct ( __beg, __end, __a, _Tag ( ) );
 }

      template < class _InIterator >
        static _CharT *
        _S_construct_aux ( _InIterator __beg, _InIterator __end,
    const _Alloc & __a, __true_type )
 { return _S_construct ( static_cast < size_type > ( __beg ),
         static_cast < value_type > ( __end ), __a ); }

      template < class _InIterator >
        static _CharT *
        _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a )
 {
   typedef typename std :: __is_integer < _InIterator > :: __type _Integral;
   return _S_construct_aux ( __beg, __end, __a, _Integral ( ) );
        }


      template < class _InIterator >
        static _CharT *
         _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a,
        input_iterator_tag );



      template < class _FwdIterator >
        static _CharT *
        _S_construct ( _FwdIterator __beg, _FwdIterator __end, const _Alloc & __a,
       forward_iterator_tag );

      static _CharT *
      _S_construct ( size_type __req, _CharT __c, const _Alloc & __a );

    public :
# 1511 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      copy ( _CharT * __s, size_type __n, size_type __pos = 0 ) const;
# 1521 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      void
      swap ( basic_string & __s );
# 1531 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      const _CharT *
      c_str ( ) const
      { return _M_data ( ); }







      const _CharT *
      data ( ) const
      { return _M_data ( ); }




      allocator_type
      get_allocator ( ) const
      { return _M_dataplus; }
# 1563 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find ( const _CharT * __s, size_type __pos, size_type __n ) const;
# 1576 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find ( const basic_string & __str, size_type __pos = 0 ) const
      { return this -> find ( __str . data ( ), __pos, __str . size ( ) ); }
# 1590 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find ( const _CharT * __s, size_type __pos = 0 ) const
      {
 ;
 return this -> find ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1607 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find ( _CharT __c, size_type __pos = 0 ) const;
# 1620 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      rfind ( const basic_string & __str, size_type __pos = npos ) const
      { return this -> rfind ( __str . data ( ), __pos, __str . size ( ) ); }
# 1635 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      rfind ( const _CharT * __s, size_type __pos, size_type __n ) const;
# 1648 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      rfind ( const _CharT * __s, size_type __pos = npos ) const
      {
 ;
 return this -> rfind ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1665 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      rfind ( _CharT __c, size_type __pos = npos ) const;
# 1678 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find_first_of ( const basic_string & __str, size_type __pos = 0 ) const
      { return this -> find_first_of ( __str . data ( ), __pos, __str . size ( ) ); }
# 1693 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find_first_of ( const _CharT * __s, size_type __pos, size_type __n ) const;
# 1706 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find_first_of ( const _CharT * __s, size_type __pos = 0 ) const
      {
 ;
 return this -> find_first_of ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1725 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find_first_of ( _CharT __c, size_type __pos = 0 ) const
      { return this -> find ( __c, __pos ); }
# 1739 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find_last_of ( const basic_string & __str, size_type __pos = npos ) const
      { return this -> find_last_of ( __str . data ( ), __pos, __str . size ( ) ); }
# 1754 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find_last_of ( const _CharT * __s, size_type __pos, size_type __n ) const;
# 1767 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find_last_of ( const _CharT * __s, size_type __pos = npos ) const
      {
 ;
 return this -> find_last_of ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1786 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find_last_of ( _CharT __c, size_type __pos = npos ) const
      { return this -> rfind ( __c, __pos ); }
# 1800 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find_first_not_of ( const basic_string & __str, size_type __pos = 0 ) const
      { return this -> find_first_not_of ( __str . data ( ), __pos, __str . size ( ) ); }
# 1815 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find_first_not_of ( const _CharT * __s, size_type __pos,
   size_type __n ) const;
# 1829 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find_first_not_of ( const _CharT * __s, size_type __pos = 0 ) const
      {
 ;
 return this -> find_first_not_of ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1846 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find_first_not_of ( _CharT __c, size_type __pos = 0 ) const;
# 1859 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find_last_not_of ( const basic_string & __str, size_type __pos = npos ) const
      { return this -> find_last_not_of ( __str . data ( ), __pos, __str . size ( ) ); }
# 1875 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find_last_not_of ( const _CharT * __s, size_type __pos,
         size_type __n ) const;
# 1888 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find_last_not_of ( const _CharT * __s, size_type __pos = npos ) const
      {
 ;
 return this -> find_last_not_of ( __s, __pos, traits_type :: length ( __s ) );
      }
# 1905 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      size_type
      find_last_not_of ( _CharT __c, size_type __pos = npos ) const;
# 1920 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      basic_string
      substr ( size_type __pos = 0, size_type __n = npos ) const
      { return basic_string ( * this,
       _M_check ( __pos, "basic_string::substr" ), __n ); }
# 1938 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      int
      compare ( const basic_string & __str ) const
      {
 const size_type __size = this -> size ( );
 const size_type __osize = __str . size ( );
 const size_type __len = std :: min ( __size, __osize );

 int __r = traits_type :: compare ( _M_data ( ), __str . data ( ), __len );
 if ( ! __r )
   __r = _S_compare ( __size, __osize );
 return __r;
      }
# 1968 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      int
      compare ( size_type __pos, size_type __n, const basic_string & __str ) const;
# 1992 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      int
      compare ( size_type __pos1, size_type __n1, const basic_string & __str,
       size_type __pos2, size_type __n2 ) const;
# 2010 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      int
      compare ( const _CharT * __s ) const;
# 2033 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      int
      compare ( size_type __pos, size_type __n1, const _CharT * __s ) const;
# 2058 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
      int
      compare ( size_type __pos, size_type __n1, const _CharT * __s,
       size_type __n2 ) const;
  };
# 2063 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( )

    : _M_dataplus ( _S_empty_rep ( ) . _M_refdata ( ), _Alloc ( ) ) { }
# 2079 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    {
      basic_string < _CharT, _Traits, _Alloc > __str ( __lhs );
      __str . append ( __rhs );
      return __str;
    }
# 2095 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs );
# 2106 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( _CharT __lhs, const basic_string < _CharT, _Traits, _Alloc > & __rhs );
# 2116 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string < _CharT, _Traits, _Alloc >
    operator + ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
      const _CharT * __rhs )
    {
      basic_string < _CharT, _Traits, _Alloc > __str ( __lhs );
      __str . append ( __rhs );
      return __str;
    }
# 2132 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_string < _CharT, _Traits, _Alloc >
    operator + ( const basic_string < _CharT, _Traits, _Alloc > & __lhs, _CharT __rhs )
    {
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;
      __string_type __str ( __lhs );
      __str . append ( __size_type ( 1 ), __rhs );
      return __str;
    }
# 2150 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator == ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) == 0; }
# 2162 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator == ( const _CharT * __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) == 0; }
# 2174 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator == ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) == 0; }
# 2187 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator != ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) != 0; }
# 2199 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator != ( const _CharT * __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) != 0; }
# 2211 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator != ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) != 0; }
# 2224 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator < ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) < 0; }
# 2236 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator < ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) < 0; }
# 2248 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator < ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) > 0; }
# 2261 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator > ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) > 0; }
# 2273 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator > ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
       const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) > 0; }
# 2285 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator > ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) < 0; }
# 2298 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator <= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) <= 0; }
# 2310 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator <= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) <= 0; }
# 2322 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator <= ( const _CharT * __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) >= 0; }
# 2335 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator >= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __lhs . compare ( __rhs ) >= 0; }
# 2347 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator >= ( const basic_string < _CharT, _Traits, _Alloc > & __lhs,
        const _CharT * __rhs )
    { return __lhs . compare ( __rhs ) >= 0; }
# 2359 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline bool
    operator >= ( const _CharT * __lhs,
      const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { return __rhs . compare ( __lhs ) <= 0; }
# 2372 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline void
    swap ( basic_string < _CharT, _Traits, _Alloc > & __lhs,
  basic_string < _CharT, _Traits, _Alloc > & __rhs )
    { __lhs . swap ( __rhs ); }
# 2389 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __is,
        basic_string < _CharT, _Traits, _Alloc > & __str );
# 2396 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template<> basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &);
# 2407 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __os,
        const basic_string < _CharT, _Traits, _Alloc > & __str )
    {


      return __ostream_insert ( __os, __str . data ( ), __str . size ( ) );
    }
# 2430 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    getline ( basic_istream < _CharT, _Traits > & __is,
     basic_string < _CharT, _Traits, _Alloc > & __str, _CharT __delim );
# 2447 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    inline basic_istream < _CharT, _Traits > &
    getline ( basic_istream < _CharT, _Traits > & __is,
     basic_string < _CharT, _Traits, _Alloc > & __str )
    { return getline ( __is, __str, __is . widen ( '\n' ) ); }
# 2455 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template<> basic_istream< char, char_traits< char> > &getline(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &, char);
# 2461 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
template<> basic_istream< wchar_t, char_traits< wchar_t> > &getline(basic_istream< wchar_t, char_traits< wchar_t> > &, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &, wchar_t);
# 2465 "/usr/include/c++/4.2.1/bits/basic_string.h" 3
}
# 65 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
namespace std {
# 70 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance >
    bool
    __is_heap ( _RandomAccessIterator __first, _Distance __n )
    {
      _Distance __parent = 0;
      for ( _Distance __child = 1; __child < __n; ++ __child )
 {
   if ( __first [ __parent ] < __first [ __child ] )
     return false;
   if ( ( __child & 1 ) == 0 )
     ++ __parent;
 }
      return true;
    }
# 85 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance,
           typename _StrictWeakOrdering >
    bool
    __is_heap ( _RandomAccessIterator __first, _StrictWeakOrdering __comp,
       _Distance __n )
    {
      _Distance __parent = 0;
      for ( _Distance __child = 1; __child < __n; ++ __child )
 {
   if ( __comp ( __first [ __parent ], __first [ __child ] ) )
     return false;
   if ( ( __child & 1 ) == 0 )
     ++ __parent;
 }
      return true;
    }
# 102 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    bool
    __is_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    { return std :: __is_heap ( __first, std :: distance ( __first, __last ) ); }
# 107 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _StrictWeakOrdering >
    bool
    __is_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
     _StrictWeakOrdering __comp )
    { return std :: __is_heap ( __first, __comp, std :: distance ( __first, __last ) ); }
# 115 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance, typename _Tp >
    void
    __push_heap ( _RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value )
    {
      _Distance __parent = ( __holeIndex - 1 ) / 2;
      while ( __holeIndex > __topIndex && * ( __first + __parent ) < __value )
 {
   * ( __first + __holeIndex ) = * ( __first + __parent );
   __holeIndex = __parent;
   __parent = ( __holeIndex - 1 ) / 2;
 }
      * ( __first + __holeIndex ) = __value;
    }
# 139 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    inline void
    push_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
   _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
   _DistanceType;





      ;


      std :: __push_heap ( __first, _DistanceType ( ( __last - __first ) - 1 ),
         _DistanceType ( 0 ), _ValueType ( * ( __last - 1 ) ) );
    }
# 159 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance, typename _Tp,
     typename _Compare >
    void
    __push_heap ( _RandomAccessIterator __first, _Distance __holeIndex,
  _Distance __topIndex, _Tp __value, _Compare __comp )
    {
      _Distance __parent = ( __holeIndex - 1 ) / 2;
      while ( __holeIndex > __topIndex
      && __comp ( * ( __first + __parent ), __value ) )
 {
   * ( __first + __holeIndex ) = * ( __first + __parent );
   __holeIndex = __parent;
   __parent = ( __holeIndex - 1 ) / 2;
 }
      * ( __first + __holeIndex ) = __value;
    }
# 187 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    push_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
   _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
   _DistanceType;




      ;
      ;

      std :: __push_heap ( __first, _DistanceType ( ( __last - __first ) - 1 ),
         _DistanceType ( 0 ), _ValueType ( * ( __last - 1 ) ), __comp );
    }
# 207 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance, typename _Tp >
    void
    __adjust_heap ( _RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value )
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = 2 * __holeIndex + 2;
      while ( __secondChild < __len )
 {
   if ( * ( __first + __secondChild ) < * ( __first + ( __secondChild - 1 ) ) )
     __secondChild --;
   * ( __first + __holeIndex ) = * ( __first + __secondChild );
   __holeIndex = __secondChild;
   __secondChild = 2 * ( __secondChild + 1 );
 }
      if ( __secondChild == __len )
 {
   * ( __first + __holeIndex ) = * ( __first + ( __secondChild - 1 ) );
   __holeIndex = __secondChild - 1;
 }
      std :: __push_heap ( __first, __holeIndex, __topIndex, __value );
    }
# 230 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Tp >
    inline void
    __pop_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Tp __value )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _Distance;
      * __result = * __first;
      std :: __adjust_heap ( __first, _Distance ( 0 ), _Distance ( __last - __first ),
    __value );
    }
# 251 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    inline void
    pop_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;





      ;
      ;

      std :: __pop_heap ( __first, __last - 1, __last - 1,
        _ValueType ( * ( __last - 1 ) ) );
    }
# 269 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare >
    void
    __adjust_heap ( _RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp )
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = 2 * __holeIndex + 2;
      while ( __secondChild < __len )
 {
   if ( __comp ( * ( __first + __secondChild ),
       * ( __first + ( __secondChild - 1 ) ) ) )
     __secondChild --;
   * ( __first + __holeIndex ) = * ( __first + __secondChild );
   __holeIndex = __secondChild;
   __secondChild = 2 * ( __secondChild + 1 );
 }
      if ( __secondChild == __len )
 {
   * ( __first + __holeIndex ) = * ( __first + ( __secondChild - 1 ) );
   __holeIndex = __secondChild - 1;
 }
      std :: __push_heap ( __first, __holeIndex, __topIndex, __value, __comp );
    }
# 294 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Tp, typename _Compare >
    inline void
    __pop_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Tp __value, _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _Distance;
      * __result = * __first;
      std :: __adjust_heap ( __first, _Distance ( 0 ), _Distance ( __last - __first ),
    __value, __comp );
    }
# 317 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    pop_heap ( _RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp )
    {



      ;
      ;

      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;
      std :: __pop_heap ( __first, __last - 1, __last - 1,
        _ValueType ( * ( __last - 1 ) ), __comp );
    }
# 342 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    void
    make_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
   _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
   _DistanceType;





      ;

      if ( __last - __first < 2 )
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = ( __len - 2 ) / 2;
      while ( true )
 {
   std :: __adjust_heap ( __first, __parent, __len,
        _ValueType ( * ( __first + __parent ) ) );
   if ( __parent == 0 )
     return;
   __parent --;
 }
    }
# 382 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    make_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
   _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
   _DistanceType;




      ;

      if ( __last - __first < 2 )
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = ( __len - 2 ) / 2;
      while ( true )
 {
   std :: __adjust_heap ( __first, __parent, __len,
        _ValueType ( * ( __first + __parent ) ), __comp );
   if ( __parent == 0 )
     return;
   __parent --;
 }
    }
# 420 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator >
    void
    sort_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {





      ;


      while ( __last - __first > 1 )
 std :: pop_heap ( __first, _RandomAccessIterator ( __last -- ) );
    }
# 446 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    sort_heap ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp )
    {



      ;
      ;

      while ( __last - __first > 1 )
 std :: pop_heap ( __first, _RandomAccessIterator ( __last -- ), __comp );
    }
# 461 "/usr/include/c++/4.2.1/bits/stl_heap.h" 3
}
# 67 "/usr/include/c++/4.2.1/bits/stl_tempbuf.h" 3
namespace std {
# 76 "/usr/include/c++/4.2.1/bits/stl_tempbuf.h" 3
template < typename _ForwardIterator, typename _Tp >
    class _Temporary_buffer
    {



    public :
      typedef _Tp value_type;
      typedef value_type * pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected :
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

      void
      _M_initialize_buffer ( const _Tp &, __true_type ) { }

      void
      _M_initialize_buffer ( const _Tp & __val, __false_type )
      { std :: uninitialized_fill_n ( _M_buffer, _M_len, __val ); }

    public :

      size_type
      size ( ) const
      { return _M_len; }


      size_type
      requested_size ( ) const
      { return _M_original_len; }


      iterator
      begin ( )
      { return _M_buffer; }


      iterator
      end ( )
      { return _M_buffer + _M_len; }





      _Temporary_buffer ( _ForwardIterator __first, _ForwardIterator __last );

      ~ _Temporary_buffer ( )
      {
 std :: _Destroy ( _M_buffer, _M_buffer + _M_len );
 std :: return_temporary_buffer ( _M_buffer );
      }

    private :

      _Temporary_buffer ( const _Temporary_buffer & );

      void
      operator = ( const _Temporary_buffer & );
    };
# 142 "/usr/include/c++/4.2.1/bits/stl_tempbuf.h" 3
template < typename _ForwardIterator, typename _Tp >
    _Temporary_buffer < _ForwardIterator, _Tp > ::
    _Temporary_buffer ( _ForwardIterator __first, _ForwardIterator __last )
    : _M_original_len ( std :: distance ( __first, __last ) ),
      _M_len ( 0 ), _M_buffer ( 0 )
    {

      typedef typename std :: __is_scalar < _Tp > :: __type _Trivial;

      try
 {
   pair < pointer, size_type > __p ( get_temporary_buffer <
           value_type > ( _M_original_len ) );
   _M_buffer = __p . first;
   _M_len = __p . second;
   if ( _M_len > 0 )
     _M_initialize_buffer ( * __first, _Trivial ( ) );
 }
      catch ( ... )
 {
   std :: return_temporary_buffer ( _M_buffer );
   _M_buffer = 0;
   _M_len = 0;
   throw;
 }
    }
# 169 "/usr/include/c++/4.2.1/bits/stl_tempbuf.h" 3
}
# 71 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
namespace std {
# 85 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _Tp >
    inline const _Tp &
    __median ( const _Tp & __a, const _Tp & __b, const _Tp & __c )
    {


      if ( __a < __b )
 if ( __b < __c )
   return __b;
 else if ( __a < __c )
   return __c;
 else
   return __a;
      else if ( __a < __c )
 return __a;
      else if ( __b < __c )
 return __c;
      else
 return __b;
    }
# 119 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _Tp, typename _Compare >
    inline const _Tp &
    __median ( const _Tp & __a, const _Tp & __b, const _Tp & __c, _Compare __comp )
    {


      if ( __comp ( __a, __b ) )
 if ( __comp ( __b, __c ) )
   return __b;
 else if ( __comp ( __a, __c ) )
   return __c;
 else
   return __a;
      else if ( __comp ( __a, __c ) )
 return __a;
      else if ( __comp ( __b, __c ) )
 return __c;
      else
 return __b;
    }
# 151 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Function >
    _Function
    for_each ( _InputIterator __first, _InputIterator __last, _Function __f )
    {


      ;
      for (; __first != __last; ++ __first )
 __f ( * __first );
      return __f;
    }
# 168 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Tp >
    inline _InputIterator
    __find ( _InputIterator __first, _InputIterator __last,
    const _Tp & __val, input_iterator_tag )
    {
      while ( __first != __last && ! ( * __first == __val ) )
 ++ __first;
      return __first;
    }
# 183 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Predicate >
    inline _InputIterator
    __find_if ( _InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag )
    {
      while ( __first != __last && ! __pred ( * __first ) )
 ++ __first;
      return __first;
    }
# 198 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Tp >
    _RandomAccessIterator
    __find ( _RandomAccessIterator __first, _RandomAccessIterator __last,
    const _Tp & __val, random_access_iterator_tag )
    {
      typename iterator_traits < _RandomAccessIterator > :: difference_type
 __trip_count = ( __last - __first ) >> 2;

      for (; __trip_count > 0; -- __trip_count )
 {
   if ( * __first == __val )
     return __first;
   ++ __first;

   if ( * __first == __val )
     return __first;
   ++ __first;

   if ( * __first == __val )
     return __first;
   ++ __first;

   if ( * __first == __val )
     return __first;
   ++ __first;
 }

      switch ( __last - __first )
 {
 case 3 :
   if ( * __first == __val )
     return __first;
   ++ __first;
 case 2 :
   if ( * __first == __val )
     return __first;
   ++ __first;
 case 1 :
   if ( * __first == __val )
     return __first;
   ++ __first;
 case 0 :
 default :
   return __last;
 }
    }
# 250 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Predicate >
    _RandomAccessIterator
    __find_if ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag )
    {
      typename iterator_traits < _RandomAccessIterator > :: difference_type
 __trip_count = ( __last - __first ) >> 2;

      for (; __trip_count > 0; -- __trip_count )
 {
   if ( __pred ( * __first ) )
     return __first;
   ++ __first;

   if ( __pred ( * __first ) )
     return __first;
   ++ __first;

   if ( __pred ( * __first ) )
     return __first;
   ++ __first;

   if ( __pred ( * __first ) )
     return __first;
   ++ __first;
 }

      switch ( __last - __first )
 {
 case 3 :
   if ( __pred ( * __first ) )
     return __first;
   ++ __first;
 case 2 :
   if ( __pred ( * __first ) )
     return __first;
   ++ __first;
 case 1 :
   if ( __pred ( * __first ) )
     return __first;
   ++ __first;
 case 0 :
 default :
   return __last;
 }
    }
# 302 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
        istreambuf_iterator < _CharT > > :: __type
    find ( istreambuf_iterator < _CharT >, istreambuf_iterator < _CharT >,
  const _CharT & );
# 316 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Tp >
    inline _InputIterator
    find ( _InputIterator __first, _InputIterator __last,
  const _Tp & __val )
    {




      ;
      return std :: __find ( __first, __last, __val,
           std :: __iterator_category ( __first ) );
    }
# 338 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Predicate >
    inline _InputIterator
    find_if ( _InputIterator __first, _InputIterator __last,
     _Predicate __pred )
    {




      ;
      return std :: __find_if ( __first, __last, __pred,
       std :: __iterator_category ( __first ) );
    }
# 360 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    _ForwardIterator
    adjacent_find ( _ForwardIterator __first, _ForwardIterator __last )
    {




      ;
      if ( __first == __last )
 return __last;
      _ForwardIterator __next = __first;
      while ( ++ __next != __last )
 {
   if ( * __first == * __next )
     return __first;
   __first = __next;
 }
      return __last;
    }
# 391 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _BinaryPredicate >
    _ForwardIterator
    adjacent_find ( _ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred )
    {





      ;
      if ( __first == __last )
 return __last;
      _ForwardIterator __next = __first;
      while ( ++ __next != __last )
 {
   if ( __binary_pred ( * __first, * __next ) )
     return __first;
   __first = __next;
 }
      return __last;
    }
# 422 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Tp >
    typename iterator_traits < _InputIterator > :: difference_type
    count ( _InputIterator __first, _InputIterator __last, const _Tp & __value )
    {




      ;
      typename iterator_traits < _InputIterator > :: difference_type __n = 0;
      for (; __first != __last; ++ __first )
 if ( * __first == __value )
   ++ __n;
      return __n;
    }
# 446 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _Predicate >
    typename iterator_traits < _InputIterator > :: difference_type
    count_if ( _InputIterator __first, _InputIterator __last, _Predicate __pred )
    {




      ;
      typename iterator_traits < _InputIterator > :: difference_type __n = 0;
      for (; __first != __last; ++ __first )
 if ( __pred ( * __first ) )
   ++ __n;
      return __n;
    }
# 485 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    _ForwardIterator1
    search ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2 )
    {






      ;
      ;

      if ( __first1 == __last1 || __first2 == __last2 )
 return __first1;


      _ForwardIterator2 __tmp ( __first2 );
      ++ __tmp;
      if ( __tmp == __last2 )
 return std :: find ( __first1, __last1, * __first2 );


      _ForwardIterator2 __p1, __p;
      __p1 = __first2; ++ __p1;
      _ForwardIterator1 __current = __first1;

      while ( __first1 != __last1 )
 {
   __first1 = std :: find ( __first1, __last1, * __first2 );
   if ( __first1 == __last1 )
     return __last1;

   __p = __p1;
   __current = __first1;
   if ( ++ __current == __last1 )
     return __last1;

   while ( * __current == * __p )
     {
       if ( ++ __p == __last2 )
  return __first1;
       if ( ++ __current == __last1 )
  return __last1;
     }
   ++ __first1;
 }
      return __first1;
    }
# 556 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate >
    _ForwardIterator1
    search ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate )
    {






      ;
      ;


      if ( __first1 == __last1 || __first2 == __last2 )
 return __first1;


      _ForwardIterator2 __tmp ( __first2 );
      ++ __tmp;
      if ( __tmp == __last2 )
 {
   while ( __first1 != __last1 && ! __predicate ( * __first1, * __first2 ) )
     ++ __first1;
   return __first1;
 }


      _ForwardIterator2 __p1, __p;
      __p1 = __first2; ++ __p1;
      _ForwardIterator1 __current = __first1;

      while ( __first1 != __last1 )
 {
   while ( __first1 != __last1 )
     {
       if ( __predicate ( * __first1, * __first2 ) )
  break;
       ++ __first1;
     }
   while ( __first1 != __last1 && ! __predicate ( * __first1, * __first2 ) )
     ++ __first1;
   if ( __first1 == __last1 )
     return __last1;

   __p = __p1;
   __current = __first1;
   if ( ++ __current == __last1 )
     return __last1;

   while ( __predicate ( * __current, * __p ) )
     {
       if ( ++ __p == __last2 )
  return __first1;
       if ( ++ __current == __last1 )
  return __last1;
     }
   ++ __first1;
 }
      return __first1;
    }
# 628 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Integer, typename _Tp >
    _ForwardIterator
    __search_n ( _ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp & __val,
        std :: forward_iterator_tag )
    {
      __first = std :: find ( __first, __last, __val );
      while ( __first != __last )
 {
   typename iterator_traits < _ForwardIterator > :: difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++ __i;
   while ( __i != __last && __n != 1 && * __i == __val )
     {
       ++ __i;
       -- __n;
     }
   if ( __n == 1 )
     return __first;
   if ( __i == __last )
     return __last;
   __first = std :: find ( ++ __i, __last, __val );
 }
      return __last;
    }
# 662 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIter, typename _Integer, typename _Tp >
    _RandomAccessIter
    __search_n ( _RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp & __val,
        std :: random_access_iterator_tag )
    {

      typedef typename std :: iterator_traits < _RandomAccessIter > :: difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if ( __tailSize < __pattSize )
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while ( 1 )
 {


   while ( ! ( * __lookAhead == __val ) )
     {
       if ( __tailSize < __pattSize )
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for ( _RandomAccessIter __backTrack = __lookAhead - 1;
        * __backTrack == __val; -- __backTrack )
     {
       if ( -- __remainder == 0 )
  return ( __lookAhead - __skipOffset );
     }
   if ( __remainder > __tailSize )
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }
# 720 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Integer, typename _Tp >
    _ForwardIterator
    search_n ( _ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp & __val )
    {




      ;

      if ( __count <= 0 )
 return __first;
      if ( __count == 1 )
 return std :: find ( __first, __last, __val );
      return std :: __search_n ( __first, __last, __count, __val,
        std :: __iterator_category ( __first ) );
    }
# 747 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate >
    _ForwardIterator
    __search_n ( _ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp & __val,
        _BinaryPredicate __binary_pred, std :: forward_iterator_tag )
    {
      while ( __first != __last && ! __binary_pred ( * __first, __val ) )
        ++ __first;

      while ( __first != __last )
 {
   typename iterator_traits < _ForwardIterator > :: difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++ __i;
   while ( __i != __last && __n != 1 && __binary_pred ( * __i, __val ) )
     {
       ++ __i;
       -- __n;
     }
   if ( __n == 1 )
     return __first;
   if ( __i == __last )
     return __last;
   __first = ++ __i;
   while ( __first != __last && ! __binary_pred ( * __first, __val ) )
     ++ __first;
 }
      return __last;
    }
# 787 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIter, typename _Integer, typename _Tp,
    typename _BinaryPredicate >
    _RandomAccessIter
    __search_n ( _RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp & __val,
        _BinaryPredicate __binary_pred, std :: random_access_iterator_tag )
    {

      typedef typename std :: iterator_traits < _RandomAccessIter > :: difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if ( __tailSize < __pattSize )
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while ( 1 )
 {


   while ( ! __binary_pred ( * __lookAhead, __val ) )
     {
       if ( __tailSize < __pattSize )
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for ( _RandomAccessIter __backTrack = __lookAhead - 1;
        __binary_pred ( * __backTrack, __val ); -- __backTrack )
     {
       if ( -- __remainder == 0 )
  return ( __lookAhead - __skipOffset );
     }
   if ( __remainder > __tailSize )
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }
# 848 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate >
    _ForwardIterator
    search_n ( _ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp & __val,
      _BinaryPredicate __binary_pred )
    {




      ;

      if ( __count <= 0 )
 return __first;
      if ( __count == 1 )
 {
   while ( __first != __last && ! __binary_pred ( * __first, __val ) )
     ++ __first;
   return __first;
 }
      return std :: __search_n ( __first, __last, __count, __val, __binary_pred,
        std :: __iterator_category ( __first ) );
    }
# 884 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    _ForwardIterator2
    swap_ranges ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2 )
    {
# 900 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
      ;

      for (; __first1 != __last1; ++ __first1, ++ __first2 )
 std :: iter_swap ( __first1, __first2 );
      return __first2;
    }
# 922 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation >
    _OutputIterator
    transform ( _InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op )
    {





      ;

      for (; __first != __last; ++ __first, ++ __result )
 * __result = __unary_op ( * __first );
      return __result;
    }
# 957 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation >
    _OutputIterator
    transform ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op )
    {






      ;

      for (; __first1 != __last1; ++ __first1, ++ __first2, ++ __result )
 * __result = __binary_op ( * __first1, * __first2 );
      return __result;
    }
# 989 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    void
    replace ( _ForwardIterator __first, _ForwardIterator __last,
     const _Tp & __old_value, const _Tp & __new_value )
    {







      ;

      for (; __first != __last; ++ __first )
 if ( * __first == __old_value )
   * __first = __new_value;
    }
# 1020 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate, typename _Tp >
    void
    replace_if ( _ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp & __new_value )
    {







      ;

      for (; __first != __last; ++ __first )
 if ( __pred ( * __first ) )
   * __first = __new_value;
    }
# 1053 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator, typename _Tp >
    _OutputIterator
    replace_copy ( _InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp & __old_value, const _Tp & __new_value )
    {






      ;

      for (; __first != __last; ++ __first, ++ __result )
 if ( * __first == __old_value )
   * __result = __new_value;
 else
   * __result = * __first;
      return __result;
    }
# 1089 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp >
    _OutputIterator
    replace_copy_if ( _InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp & __new_value )
    {






      ;

      for (; __first != __last; ++ __first, ++ __result )
 if ( __pred ( * __first ) )
   * __result = __new_value;
 else
   * __result = * __first;
      return __result;
    }
# 1123 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Generator >
    void
    generate ( _ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen )
    {




      ;

      for (; __first != __last; ++ __first )
 * __first = __gen ( );
    }
# 1149 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _OutputIterator, typename _Size, typename _Generator >
    _OutputIterator
    generate_n ( _OutputIterator __first, _Size __n, _Generator __gen )
    {





      for (; __n > 0; -- __n, ++ __first )
 * __first = __gen ( );
      return __first;
    }
# 1176 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator, typename _Tp >
    _OutputIterator
    remove_copy ( _InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp & __value )
    {






      ;

      for (; __first != __last; ++ __first )
 if ( ! ( * __first == __value ) )
   {
     * __result = * __first;
     ++ __result;
   }
      return __result;
    }
# 1212 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _Predicate >
    _OutputIterator
    remove_copy_if ( _InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred )
    {






      ;

      for (; __first != __last; ++ __first )
 if ( ! __pred ( * __first ) )
   {
     * __result = * __first;
     ++ __result;
   }
      return __result;
    }
# 1251 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    _ForwardIterator
    remove ( _ForwardIterator __first, _ForwardIterator __last,
    const _Tp & __value )
    {





      ;

      __first = std :: find ( __first, __last, __value );
      _ForwardIterator __i = __first;
      return __first == __last ? __first
          : std :: remove_copy ( ++ __i, __last,
        __first, __value );
    }
# 1286 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate >
    _ForwardIterator
    remove_if ( _ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred )
    {





      ;

      __first = std :: find_if ( __first, __last, __pred );
      _ForwardIterator __i = __first;
      return __first == __last ? __first
          : std :: remove_copy_if ( ++ __i, __last,
           __first, __pred );
    }
# 1312 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _OutputIterator >
    _OutputIterator
    __unique_copy ( _ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result,
    forward_iterator_tag, output_iterator_tag )
    {

      _ForwardIterator __next = __first;
      * __result = * __first;
      while ( ++ __next != __last )
 if ( ! ( * __first == * __next ) )
   {
     __first = __next;
     * ++ __result = * __first;
   }
      return ++ __result;
    }
# 1337 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator >
    _OutputIterator
    __unique_copy ( _InputIterator __first, _InputIterator __last,
    _OutputIterator __result,
    input_iterator_tag, output_iterator_tag )
    {

      typename iterator_traits < _InputIterator > :: value_type __value = * __first;
      * __result = __value;
      while ( ++ __first != __last )
 if ( ! ( __value == * __first ) )
   {
     __value = * __first;
     * ++ __result = __value;
   }
      return ++ __result;
    }
# 1362 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _ForwardIterator >
    _ForwardIterator
    __unique_copy ( _InputIterator __first, _InputIterator __last,
    _ForwardIterator __result,
    input_iterator_tag, forward_iterator_tag )
    {

      * __result = * __first;
      while ( ++ __first != __last )
 if ( ! ( * __result == * __first ) )
   * ++ __result = * __first;
      return ++ __result;
    }
# 1384 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate >
    _OutputIterator
    __unique_copy ( _ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag )
    {





      _ForwardIterator __next = __first;
      * __result = * __first;
      while ( ++ __next != __last )
 if ( ! __binary_pred ( * __first, * __next ) )
   {
     __first = __next;
     * ++ __result = * __first;
   }
      return ++ __result;
    }
# 1415 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate >
    _OutputIterator
    __unique_copy ( _InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag )
    {





      typename iterator_traits < _InputIterator > :: value_type __value = * __first;
      * __result = __value;
      while ( ++ __first != __last )
 if ( ! __binary_pred ( __value, * __first ) )
   {
     __value = * __first;
     * ++ __result = __value;
   }
      return ++ __result;
    }
# 1446 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate >
    _ForwardIterator
    __unique_copy ( _InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag )
    {





      * __result = * __first;
      while ( ++ __first != __last )
 if ( ! __binary_pred ( * __result, * __first ) )
   * ++ __result = * __first;
      return ++ __result;
    }
# 1487 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator >
    inline _OutputIterator
    unique_copy ( _InputIterator __first, _InputIterator __last,
  _OutputIterator __result )
    {






      ;

      if ( __first == __last )
 return __result;
      return std :: __unique_copy ( __first, __last, __result,
    std :: __iterator_category ( __first ),
    std :: __iterator_category ( __result ) );
    }
# 1527 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate >
    inline _OutputIterator
    unique_copy ( _InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred )
    {




      ;

      if ( __first == __last )
 return __result;
      return std :: __unique_copy ( __first, __last, __result, __binary_pred,
    std :: __iterator_category ( __first ),
    std :: __iterator_category ( __result ) );
    }
# 1560 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    _ForwardIterator
    unique ( _ForwardIterator __first, _ForwardIterator __last )
    {





      ;


      __first = std :: adjacent_find ( __first, __last );
      if ( __first == __last )
 return __last;


      _ForwardIterator __dest = __first;
      ++ __first;
      while ( ++ __first != __last )
 if ( ! ( * __dest == * __first ) )
   * ++ __dest = * __first;
      return ++ __dest;
    }
# 1599 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _BinaryPredicate >
    _ForwardIterator
    unique ( _ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred )
    {






      ;


      __first = std :: adjacent_find ( __first, __last, __binary_pred );
      if ( __first == __last )
 return __last;


      _ForwardIterator __dest = __first;
      ++ __first;
      while ( ++ __first != __last )
 if ( ! __binary_pred ( * __dest, * __first ) )
   * ++ __dest = * __first;
      return ++ __dest;
    }
# 1633 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    void
    __reverse ( _BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag )
    {
      while ( true )
 if ( __first == __last || __first == -- __last )
   return;
 else
   {
     std :: iter_swap ( __first, __last );
     ++ __first;
   }
    }
# 1655 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __reverse ( _RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag )
    {
      if ( __first == __last )
 return;
      -- __last;
      while ( __first < __last )
 {
   std :: iter_swap ( __first, __last );
   ++ __first;
   -- __last;
 }
    }
# 1682 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    inline void
    reverse ( _BidirectionalIterator __first, _BidirectionalIterator __last )
    {



      ;
      std :: __reverse ( __first, __last, std :: __iterator_category ( __first ) );
    }
# 1708 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _OutputIterator >
    _OutputIterator
    reverse_copy ( _BidirectionalIterator __first, _BidirectionalIterator __last,
        _OutputIterator __result )
    {





      ;

      while ( __first != __last )
 {
   -- __last;
   * __result = * __last;
   ++ __result;
 }
      return __result;
    }
# 1736 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _EuclideanRingElement >
    _EuclideanRingElement
    __gcd ( _EuclideanRingElement __m, _EuclideanRingElement __n )
    {
      while ( __n != 0 )
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }
# 1754 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    void
    __rotate ( _ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag )
    {
      if ( __first == __middle || __last == __middle )
 return;

      _ForwardIterator __first2 = __middle;
      do
 {
   swap ( * __first, * __first2 );
   ++ __first;
   ++ __first2;
   if ( __first == __middle )
     __middle = __first2;
 }
      while ( __first2 != __last );

      __first2 = __middle;

      while ( __first2 != __last )
 {
   swap ( * __first, * __first2 );
   ++ __first;
   ++ __first2;
   if ( __first == __middle )
     __middle = __first2;
   else if ( __first2 == __last )
     __first2 = __middle;
 }
    }
# 1794 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    void
    __rotate ( _BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag )
    {




      if ( __first == __middle || __last == __middle )
 return;

      std :: __reverse ( __first, __middle, bidirectional_iterator_tag ( ) );
      std :: __reverse ( __middle, __last, bidirectional_iterator_tag ( ) );

      while ( __first != __middle && __middle != __last )
 {
   swap ( * __first, * -- __last );
   ++ __first;
 }

      if ( __first == __middle )
 std :: __reverse ( __middle, __last, bidirectional_iterator_tag ( ) );
      else
 std :: __reverse ( __first, __middle, bidirectional_iterator_tag ( ) );
    }
# 1828 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __rotate ( _RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag )
    {




      if ( __first == __middle || __last == __middle )
 return;

      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _Distance;
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      const _Distance __n = __last - __first;
      const _Distance __k = __middle - __first;
      const _Distance __l = __n - __k;

      if ( __k == __l )
 {
   std :: swap_ranges ( __first, __middle, __middle );
   return;
 }

      const _Distance __d = __gcd ( __n, __k );

      for ( _Distance __i = 0; __i < __d; __i ++ )
 {
   _ValueType __tmp = * __first;
   _RandomAccessIterator __p = __first;

   if ( __k < __l )
     {
       for ( _Distance __j = 0; __j < __l / __d; __j ++ )
  {
    if ( __p > __first + __l )
      {
        * __p = * ( __p - __l );
        __p -= __l;
      }

    * __p = * ( __p + __k );
    __p += __k;
  }
     }
   else
     {
       for ( _Distance __j = 0; __j < __k / __d - 1; __j ++ )
  {
    if ( __p < __last - __k )
      {
        * __p = * ( __p + __k );
        __p += __k;
      }
    * __p = * ( __p - __l );
    __p -= __l;
  }
     }

   * __p = __tmp;
   ++ __first;
 }
    }
# 1915 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    inline void
    rotate ( _ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last )
    {



      ;
      ;

      typedef typename iterator_traits < _ForwardIterator > :: iterator_category
 _IterType;
      std :: __rotate ( __first, __middle, __last, _IterType ( ) );
    }
# 1948 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _OutputIterator >
    _OutputIterator
    rotate_copy ( _ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result )
    {




      ;
      ;

      return std :: copy ( __first, __middle,
                       std :: copy ( __middle, __last, __result ) );
    }
# 1974 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    random_shuffle ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {



      ;

      if ( __first != __last )
 for ( _RandomAccessIterator __i = __first + 1; __i != __last; ++ __i )
   std :: iter_swap ( __i, __first + ( std :: rand ( ) % ( ( __i - __first ) + 1 ) ) );
    }
# 2001 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _RandomNumberGenerator >
    void
    random_shuffle ( _RandomAccessIterator __first, _RandomAccessIterator __last,
     _RandomNumberGenerator & __rand )
    {



      ;

      if ( __first == __last )
 return;
      for ( _RandomAccessIterator __i = __first + 1; __i != __last; ++ __i )
 std :: iter_swap ( __i, __first + __rand ( ( __i - __first ) + 1 ) );
    }
# 2023 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate >
    _ForwardIterator
    __partition ( _ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred,
  forward_iterator_tag )
    {
      if ( __first == __last )
 return __first;

      while ( __pred ( * __first ) )
 if ( ++ __first == __last )
   return __first;

      _ForwardIterator __next = __first;

      while ( ++ __next != __last )
 if ( __pred ( * __next ) )
   {
     swap ( * __first, * __next );
     ++ __first;
   }

      return __first;
    }
# 2053 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Predicate >
    _BidirectionalIterator
    __partition ( _BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred,
  bidirectional_iterator_tag )
    {
      while ( true )
 {
   while ( true )
     if ( __first == __last )
       return __first;
     else if ( __pred ( * __first ) )
       ++ __first;
     else
       break;
   -- __last;
   while ( true )
     if ( __first == __last )
       return __first;
     else if ( ! __pred ( * __last ) )
       -- __last;
     else
       break;
   std :: iter_swap ( __first, __last );
   ++ __first;
 }
    }
# 2095 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate >
    inline _ForwardIterator
    partition ( _ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred )
    {





      ;

      return std :: __partition ( __first, __last, __pred,
         std :: __iterator_category ( __first ) );
    }
# 2117 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate, typename _Distance >
    _ForwardIterator
    __inplace_stable_partition ( _ForwardIterator __first,
          _ForwardIterator __last,
          _Predicate __pred, _Distance __len )
    {
      if ( __len == 1 )
 return __pred ( * __first ) ? __last : __first;
      _ForwardIterator __middle = __first;
      std :: advance ( __middle, __len / 2 );
      _ForwardIterator __begin = std :: __inplace_stable_partition ( __first,
         __middle,
         __pred,
         __len / 2 );
      _ForwardIterator __end = std :: __inplace_stable_partition ( __middle, __last,
              __pred,
              __len
              - __len / 2 );
      std :: rotate ( __begin, __middle, __end );
      std :: advance ( __begin, std :: distance ( __middle, __end ) );
      return __begin;
    }
# 2145 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance >
    _ForwardIterator
    __stable_partition_adaptive ( _ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size )
    {
      if ( __len <= __buffer_size )
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;
   for (; __first != __last; ++ __first )
     if ( __pred ( * __first ) )
       {
  * __result1 = * __first;
  ++ __result1;
       }
     else
       {
  * __result2 = * __first;
  ++ __result2;
       }
   std :: copy ( __buffer, __result2, __result1 );
   return __result1;
 }
      else
 {
   _ForwardIterator __middle = __first;
   std :: advance ( __middle, __len / 2 );
   _ForwardIterator __begin =
     std :: __stable_partition_adaptive ( __first, __middle, __pred,
          __len / 2, __buffer,
          __buffer_size );
   _ForwardIterator __end =
     std :: __stable_partition_adaptive ( __middle, __last, __pred,
          __len - __len / 2,
          __buffer, __buffer_size );
   std :: rotate ( __begin, __middle, __end );
   std :: advance ( __begin, std :: distance ( __middle, __end ) );
   return __begin;
 }
    }
# 2206 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Predicate >
    _ForwardIterator
    stable_partition ( _ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred )
    {





      ;

      if ( __first == __last )
 return __first;
      else
 {
   typedef typename iterator_traits < _ForwardIterator > :: value_type
     _ValueType;
   typedef typename iterator_traits < _ForwardIterator > :: difference_type
     _DistanceType;

   _Temporary_buffer < _ForwardIterator, _ValueType > __buf ( __first,
        __last );
 if ( __buf . size ( ) > 0 )
   return
     std :: __stable_partition_adaptive ( __first, __last, __pred,
       _DistanceType ( __buf . requested_size ( ) ),
       __buf . begin ( ), __buf . size ( ) );
 else
   return
     std :: __inplace_stable_partition ( __first, __last, __pred,
      _DistanceType ( __buf . requested_size ( ) ) );
 }
    }
# 2246 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Tp >
    _RandomAccessIterator
    __unguarded_partition ( _RandomAccessIterator __first,
     _RandomAccessIterator __last, _Tp __pivot )
    {
      while ( true )
 {
   while ( * __first < __pivot )
     ++ __first;
   -- __last;
   while ( __pivot < * __last )
     -- __last;
   if ( ! ( __first < __last ) )
     return __first;
   std :: iter_swap ( __first, __last );
   ++ __first;
 }
    }
# 2270 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Tp, typename _Compare >
    _RandomAccessIterator
    __unguarded_partition ( _RandomAccessIterator __first,
     _RandomAccessIterator __last,
     _Tp __pivot, _Compare __comp )
    {
      while ( true )
 {
   while ( __comp ( * __first, __pivot ) )
     ++ __first;
   -- __last;
   while ( __comp ( __pivot, * __last ) )
     -- __last;
   if ( ! ( __first < __last ) )
     return __first;
   std :: iter_swap ( __first, __last );
   ++ __first;
 }
    }
# 2296 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
enum { _S_threshold = 16};
# 2303 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Tp >
    void
    __unguarded_linear_insert ( _RandomAccessIterator __last, _Tp __val )
    {
      _RandomAccessIterator __next = __last;
      -- __next;
      while ( __val < * __next )
 {
   * __last = * __next;
   __last = __next;
   -- __next;
 }
      * __last = __val;
    }
# 2323 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Tp, typename _Compare >
    void
    __unguarded_linear_insert ( _RandomAccessIterator __last, _Tp __val,
         _Compare __comp )
    {
      _RandomAccessIterator __next = __last;
      -- __next;
      while ( __comp ( __val, * __next ) )
 {
   * __last = * __next;
   __last = __next;
   -- __next;
 }
      * __last = __val;
    }
# 2344 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __insertion_sort ( _RandomAccessIterator __first,
       _RandomAccessIterator __last )
    {
      if ( __first == __last )
 return;

      for ( _RandomAccessIterator __i = __first + 1; __i != __last; ++ __i )
 {
   typename iterator_traits < _RandomAccessIterator > :: value_type
     __val = * __i;
   if ( __val < * __first )
     {
       std :: copy_backward ( __first, __i, __i + 1 );
       * __first = __val;
     }
   else
     std :: __unguarded_linear_insert ( __i, __val );
 }
    }
# 2371 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    __insertion_sort ( _RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp )
    {
      if ( __first == __last ) return;

      for ( _RandomAccessIterator __i = __first + 1; __i != __last; ++ __i )
 {
   typename iterator_traits < _RandomAccessIterator > :: value_type
     __val = * __i;
   if ( __comp ( __val, * __first ) )
     {
       std :: copy_backward ( __first, __i, __i + 1 );
       * __first = __val;
     }
   else
     std :: __unguarded_linear_insert ( __i, __val, __comp );
 }
    }
# 2397 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    __unguarded_insertion_sort ( _RandomAccessIterator __first,
          _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      for ( _RandomAccessIterator __i = __first; __i != __last; ++ __i )
 std :: __unguarded_linear_insert ( __i, _ValueType ( * __i ) );
    }
# 2414 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    __unguarded_insertion_sort ( _RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      for ( _RandomAccessIterator __i = __first; __i != __last; ++ __i )
 std :: __unguarded_linear_insert ( __i, _ValueType ( * __i ), __comp );
    }
# 2431 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __final_insertion_sort ( _RandomAccessIterator __first,
      _RandomAccessIterator __last )
    {
      if ( __last - __first > int ( _S_threshold ) )
 {
   std :: __insertion_sort ( __first, __first + int ( _S_threshold ) );
   std :: __unguarded_insertion_sort ( __first + int ( _S_threshold ), __last );
 }
      else
 std :: __insertion_sort ( __first, __last );
    }
# 2450 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    __final_insertion_sort ( _RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp )
    {
      if ( __last - __first > int ( _S_threshold ) )
 {
   std :: __insertion_sort ( __first, __first + int ( _S_threshold ), __comp );
   std :: __unguarded_insertion_sort ( __first + int ( _S_threshold ), __last,
       __comp );
 }
      else
 std :: __insertion_sort ( __first, __last, __comp );
    }
# 2470 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __heap_select ( _RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      std :: make_heap ( __first, __middle );
      for ( _RandomAccessIterator __i = __middle; __i < __last; ++ __i )
 if ( * __i < * __first )
   std :: __pop_heap ( __first, __middle, __i, _ValueType ( * __i ) );
    }
# 2490 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    __heap_select ( _RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      std :: make_heap ( __first, __middle, __comp );
      for ( _RandomAccessIterator __i = __middle; __i < __last; ++ __i )
 if ( __comp ( * __i, * __first ) )
   std :: __pop_heap ( __first, __middle, __i, _ValueType ( * __i ), __comp );
    }
# 2510 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _Size >
    inline _Size
    __lg ( _Size __n )
    {
      _Size __k;
      for ( __k = 0; __n != 1; __n >>= 1 )
 ++ __k;
      return __k;
    }
# 2535 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    partial_sort ( _RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;





      ;
      ;

      std :: __heap_select ( __first, __middle, __last );
      std :: sort_heap ( __first, __middle );
    }
# 2573 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    partial_sort ( _RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;






      ;
      ;

      std :: __heap_select ( __first, __middle, __last, __comp );
      std :: sort_heap ( __first, __middle, __comp );
    }
# 2612 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _RandomAccessIterator >
    _RandomAccessIterator
    partial_sort_copy ( _InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last )
    {
      typedef typename iterator_traits < _InputIterator > :: value_type
 _InputValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _OutputValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _DistanceType;
# 2632 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
      ;
      ;

      if ( __result_first == __result_last )
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while ( __first != __last && __result_real_last != __result_last )
 {
   * __result_real_last = * __first;
   ++ __result_real_last;
   ++ __first;
 }
      std :: make_heap ( __result_first, __result_real_last );
      while ( __first != __last )
 {
   if ( * __first < * __result_first )
     std :: __adjust_heap ( __result_first, _DistanceType ( 0 ),
          _DistanceType ( __result_real_last
          - __result_first ),
          _InputValueType ( * __first ) );
   ++ __first;
 }
      std :: sort_heap ( __result_first, __result_real_last );
      return __result_real_last;
    }
# 2677 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _RandomAccessIterator, typename _Compare >
    _RandomAccessIterator
    partial_sort_copy ( _InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator > :: value_type
 _InputValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _OutputValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _DistanceType;
# 2701 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
      ;
      ;

      if ( __result_first == __result_last )
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while ( __first != __last && __result_real_last != __result_last )
 {
   * __result_real_last = * __first;
   ++ __result_real_last;
   ++ __first;
 }
      std :: make_heap ( __result_first, __result_real_last, __comp );
      while ( __first != __last )
 {
   if ( __comp ( * __first, * __result_first ) )
     std :: __adjust_heap ( __result_first, _DistanceType ( 0 ),
          _DistanceType ( __result_real_last
          - __result_first ),
          _InputValueType ( * __first ),
          __comp );
   ++ __first;
 }
      std :: sort_heap ( __result_first, __result_real_last, __comp );
      return __result_real_last;
    }
# 2733 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Size >
    void
    __introsort_loop ( _RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      while ( __last - __first > int ( _S_threshold ) )
 {
   if ( __depth_limit == 0 )
     {
       std :: partial_sort ( __first, __last, __last );
       return;
     }
   -- __depth_limit;
   _RandomAccessIterator __cut =
     std :: __unguarded_partition ( __first, __last,
           _ValueType ( std :: __median ( * __first,
        * ( __first
          + ( __last
             - __first )
          / 2 ),
        * ( __last
          - 1 ) ) ) );
   std :: __introsort_loop ( __cut, __last, __depth_limit );
   __last = __cut;
 }
    }
# 2769 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Size, typename _Compare >
    void
    __introsort_loop ( _RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      while ( __last - __first > int ( _S_threshold ) )
 {
   if ( __depth_limit == 0 )
     {
       std :: partial_sort ( __first, __last, __last, __comp );
       return;
     }
   -- __depth_limit;
   _RandomAccessIterator __cut =
     std :: __unguarded_partition ( __first, __last,
           _ValueType ( std :: __median ( * __first,
        * ( __first
          + ( __last
             - __first )
          / 2 ),
        * ( __last - 1 ),
        __comp ) ),
           __comp );
   std :: __introsort_loop ( __cut, __last, __depth_limit, __comp );
   __last = __cut;
 }
    }
# 2814 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    sort ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;





      ;

      if ( __first != __last )
 {
   std :: __introsort_loop ( __first, __last,
    std :: __lg ( __last - __first ) * 2 );
   std :: __final_insertion_sort ( __first, __last );
 }
    }
# 2849 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    sort ( _RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;






      ;

      if ( __first != __last )
 {
   std :: __introsort_loop ( __first, __last,
    std :: __lg ( __last - __first ) * 2, __comp );
   std :: __final_insertion_sort ( __first, __last, __comp );
 }
    }
# 2882 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    _ForwardIterator
    lower_bound ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;




      ;

      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( * __middle < __val )
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2932 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Compare >
    _ForwardIterator
    lower_bound ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val, _Compare __comp )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;





      ;

      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( __comp ( * __middle, __val ) )
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2979 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    _ForwardIterator
    upper_bound ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;




      ;

      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( __val < * __middle )
     __len = __half;
   else
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 3029 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Compare >
    _ForwardIterator
    upper_bound ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val, _Compare __comp )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;





      ;

      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( __comp ( __val, * __middle ) )
     __len = __half;
   else
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 3071 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Distance >
    void
    __merge_without_buffer ( _BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2 )
    {
      if ( __len1 == 0 || __len2 == 0 )
 return;
      if ( __len1 + __len2 == 2 )
 {
   if ( * __middle < * __first )
     std :: iter_swap ( __first, __middle );
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if ( __len1 > __len2 )
 {
   __len11 = __len1 / 2;
   std :: advance ( __first_cut, __len11 );
   __second_cut = std :: lower_bound ( __middle, __last, * __first_cut );
   __len22 = std :: distance ( __middle, __second_cut );
 }
      else
 {
   __len22 = __len2 / 2;
   std :: advance ( __second_cut, __len22 );
   __first_cut = std :: upper_bound ( __first, __middle, * __second_cut );
   __len11 = std :: distance ( __first, __first_cut );
 }
      std :: rotate ( __first_cut, __middle, __second_cut );
      _BidirectionalIterator __new_middle = __first_cut;
      std :: advance ( __new_middle, std :: distance ( __middle, __second_cut ) );
      std :: __merge_without_buffer ( __first, __first_cut, __new_middle,
      __len11, __len22 );
      std :: __merge_without_buffer ( __new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22 );
    }
# 3118 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Distance,
    typename _Compare >
    void
    __merge_without_buffer ( _BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp )
    {
      if ( __len1 == 0 || __len2 == 0 )
 return;
      if ( __len1 + __len2 == 2 )
 {
   if ( __comp ( * __middle, * __first ) )
     std :: iter_swap ( __first, __middle );
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if ( __len1 > __len2 )
 {
   __len11 = __len1 / 2;
   std :: advance ( __first_cut, __len11 );
   __second_cut = std :: lower_bound ( __middle, __last, * __first_cut,
       __comp );
   __len22 = std :: distance ( __middle, __second_cut );
 }
      else
 {
   __len22 = __len2 / 2;
   std :: advance ( __second_cut, __len22 );
   __first_cut = std :: upper_bound ( __first, __middle, * __second_cut,
      __comp );
   __len11 = std :: distance ( __first, __first_cut );
 }
      std :: rotate ( __first_cut, __middle, __second_cut );
      _BidirectionalIterator __new_middle = __first_cut;
      std :: advance ( __new_middle, std :: distance ( __middle, __second_cut ) );
      std :: __merge_without_buffer ( __first, __first_cut, __new_middle,
      __len11, __len22, __comp );
      std :: __merge_without_buffer ( __new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp );
    }
# 3169 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    void
    __inplace_stable_sort ( _RandomAccessIterator __first,
     _RandomAccessIterator __last )
    {
      if ( __last - __first < 15 )
 {
   std :: __insertion_sort ( __first, __last );
   return;
 }
      _RandomAccessIterator __middle = __first + ( __last - __first ) / 2;
      std :: __inplace_stable_sort ( __first, __middle );
      std :: __inplace_stable_sort ( __middle, __last );
      std :: __merge_without_buffer ( __first, __middle, __last,
      __middle - __first,
      __last - __middle );
    }
# 3192 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    void
    __inplace_stable_sort ( _RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp )
    {
      if ( __last - __first < 15 )
 {
   std :: __insertion_sort ( __first, __last, __comp );
   return;
 }
      _RandomAccessIterator __middle = __first + ( __last - __first ) / 2;
      std :: __inplace_stable_sort ( __first, __middle, __comp );
      std :: __inplace_stable_sort ( __middle, __last, __comp );
      std :: __merge_without_buffer ( __first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp );
    }
# 3227 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator >
    _OutputIterator
    merge ( _InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 3247 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 {
   if ( * __first2 < * __first1 )
     {
       * __result = * __first2;
       ++ __first2;
     }
   else
     {
       * __result = * __first1;
       ++ __first1;
     }
   ++ __result;
 }
      return std :: copy ( __first2, __last2, std :: copy ( __first1, __last1,
          __result ) );
    }
# 3288 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare >
    _OutputIterator
    merge ( _InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 3309 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 {
   if ( __comp ( * __first2, * __first1 ) )
     {
       * __result = * __first2;
       ++ __first2;
     }
   else
     {
       * __result = * __first1;
       ++ __first1;
     }
   ++ __result;
 }
      return std :: copy ( __first2, __last2, std :: copy ( __first1, __last1,
          __result ) );
    }
# 3330 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance >
    void
    __merge_sort_loop ( _RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result,
        _Distance __step_size )
    {
      const _Distance __two_step = 2 * __step_size;

      while ( __last - __first >= __two_step )
 {
   __result = std :: merge ( __first, __first + __step_size,
    __first + __step_size, __first + __two_step,
    __result );
   __first += __two_step;
 }

      __step_size = std :: min ( _Distance ( __last - __first ), __step_size );
      std :: merge ( __first, __first + __step_size, __first + __step_size, __last,
   __result );
    }
# 3353 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare >
    void
    __merge_sort_loop ( _RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp )
    {
      const _Distance __two_step = 2 * __step_size;

      while ( __last - __first >= __two_step )
 {
   __result = std :: merge ( __first, __first + __step_size,
    __first + __step_size, __first + __two_step,
    __result,
    __comp );
   __first += __two_step;
 }
      __step_size = std :: min ( _Distance ( __last - __first ), __step_size );

      std :: merge ( __first, __first + __step_size,
   __first + __step_size, __last,
   __result,
   __comp );
    }
# 3379 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
enum { _S_chunk_size = 7};
# 3381 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Distance >
    void
    __chunk_insertion_sort ( _RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size )
    {
      while ( __last - __first >= __chunk_size )
 {
   std :: __insertion_sort ( __first, __first + __chunk_size );
   __first += __chunk_size;
 }
      std :: __insertion_sort ( __first, __last );
    }
# 3395 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Distance, typename _Compare >
    void
    __chunk_insertion_sort ( _RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp )
    {
      while ( __last - __first >= __chunk_size )
 {
   std :: __insertion_sort ( __first, __first + __chunk_size, __comp );
   __first += __chunk_size;
 }
      std :: __insertion_sort ( __first, __last, __comp );
    }
# 3409 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Pointer >
    void
    __merge_sort_with_buffer ( _RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std :: __chunk_insertion_sort ( __first, __last, __step_size );

      while ( __step_size < __len )
 {
   std :: __merge_sort_loop ( __first, __last, __buffer, __step_size );
   __step_size *= 2;
   std :: __merge_sort_loop ( __buffer, __buffer_last, __first, __step_size );
   __step_size *= 2;
 }
    }
# 3433 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Pointer, typename _Compare >
    void
    __merge_sort_with_buffer ( _RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std :: __chunk_insertion_sort ( __first, __last, __step_size, __comp );

      while ( __step_size < __len )
 {
   std :: __merge_sort_loop ( __first, __last, __buffer,
     __step_size, __comp );
   __step_size *= 2;
   std :: __merge_sort_loop ( __buffer, __buffer_last, __first,
     __step_size, __comp );
   __step_size *= 2;
 }
    }
# 3464 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3 >
    _BidirectionalIterator3
    __merge_backward ( _BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result )
    {
      if ( __first1 == __last1 )
 return std :: copy_backward ( __first2, __last2, __result );
      if ( __first2 == __last2 )
 return std :: copy_backward ( __first1, __last1, __result );
      -- __last1;
      -- __last2;
      while ( true )
 {
   if ( * __last2 < * __last1 )
     {
       * -- __result = * __last1;
       if ( __first1 == __last1 )
  return std :: copy_backward ( __first2, ++ __last2, __result );
       -- __last1;
     }
   else
     {
       * -- __result = * __last2;
       if ( __first2 == __last2 )
  return std :: copy_backward ( __first1, ++ __last1, __result );
       -- __last2;
     }
 }
    }
# 3503 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare >
    _BidirectionalIterator3
    __merge_backward ( _BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp )
    {
      if ( __first1 == __last1 )
 return std :: copy_backward ( __first2, __last2, __result );
      if ( __first2 == __last2 )
 return std :: copy_backward ( __first1, __last1, __result );
      -- __last1;
      -- __last2;
      while ( true )
 {
   if ( __comp ( * __last2, * __last1 ) )
     {
       * -- __result = * __last1;
       if ( __first1 == __last1 )
  return std :: copy_backward ( __first2, ++ __last2, __result );
       -- __last1;
     }
   else
     {
       * -- __result = * __last2;
       if ( __first2 == __last2 )
  return std :: copy_backward ( __first1, ++ __last1, __result );
       -- __last2;
     }
 }
    }
# 3543 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance >
    _BidirectionalIterator1
    __rotate_adaptive ( _BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size )
    {
      _BidirectionalIterator2 __buffer_end;
      if ( __len1 > __len2 && __len2 <= __buffer_size )
 {
   __buffer_end = std :: copy ( __middle, __last, __buffer );
   std :: copy_backward ( __first, __middle, __last );
   return std :: copy ( __buffer, __buffer_end, __first );
 }
      else if ( __len1 <= __buffer_size )
 {
   __buffer_end = std :: copy ( __first, __middle, __buffer );
   std :: copy ( __middle, __last, __first );
   return std :: copy_backward ( __buffer, __buffer_end, __last );
 }
      else
 {
   std :: rotate ( __first, __middle, __last );
   std :: advance ( __first, std :: distance ( __middle, __last ) );
   return __first;
 }
    }
# 3579 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Distance,
    typename _Pointer >
    void
    __merge_adaptive ( _BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size )
    {
      if ( __len1 <= __len2 && __len1 <= __buffer_size )
 {
   _Pointer __buffer_end = std :: copy ( __first, __middle, __buffer );
   std :: merge ( __buffer, __buffer_end, __middle, __last, __first );
 }
      else if ( __len2 <= __buffer_size )
 {
   _Pointer __buffer_end = std :: copy ( __middle, __last, __buffer );
   std :: __merge_backward ( __first, __middle, __buffer,
    __buffer_end, __last );
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if ( __len1 > __len2 )
     {
       __len11 = __len1 / 2;
       std :: advance ( __first_cut, __len11 );
       __second_cut = std :: lower_bound ( __middle, __last,
           * __first_cut );
       __len22 = std :: distance ( __middle, __second_cut );
     }
   else
     {
       __len22 = __len2 / 2;
       std :: advance ( __second_cut, __len22 );
       __first_cut = std :: upper_bound ( __first, __middle,
          * __second_cut );
       __len11 = std :: distance ( __first, __first_cut );
     }
   _BidirectionalIterator __new_middle =
     std :: __rotate_adaptive ( __first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size );
   std :: __merge_adaptive ( __first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size );
   std :: __merge_adaptive ( __new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer, __buffer_size );
 }
    }
# 3638 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Distance, typename _Pointer,
    typename _Compare >
    void
    __merge_adaptive ( _BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp )
    {
      if ( __len1 <= __len2 && __len1 <= __buffer_size )
 {
   _Pointer __buffer_end = std :: copy ( __first, __middle, __buffer );
   std :: merge ( __buffer, __buffer_end, __middle, __last, __first, __comp );
 }
      else if ( __len2 <= __buffer_size )
 {
   _Pointer __buffer_end = std :: copy ( __middle, __last, __buffer );
   std :: __merge_backward ( __first, __middle, __buffer, __buffer_end,
    __last, __comp );
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if ( __len1 > __len2 )
     {
       __len11 = __len1 / 2;
       std :: advance ( __first_cut, __len11 );
       __second_cut = std :: lower_bound ( __middle, __last, * __first_cut,
           __comp );
       __len22 = std :: distance ( __middle, __second_cut );
     }
   else
     {
       __len22 = __len2 / 2;
       std :: advance ( __second_cut, __len22 );
       __first_cut = std :: upper_bound ( __first, __middle, * __second_cut,
          __comp );
       __len11 = std :: distance ( __first, __first_cut );
     }
   _BidirectionalIterator __new_middle =
     std :: __rotate_adaptive ( __first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size );
   std :: __merge_adaptive ( __first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp );
   std :: __merge_adaptive ( __new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp );
 }
    }
# 3711 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    void
    inplace_merge ( _BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last )
    {
      typedef typename iterator_traits < _BidirectionalIterator > :: value_type
          _ValueType;
      typedef typename iterator_traits < _BidirectionalIterator > :: difference_type
          _DistanceType;





      ;
      ;

      if ( __first == __middle || __middle == __last )
 return;

      _DistanceType __len1 = std :: distance ( __first, __middle );
      _DistanceType __len2 = std :: distance ( __middle, __last );

      _Temporary_buffer < _BidirectionalIterator, _ValueType > __buf ( __first,
          __last );
      if ( __buf . begin ( ) == 0 )
 std :: __merge_without_buffer ( __first, __middle, __last, __len1, __len2 );
      else
 std :: __merge_adaptive ( __first, __middle, __last, __len1, __len2,
         __buf . begin ( ), _DistanceType ( __buf . size ( ) ) );
    }
# 3765 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Compare >
    void
    inplace_merge ( _BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp )
    {
      typedef typename iterator_traits < _BidirectionalIterator > :: value_type
          _ValueType;
      typedef typename iterator_traits < _BidirectionalIterator > :: difference_type
          _DistanceType;






      ;
      ;

      if ( __first == __middle || __middle == __last )
 return;

      const _DistanceType __len1 = std :: distance ( __first, __middle );
      const _DistanceType __len2 = std :: distance ( __middle, __last );

      _Temporary_buffer < _BidirectionalIterator, _ValueType > __buf ( __first,
          __last );
      if ( __buf . begin ( ) == 0 )
 std :: __merge_without_buffer ( __first, __middle, __last, __len1,
        __len2, __comp );
      else
 std :: __merge_adaptive ( __first, __middle, __last, __len1, __len2,
         __buf . begin ( ), _DistanceType ( __buf . size ( ) ),
         __comp );
    }
# 3802 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Pointer,
    typename _Distance >
    void
    __stable_sort_adaptive ( _RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size )
    {
      const _Distance __len = ( __last - __first + 1 ) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if ( __len > __buffer_size )
 {
   std :: __stable_sort_adaptive ( __first, __middle,
          __buffer, __buffer_size );
   std :: __stable_sort_adaptive ( __middle, __last,
          __buffer, __buffer_size );
 }
      else
 {
   std :: __merge_sort_with_buffer ( __first, __middle, __buffer );
   std :: __merge_sort_with_buffer ( __middle, __last, __buffer );
 }
      std :: __merge_adaptive ( __first, __middle, __last,
       _Distance ( __middle - __first ),
       _Distance ( __last - __middle ),
       __buffer, __buffer_size );
    }
# 3829 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare >
    void
    __stable_sort_adaptive ( _RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp )
    {
      const _Distance __len = ( __last - __first + 1 ) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if ( __len > __buffer_size )
 {
   std :: __stable_sort_adaptive ( __first, __middle, __buffer,
          __buffer_size, __comp );
   std :: __stable_sort_adaptive ( __middle, __last, __buffer,
          __buffer_size, __comp );
 }
      else
 {
   std :: __merge_sort_with_buffer ( __first, __middle, __buffer, __comp );
   std :: __merge_sort_with_buffer ( __middle, __last, __buffer, __comp );
 }
      std :: __merge_adaptive ( __first, __middle, __last,
       _Distance ( __middle - __first ),
       _Distance ( __last - __middle ),
       __buffer, __buffer_size,
       __comp );
    }
# 3874 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    stable_sort ( _RandomAccessIterator __first, _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _DistanceType;





      ;

      _Temporary_buffer < _RandomAccessIterator, _ValueType > __buf ( __first,
         __last );
      if ( __buf . begin ( ) == 0 )
 std :: __inplace_stable_sort ( __first, __last );
      else
 std :: __stable_sort_adaptive ( __first, __last, __buf . begin ( ),
        _DistanceType ( __buf . size ( ) ) );
    }
# 3915 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    stable_sort ( _RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _RandomAccessIterator > :: difference_type
 _DistanceType;







      ;

      _Temporary_buffer < _RandomAccessIterator, _ValueType > __buf ( __first,
         __last );
      if ( __buf . begin ( ) == 0 )
 std :: __inplace_stable_sort ( __first, __last, __comp );
      else
 std :: __stable_sort_adaptive ( __first, __last, __buf . begin ( ),
        _DistanceType ( __buf . size ( ) ), __comp );
    }
# 3943 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Size >
    void
    __introselect ( _RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      while ( __last - __first > 3 )
 {
   if ( __depth_limit == 0 )
     {
       std :: __heap_select ( __first, __nth + 1, __last );

       std :: iter_swap ( __first, __nth );
       return;
     }
   -- __depth_limit;
   _RandomAccessIterator __cut =
     std :: __unguarded_partition ( __first, __last,
           _ValueType ( std :: __median ( * __first,
        * ( __first
          + ( __last
             - __first )
          / 2 ),
        * ( __last
          - 1 ) ) ) );
   if ( __cut <= __nth )
     __first = __cut;
   else
     __last = __cut;
 }
      std :: __insertion_sort ( __first, __last );
    }
# 3978 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Size, typename _Compare >
    void
    __introselect ( _RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;

      while ( __last - __first > 3 )
 {
   if ( __depth_limit == 0 )
     {
       std :: __heap_select ( __first, __nth + 1, __last, __comp );

       std :: iter_swap ( __first, __nth );
       return;
     }
   -- __depth_limit;
   _RandomAccessIterator __cut =
     std :: __unguarded_partition ( __first, __last,
           _ValueType ( std :: __median ( * __first,
        * ( __first
          + ( __last
             - __first )
          / 2 ),
        * ( __last - 1 ),
        __comp ) ),
           __comp );
   if ( __cut <= __nth )
     __first = __cut;
   else
     __last = __cut;
 }
      std :: __insertion_sort ( __first, __last, __comp );
    }
# 4030 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator >
    inline void
    nth_element ( _RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;





      ;
      ;

      if ( __first == __last || __nth == __last )
 return;

      std :: __introselect ( __first, __nth, __last,
    std :: __lg ( __last - __first ) * 2 );
    }
# 4068 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _RandomAccessIterator, typename _Compare >
    inline void
    nth_element ( _RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp )
    {
      typedef typename iterator_traits < _RandomAccessIterator > :: value_type
 _ValueType;






      ;
      ;

      if ( __first == __last || __nth == __last )
 return;

      std :: __introselect ( __first, __nth, __last,
    std :: __lg ( __last - __first ) * 2, __comp );
    }
# 4107 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    pair < _ForwardIterator, _ForwardIterator >
    equal_range ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;





      ;

      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle, __left, __right;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( * __middle < __val )
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
   else if ( __val < * __middle )
     __len = __half;
   else
     {
       __left = std :: lower_bound ( __first, __middle, __val );
       std :: advance ( __first, __len );
       __right = std :: upper_bound ( ++ __middle, __first, __val );
       return pair < _ForwardIterator, _ForwardIterator > ( __left, __right );
     }
 }
      return pair < _ForwardIterator, _ForwardIterator > ( __first, __first );
    }
# 4168 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Compare >
    pair < _ForwardIterator, _ForwardIterator >
    equal_range ( _ForwardIterator __first, _ForwardIterator __last,
  const _Tp & __val,
  _Compare __comp )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;
      typedef typename iterator_traits < _ForwardIterator > :: difference_type
 _DistanceType;







      ;

      _DistanceType __len = std :: distance ( __first, __last );
      _DistanceType __half;
      _ForwardIterator __middle, __left, __right;

      while ( __len > 0 )
 {
   __half = __len >> 1;
   __middle = __first;
   std :: advance ( __middle, __half );
   if ( __comp ( * __middle, __val ) )
     {
       __first = __middle;
       ++ __first;
       __len = __len - __half - 1;
     }
   else if ( __comp ( __val, * __middle ) )
     __len = __half;
   else
     {
       __left = std :: lower_bound ( __first, __middle, __val, __comp );
       std :: advance ( __first, __len );
       __right = std :: upper_bound ( ++ __middle, __first, __val, __comp );
       return pair < _ForwardIterator, _ForwardIterator > ( __left, __right );
     }
 }
      return pair < _ForwardIterator, _ForwardIterator > ( __first, __first );
    }
# 4226 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp >
    bool
    binary_search ( _ForwardIterator __first, _ForwardIterator __last,
                  const _Tp & __val )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;




      ;

      _ForwardIterator __i = std :: lower_bound ( __first, __last, __val );
      return __i != __last && ! ( __val < * __i );
    }
# 4258 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Tp, typename _Compare >
    bool
    binary_search ( _ForwardIterator __first, _ForwardIterator __last,
                  const _Tp & __val, _Compare __comp )
    {
      typedef typename iterator_traits < _ForwardIterator > :: value_type
 _ValueType;





      ;

      _ForwardIterator __i = std :: lower_bound ( __first, __last, __val, __comp );
      return __i != __last && ! __comp ( __val, * __i );
    }
# 4297 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2 >
    bool
    includes ( _InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2 )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;






      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( * __first2 < * __first1 )
   return false;
 else if ( * __first1 < * __first2 )
   ++ __first1;
 else
   ++ __first1, ++ __first2;

      return __first2 == __last2;
    }
# 4345 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _Compare >
    bool
    includes ( _InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2, _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 4363 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( __comp ( * __first2, * __first1 ) )
   return false;
 else if ( __comp ( * __first1, * __first2 ) )
   ++ __first1;
 else
   ++ __first1, ++ __first2;

      return __first2 == __last2;
    }
# 4394 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator >
    _OutputIterator
    set_union ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 4415 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 {
   if ( * __first1 < * __first2 )
     {
       * __result = * __first1;
       ++ __first1;
     }
   else if ( * __first2 < * __first1 )
     {
       * __result = * __first2;
       ++ __first2;
     }
   else
     {
       * __result = * __first1;
       ++ __first1;
       ++ __first2;
     }
   ++ __result;
 }
      return std :: copy ( __first2, __last2, std :: copy ( __first1, __last1,
          __result ) );
    }
# 4460 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare >
    _OutputIterator
    set_union ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 4483 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 {
   if ( __comp ( * __first1, * __first2 ) )
     {
       * __result = * __first1;
       ++ __first1;
     }
   else if ( __comp ( * __first2, * __first1 ) )
     {
       * __result = * __first2;
       ++ __first2;
     }
   else
     {
       * __result = * __first1;
       ++ __first1;
       ++ __first2;
     }
   ++ __result;
 }
      return std :: copy ( __first2, __last2, std :: copy ( __first1, __last1,
          __result ) );
    }
# 4526 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator >
    _OutputIterator
    set_intersection ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 4545 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( * __first1 < * __first2 )
   ++ __first1;
 else if ( * __first2 < * __first1 )
   ++ __first2;
 else
   {
     * __result = * __first1;
     ++ __first1;
     ++ __first2;
     ++ __result;
   }
      return __result;
    }
# 4582 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare >
    _OutputIterator
    set_intersection ( _InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 4603 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( __comp ( * __first1, * __first2 ) )
   ++ __first1;
 else if ( __comp ( * __first2, * __first1 ) )
   ++ __first2;
 else
   {
     * __result = * __first1;
     ++ __first1;
     ++ __first2;
     ++ __result;
   }
      return __result;
    }
# 4639 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator >
    _OutputIterator
    set_difference ( _InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 4658 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( * __first1 < * __first2 )
   {
     * __result = * __first1;
     ++ __first1;
     ++ __result;
   }
 else if ( * __first2 < * __first1 )
   ++ __first2;
 else
   {
     ++ __first1;
     ++ __first2;
   }
      return std :: copy ( __first1, __last1, __result );
    }
# 4699 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare >
    _OutputIterator
    set_difference ( _InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 4720 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( __comp ( * __first1, * __first2 ) )
   {
     * __result = * __first1;
     ++ __first1;
     ++ __result;
   }
 else if ( __comp ( * __first2, * __first1 ) )
   ++ __first2;
 else
   {
     ++ __first1;
     ++ __first2;
   }
      return std :: copy ( __first1, __last1, __result );
    }
# 4756 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator >
    _OutputIterator
    set_symmetric_difference ( _InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 4777 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( * __first1 < * __first2 )
   {
     * __result = * __first1;
     ++ __first1;
     ++ __result;
   }
 else if ( * __first2 < * __first1 )
   {
     * __result = * __first2;
     ++ __first2;
     ++ __result;
   }
 else
   {
     ++ __first1;
     ++ __first2;
   }
      return std :: copy ( __first2, __last2, std :: copy ( __first1,
          __last1, __result ) );
    }
# 4821 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare >
    _OutputIterator
    set_symmetric_difference ( _InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp )
    {
      typedef typename iterator_traits < _InputIterator1 > :: value_type
 _ValueType1;
      typedef typename iterator_traits < _InputIterator2 > :: value_type
 _ValueType2;
# 4845 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
      ;
      ;

      while ( __first1 != __last1 && __first2 != __last2 )
 if ( __comp ( * __first1, * __first2 ) )
   {
     * __result = * __first1;
     ++ __first1;
     ++ __result;
   }
 else if ( __comp ( * __first2, * __first1 ) )
   {
     * __result = * __first2;
     ++ __first2;
     ++ __result;
   }
 else
   {
     ++ __first1;
     ++ __first2;
   }
      return std :: copy ( __first2, __last2, std :: copy ( __first1,
          __last1, __result ) );
    }
# 4879 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    _ForwardIterator
    max_element ( _ForwardIterator __first, _ForwardIterator __last )
    {




      ;

      if ( __first == __last )
 return __first;
      _ForwardIterator __result = __first;
      while ( ++ __first != __last )
 if ( * __result < * __first )
   __result = __first;
      return __result;
    }
# 4906 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Compare >
    _ForwardIterator
    max_element ( _ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp )
    {





      ;

      if ( __first == __last ) return __first;
      _ForwardIterator __result = __first;
      while ( ++ __first != __last )
 if ( __comp ( * __result, * __first ) ) __result = __first;
      return __result;
    }
# 4931 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator >
    _ForwardIterator
    min_element ( _ForwardIterator __first, _ForwardIterator __last )
    {




      ;

      if ( __first == __last )
 return __first;
      _ForwardIterator __result = __first;
      while ( ++ __first != __last )
 if ( * __first < * __result )
   __result = __first;
      return __result;
    }
# 4958 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator, typename _Compare >
    _ForwardIterator
    min_element ( _ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp )
    {





      ;

      if ( __first == __last )
 return __first;
      _ForwardIterator __result = __first;
      while ( ++ __first != __last )
 if ( __comp ( * __first, * __result ) )
   __result = __first;
      return __result;
    }
# 4993 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    bool
    next_permutation ( _BidirectionalIterator __first,
       _BidirectionalIterator __last )
    {





      ;

      if ( __first == __last )
 return false;
      _BidirectionalIterator __i = __first;
      ++ __i;
      if ( __i == __last )
 return false;
      __i = __last;
      -- __i;

      for (;; )
 {
   _BidirectionalIterator __ii = __i;
   -- __i;
   if ( * __i < * __ii )
     {
       _BidirectionalIterator __j = __last;
       while ( ! ( * __i < * -- __j ) )
  { }
       std :: iter_swap ( __i, __j );
       std :: reverse ( __ii, __last );
       return true;
     }
   if ( __i == __first )
     {
       std :: reverse ( __first, __last );
       return false;
     }
 }
    }
# 5049 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Compare >
    bool
    next_permutation ( _BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp )
    {






      ;

      if ( __first == __last )
 return false;
      _BidirectionalIterator __i = __first;
      ++ __i;
      if ( __i == __last )
 return false;
      __i = __last;
      -- __i;

      for (;; )
 {
   _BidirectionalIterator __ii = __i;
   -- __i;
   if ( __comp ( * __i, * __ii ) )
     {
       _BidirectionalIterator __j = __last;
       while ( ! __comp ( * __i, * -- __j ) )
  { }
       std :: iter_swap ( __i, __j );
       std :: reverse ( __ii, __last );
       return true;
     }
   if ( __i == __first )
     {
       std :: reverse ( __first, __last );
       return false;
     }
 }
    }
# 5104 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator >
    bool
    prev_permutation ( _BidirectionalIterator __first,
       _BidirectionalIterator __last )
    {





      ;

      if ( __first == __last )
 return false;
      _BidirectionalIterator __i = __first;
      ++ __i;
      if ( __i == __last )
 return false;
      __i = __last;
      -- __i;

      for (;; )
 {
   _BidirectionalIterator __ii = __i;
   -- __i;
   if ( * __ii < * __i )
     {
       _BidirectionalIterator __j = __last;
       while ( ! ( * -- __j < * __i ) )
  { }
       std :: iter_swap ( __i, __j );
       std :: reverse ( __ii, __last );
       return true;
     }
   if ( __i == __first )
     {
       std :: reverse ( __first, __last );
       return false;
     }
 }
    }
# 5160 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator, typename _Compare >
    bool
    prev_permutation ( _BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp )
    {






      ;

      if ( __first == __last )
 return false;
      _BidirectionalIterator __i = __first;
      ++ __i;
      if ( __i == __last )
 return false;
      __i = __last;
      -- __i;

      for (;; )
 {
   _BidirectionalIterator __ii = __i;
   -- __i;
   if ( __comp ( * __ii, * __i ) )
     {
       _BidirectionalIterator __j = __last;
       while ( ! __comp ( * -- __j, * __i ) )
  { }
       std :: iter_swap ( __i, __j );
       std :: reverse ( __ii, __last );
       return true;
     }
   if ( __i == __first )
     {
       std :: reverse ( __first, __last );
       return false;
     }
 }
    }
# 5219 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _ForwardIterator >
    _InputIterator
    find_first_of ( _InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2 )
    {






      ;
      ;

      for (; __first1 != __last1; ++ __first1 )
 for ( _ForwardIterator __iter = __first2; __iter != __last2; ++ __iter )
   if ( * __first1 == * __iter )
     return __first1;
      return __last1;
    }
# 5255 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate >
    _InputIterator
    find_first_of ( _InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp )
    {






      ;
      ;

      for (; __first1 != __last1; ++ __first1 )
 for ( _ForwardIterator __iter = __first2; __iter != __last2; ++ __iter )
   if ( __comp ( * __first1, * __iter ) )
     return __first1;
      return __last1;
    }
# 5285 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    _ForwardIterator1
    __find_end ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag )
    {
      if ( __first2 == __last2 )
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while ( 1 )
     {
       _ForwardIterator1 __new_result
  = std :: search ( __first1, __last1, __first2, __last2 );
       if ( __new_result == __last1 )
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++ __first1;
  }
     }
 }
    }
# 5312 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate >
    _ForwardIterator1
    __find_end ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp )
    {
      if ( __first2 == __last2 )
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while ( 1 )
     {
       _ForwardIterator1 __new_result
  = std :: search ( __first1, __last1, __first2, __last2, __comp );
       if ( __new_result == __last1 )
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++ __first1;
  }
     }
 }
    }
# 5342 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator1, typename _BidirectionalIterator2 >
    _BidirectionalIterator1
    __find_end ( _BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag )
    {






      typedef reverse_iterator < _BidirectionalIterator1 > _RevIterator1;
      typedef reverse_iterator < _BidirectionalIterator2 > _RevIterator2;

      _RevIterator1 __rlast1 ( __first1 );
      _RevIterator2 __rlast2 ( __first2 );
      _RevIterator1 __rresult = std :: search ( _RevIterator1 ( __last1 ), __rlast1,
         _RevIterator2 ( __last2 ), __rlast2 );

      if ( __rresult == __rlast1 )
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult . base ( );
   std :: advance ( __result, - std :: distance ( __first2, __last2 ) );
   return __result;
 }
    }
# 5374 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate >
    _BidirectionalIterator1
    __find_end ( _BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp )
    {






      typedef reverse_iterator < _BidirectionalIterator1 > _RevIterator1;
      typedef reverse_iterator < _BidirectionalIterator2 > _RevIterator2;

      _RevIterator1 __rlast1 ( __first1 );
      _RevIterator2 __rlast2 ( __first2 );
      _RevIterator1 __rresult = std :: search ( _RevIterator1 ( __last1 ), __rlast1,
         _RevIterator2 ( __last2 ), __rlast2,
         __comp );

      if ( __rresult == __rlast1 )
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult . base ( );
   std :: advance ( __result, - std :: distance ( __first2, __last2 ) );
   return __result;
 }
    }
# 5435 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2 >
    inline _ForwardIterator1
    find_end ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2 )
    {






      ;
      ;

      return std :: __find_end ( __first1, __last1, __first2, __last2,
        std :: __iterator_category ( __first1 ),
        std :: __iterator_category ( __first2 ) );
    }
# 5480 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
template < typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate >
    inline _ForwardIterator1
    find_end ( _ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp )
    {






      ;
      ;

      return std :: __find_end ( __first1, __last1, __first2, __last2,
        std :: __iterator_category ( __first1 ),
        std :: __iterator_category ( __first2 ),
        __comp );
    }
# 5502 "/usr/include/c++/4.2.1/bits/stl_algo.h" 3
}
# 49 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
namespace std {
# 51 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _Type >
    inline bool
    __is_null_pointer ( _Type * __ptr )
    { return __ptr == 0; }
# 56 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _Type >
    inline bool
    __is_null_pointer ( _Type )
    { return false; }
# 61 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template< class _CharT, class _Traits, class _Alloc> const typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 64 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_max_size = ((((npos - sizeof(_Rep_base)) / sizeof(_CharT)) - 1) / 4);
# 66 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template< class _CharT, class _Traits, class _Alloc> const _CharT
# 69 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_terminal = (_CharT());
# 71 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template< class _CharT, class _Traits, class _Alloc> const typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 73 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::npos;
# 77 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template< class _CharT, class _Traits, class _Alloc> typename basic_string< _CharT, _Traits, _Alloc> ::size_type
# 79 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
basic_string< _CharT, _Traits, _Alloc> ::_Rep::_S_empty_rep_storage[];
# 87 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InIterator >
      _CharT *
      basic_string < _CharT, _Traits, _Alloc > ::
      _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a,
     input_iterator_tag )
      {

 if ( __beg == __end && __a == _Alloc ( ) )
   return _S_empty_rep ( ) . _M_refdata ( );


 _CharT __buf [ 128 ];
 size_type __len = 0;
 while ( __beg != __end && __len < sizeof ( __buf ) / sizeof ( _CharT ) )
   {
     __buf [ __len ++ ] = * __beg;
     ++ __beg;
   }
 _Rep * __r = _Rep :: _S_create ( __len, size_type ( 0 ), __a );
 _M_copy ( __r -> _M_refdata ( ), __buf, __len );
 try
   {
     while ( __beg != __end )
       {
  if ( __len == __r -> _M_capacity )
    {

      _Rep * __another = _Rep :: _S_create ( __len + 1, __len, __a );
      _M_copy ( __another -> _M_refdata ( ), __r -> _M_refdata ( ), __len );
      __r -> _M_destroy ( __a );
      __r = __another;
    }
  __r -> _M_refdata ( ) [ __len ++ ] = * __beg;
  ++ __beg;
       }
   }
 catch ( ... )
   {
     __r -> _M_destroy ( __a );
     throw;
   }
 __r -> _M_set_length_and_sharable ( __len );
 return __r -> _M_refdata ( );
      }
# 133 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InIterator >
      _CharT *
      basic_string < _CharT, _Traits, _Alloc > ::
      _S_construct ( _InIterator __beg, _InIterator __end, const _Alloc & __a,
     forward_iterator_tag )
      {

 if ( __beg == __end && __a == _Alloc ( ) )
   return _S_empty_rep ( ) . _M_refdata ( );


 if ( __builtin_expect ( __is_null_pointer ( __beg ) && __beg != __end, 0 ) )
   __throw_logic_error ( ( "basic_string::_S_construct NULL not valid" ) );

 const size_type __dnew = static_cast < size_type > ( std :: distance ( __beg,
              __end ) );

 _Rep * __r = _Rep :: _S_create ( __dnew, size_type ( 0 ), __a );
 try
   { _S_copy_chars ( __r -> _M_refdata ( ), __beg, __end ); }
 catch ( ... )
   {
     __r -> _M_destroy ( __a );
     throw;
   }
 __r -> _M_set_length_and_sharable ( __dnew );
 return __r -> _M_refdata ( );
      }
# 163 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    _CharT *
    basic_string < _CharT, _Traits, _Alloc > ::
    _S_construct ( size_type __n, _CharT __c, const _Alloc & __a )
    {

      if ( __n == 0 && __a == _Alloc ( ) )
 return _S_empty_rep ( ) . _M_refdata ( );


      _Rep * __r = _Rep :: _S_create ( __n, size_type ( 0 ), __a );
      if ( __n )
 _M_assign ( __r -> _M_refdata ( ), __n, __c );

      __r -> _M_set_length_and_sharable ( __n );
      return __r -> _M_refdata ( );
    }
# 181 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const basic_string & __str )
    : _M_dataplus ( __str . _M_rep ( ) -> _M_grab ( _Alloc ( __str . get_allocator ( ) ),
       __str . get_allocator ( ) ),
    __str . get_allocator ( ) )
    { }
# 189 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const _Alloc & __a )
    : _M_dataplus ( _S_construct ( size_type ( ), _CharT ( ), __a ), __a )
    { }
# 195 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const basic_string & __str, size_type __pos, size_type __n )
    : _M_dataplus ( _S_construct ( __str . _M_data ( )
          + __str . _M_check ( __pos,
      "basic_string::basic_string" ),
          __str . _M_data ( ) + __str . _M_limit ( __pos, __n )
          + __pos, _Alloc ( ) ), _Alloc ( ) )
    { }
# 205 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const basic_string & __str, size_type __pos,
   size_type __n, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __str . _M_data ( )
          + __str . _M_check ( __pos,
      "basic_string::basic_string" ),
          __str . _M_data ( ) + __str . _M_limit ( __pos, __n )
          + __pos, __a ), __a )
    { }
# 217 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const _CharT * __s, size_type __n, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __s, __s + __n, __a ), __a )
    { }
# 224 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( const _CharT * __s, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __s, __s ? __s + traits_type :: length ( __s ) :
          __s + npos, __a ), __a )
    { }
# 231 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( size_type __n, _CharT __c, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __n, __c, __a ), __a )
    { }
# 238 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InputIterator >
    basic_string < _CharT, _Traits, _Alloc > ::
    basic_string ( _InputIterator __beg, _InputIterator __end, const _Alloc & __a )
    : _M_dataplus ( _S_construct ( __beg, __end, __a ), __a )
    { }
# 245 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    assign ( const basic_string & __str )
    {
      if ( _M_rep ( ) != __str . _M_rep ( ) )
 {

   const allocator_type __a = this -> get_allocator ( );
   _CharT * __tmp = __str . _M_rep ( ) -> _M_grab ( __a, __str . get_allocator ( ) );
   _M_rep ( ) -> _M_dispose ( __a );
   _M_data ( __tmp );
 }
      return * this;
    }
# 261 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    assign ( const _CharT * __s, size_type __n )
    {
      ;
      _M_check_length ( this -> size ( ), __n, "basic_string::assign" );
      if ( _M_disjunct ( __s ) || _M_rep ( ) -> _M_is_shared ( ) )
 return _M_replace_safe ( size_type ( 0 ), this -> size ( ), __s, __n );
      else
 {

   const size_type __pos = __s - _M_data ( );
   if ( __pos >= __n )
     _M_copy ( _M_data ( ), __s, __n );
   else if ( __pos )
     _M_move ( _M_data ( ), __s, __n );
   _M_rep ( ) -> _M_set_length_and_sharable ( __n );
   return * this;
 }
     }
# 283 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( size_type __n, _CharT __c )
    {
      if ( __n )
 {
   _M_check_length ( size_type ( 0 ), __n, "basic_string::append" );
   const size_type __len = __n + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     this -> reserve ( __len );
   _M_assign ( _M_data ( ) + this -> size ( ), __n, __c );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 300 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( const _CharT * __s, size_type __n )
    {
      ;
      if ( __n )
 {
   _M_check_length ( size_type ( 0 ), __n, "basic_string::append" );
   const size_type __len = __n + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     {
       if ( _M_disjunct ( __s ) )
  this -> reserve ( __len );
       else
  {
    const size_type __off = __s - _M_data ( );
    this -> reserve ( __len );
    __s = _M_data ( ) + __off;
  }
     }
   _M_copy ( _M_data ( ) + this -> size ( ), __s, __n );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 327 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( const basic_string & __str )
    {
      const size_type __size = __str . size ( );
      if ( __size )
 {
   const size_type __len = __size + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     this -> reserve ( __len );
   _M_copy ( _M_data ( ) + this -> size ( ), __str . _M_data ( ), __size );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 344 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    append ( const basic_string & __str, size_type __pos, size_type __n )
    {
      __str . _M_check ( __pos, "basic_string::append" );
      __n = __str . _M_limit ( __pos, __n );
      if ( __n )
 {
   const size_type __len = __n + this -> size ( );
   if ( __len > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
     this -> reserve ( __len );
   _M_copy ( _M_data ( ) + this -> size ( ), __str . _M_data ( ) + __pos, __n );
   _M_rep ( ) -> _M_set_length_and_sharable ( __len );
 }
      return * this;
    }
# 362 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
     basic_string < _CharT, _Traits, _Alloc > &
     basic_string < _CharT, _Traits, _Alloc > ::
     insert ( size_type __pos, const _CharT * __s, size_type __n )
     {
       ;
       _M_check ( __pos, "basic_string::insert" );
       _M_check_length ( size_type ( 0 ), __n, "basic_string::insert" );
       if ( _M_disjunct ( __s ) || _M_rep ( ) -> _M_is_shared ( ) )
         return _M_replace_safe ( __pos, size_type ( 0 ), __s, __n );
       else
         {

           const size_type __off = __s - _M_data ( );
           _M_mutate ( __pos, 0, __n );
           __s = _M_data ( ) + __off;
           _CharT * __p = _M_data ( ) + __pos;
           if ( __s + __n <= __p )
             _M_copy ( __p, __s, __n );
           else if ( __s >= __p )
             _M_copy ( __p, __s + __n, __n );
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy ( __p, __s, __nleft );
               _M_copy ( __p + __nleft, __p + __n, __n - __nleft );
             }
           return * this;
         }
     }
# 393 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
     basic_string < _CharT, _Traits, _Alloc > &
     basic_string < _CharT, _Traits, _Alloc > ::
     replace ( size_type __pos, size_type __n1, const _CharT * __s,
      size_type __n2 )
     {
       ;
       _M_check ( __pos, "basic_string::replace" );
       __n1 = _M_limit ( __pos, __n1 );
       _M_check_length ( __n1, __n2, "basic_string::replace" );
       bool __left;
       if ( _M_disjunct ( __s ) || _M_rep ( ) -> _M_is_shared ( ) )
         return _M_replace_safe ( __pos, __n1, __s, __n2 );
       else if ( ( __left = __s + __n2 <= _M_data ( ) + __pos )
  || _M_data ( ) + __pos + __n1 <= __s )
  {

    size_type __off = __s - _M_data ( );
    __left ? __off : ( __off += __n2 - __n1 );
    _M_mutate ( __pos, __n1, __n2 );
    _M_copy ( _M_data ( ) + __pos, _M_data ( ) + __off, __n2 );
    return * this;
  }
       else
  {

    const basic_string __tmp ( __s, __n2 );
    return _M_replace_safe ( __pos, __n1, __tmp . _M_data ( ), __n2 );
  }
     }
# 424 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > :: _Rep ::
    _M_destroy ( const _Alloc & __a ) throw ( )
    {
      const size_type __size = sizeof ( _Rep_base ) +
                        ( this -> _M_capacity + 1 ) * sizeof ( _CharT );
      _Raw_bytes_alloc ( __a ) . deallocate ( reinterpret_cast < char * > ( this ), __size );
    }
# 434 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_leak_hard ( )
    {

      if ( _M_rep ( ) == & _S_empty_rep ( ) )
 return;

      if ( _M_rep ( ) -> _M_is_shared ( ) )
 _M_mutate ( 0, 0, 0 );
      _M_rep ( ) -> _M_set_leaked ( );
    }
# 448 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_mutate ( size_type __pos, size_type __len1, size_type __len2 )
    {
      const size_type __old_size = this -> size ( );
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if ( __new_size > this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
 {

   const allocator_type __a = get_allocator ( );
   _Rep * __r = _Rep :: _S_create ( __new_size, this -> capacity ( ), __a );

   if ( __pos )
     _M_copy ( __r -> _M_refdata ( ), _M_data ( ), __pos );
   if ( __how_much )
     _M_copy ( __r -> _M_refdata ( ) + __pos + __len2,
      _M_data ( ) + __pos + __len1, __how_much );

   _M_rep ( ) -> _M_dispose ( __a );
   _M_data ( __r -> _M_refdata ( ) );
 }
      else if ( __how_much && __len1 != __len2 )
 {

   _M_move ( _M_data ( ) + __pos + __len2,
    _M_data ( ) + __pos + __len1, __how_much );
 }
      _M_rep ( ) -> _M_set_length_and_sharable ( __new_size );
    }
# 481 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    reserve ( size_type __res )
    {
      if ( __res != this -> capacity ( ) || _M_rep ( ) -> _M_is_shared ( ) )
        {

   if ( __res < this -> size ( ) )
     __res = this -> size ( );
   const allocator_type __a = get_allocator ( );
   _CharT * __tmp = _M_rep ( ) -> _M_clone ( __a, __res - this -> size ( ) );
   _M_rep ( ) -> _M_dispose ( __a );
   _M_data ( __tmp );
        }
    }
# 498 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    swap ( basic_string & __s )
    {
      if ( _M_rep ( ) -> _M_is_leaked ( ) )
 _M_rep ( ) -> _M_set_sharable ( );
      if ( __s . _M_rep ( ) -> _M_is_leaked ( ) )
 __s . _M_rep ( ) -> _M_set_sharable ( );
      if ( this -> get_allocator ( ) == __s . get_allocator ( ) )
 {
   _CharT * __tmp = _M_data ( );
   _M_data ( __s . _M_data ( ) );
   __s . _M_data ( __tmp );
 }

      else
 {
   const basic_string __tmp1 ( _M_ibegin ( ), _M_iend ( ),
        __s . get_allocator ( ) );
   const basic_string __tmp2 ( __s . _M_ibegin ( ), __s . _M_iend ( ),
        this -> get_allocator ( ) );
   * this = __tmp2;
   __s = __tmp1;
 }
    }
# 525 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: _Rep *
    basic_string < _CharT, _Traits, _Alloc > :: _Rep ::
    _S_create ( size_type __capacity, size_type __old_capacity,
       const _Alloc & __alloc )
    {


      if ( __capacity > _S_max_size )
 __throw_length_error ( ( "basic_string::_S_create" ) );
# 559 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof ( void * );







      if ( __capacity > __old_capacity && __capacity < 2 * __old_capacity )
 __capacity = 2 * __old_capacity;




      size_type __size = ( __capacity + 1 ) * sizeof ( _CharT ) + sizeof ( _Rep );

      const size_type __adj_size = __size + __malloc_header_size;
      if ( __adj_size > __pagesize && __capacity > __old_capacity )
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof ( _CharT );

   if ( __capacity > _S_max_size )
     __capacity = _S_max_size;
   __size = ( __capacity + 1 ) * sizeof ( _CharT ) + sizeof ( _Rep );
 }



      void * __place = _Raw_bytes_alloc ( __alloc ) . allocate ( __size );
      _Rep * __p = new ( __place ) _Rep;
      __p -> _M_capacity = __capacity;







      __p -> _M_set_sharable ( );
      return __p;
    }
# 603 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    _CharT *
    basic_string < _CharT, _Traits, _Alloc > :: _Rep ::
    _M_clone ( const _Alloc & __alloc, size_type __res )
    {

      const size_type __requested_cap = this -> _M_length + __res;
      _Rep * __r = _Rep :: _S_create ( __requested_cap, this -> _M_capacity,
      __alloc );
      if ( this -> _M_length )
 _M_copy ( __r -> _M_refdata ( ), _M_refdata ( ), this -> _M_length );

      __r -> _M_set_length_and_sharable ( this -> _M_length );
      return __r -> _M_refdata ( );
    }
# 619 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    void
    basic_string < _CharT, _Traits, _Alloc > ::
    resize ( size_type __n, _CharT __c )
    {
      const size_type __size = this -> size ( );
      _M_check_length ( __size, __n, "basic_string::resize" );
      if ( __size < __n )
 this -> append ( __n - __size, __c );
      else if ( __n < __size )
 this -> erase ( __n );

    }
# 633 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    template < typename _InputIterator >
      basic_string < _CharT, _Traits, _Alloc > &
      basic_string < _CharT, _Traits, _Alloc > ::
      _M_replace_dispatch ( iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type )
      {
 const basic_string __s ( __k1, __k2 );
 const size_type __n1 = __i2 - __i1;
 _M_check_length ( __n1, __s . size ( ), "basic_string::_M_replace_dispatch" );
 return _M_replace_safe ( __i1 - _M_ibegin ( ), __n1, __s . _M_data ( ),
          __s . size ( ) );
      }
# 647 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_replace_aux ( size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c )
    {
      _M_check_length ( __n1, __n2, "basic_string::_M_replace_aux" );
      _M_mutate ( __pos1, __n1, __n2 );
      if ( __n2 )
 _M_assign ( _M_data ( ) + __pos1, __n2, __c );
      return * this;
    }
# 660 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc > &
    basic_string < _CharT, _Traits, _Alloc > ::
    _M_replace_safe ( size_type __pos1, size_type __n1, const _CharT * __s,
      size_type __n2 )
    {
      _M_mutate ( __pos1, __n1, __n2 );
      if ( __n2 )
 _M_copy ( _M_data ( ) + __pos1, __s, __n2 );
      return * this;
    }
# 672 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( const _CharT * __lhs,
       const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    {
      ;
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;
      const __size_type __len = _Traits :: length ( __lhs );
      __string_type __str;
      __str . reserve ( __len + __rhs . size ( ) );
      __str . append ( __lhs, __len );
      __str . append ( __rhs );
      return __str;
    }
# 688 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_string < _CharT, _Traits, _Alloc >
    operator + ( _CharT __lhs, const basic_string < _CharT, _Traits, _Alloc > & __rhs )
    {
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs . size ( );
      __str . reserve ( __len + 1 );
      __str . append ( __size_type ( 1 ), __lhs );
      __str . append ( __rhs );
      return __str;
    }
# 702 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    copy ( _CharT * __s, size_type __n, size_type __pos ) const
    {
      _M_check ( __pos, "basic_string::copy" );
      __n = _M_limit ( __pos, __n );
      ;
      if ( __n )
 _M_copy ( __s, _M_data ( ) + __pos, __n );

      return __n;
    }
# 716 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      const size_type __size = this -> size ( );
      const _CharT * __data = _M_data ( );

      if ( __n == 0 )
 return __pos <= __size ? __pos : npos;

      if ( __n <= __size )
 {
   for (; __pos <= __size - __n; ++ __pos )
     if ( traits_type :: eq ( __data [ __pos ], __s [ 0 ] )
  && traits_type :: compare ( __data + __pos + 1,
     __s + 1, __n - 1 ) == 0 )
       return __pos;
 }
      return npos;
    }
# 739 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find ( _CharT __c, size_type __pos ) const
    {
      size_type __ret = npos;
      const size_type __size = this -> size ( );
      if ( __pos < __size )
 {
   const _CharT * __data = _M_data ( );
   const size_type __n = __size - __pos;
   const _CharT * __p = traits_type :: find ( __data + __pos, __n, __c );
   if ( __p )
     __ret = __p - __data;
 }
      return __ret;
    }
# 757 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    rfind ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      const size_type __size = this -> size ( );
      if ( __n <= __size )
 {
   __pos = std :: min ( size_type ( __size - __n ), __pos );
   const _CharT * __data = _M_data ( );
   do
     {
       if ( traits_type :: compare ( __data + __pos, __s, __n ) == 0 )
  return __pos;
     }
   while ( __pos -- > 0 );
 }
      return npos;
    }
# 778 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    rfind ( _CharT __c, size_type __pos ) const
    {
      size_type __size = this -> size ( );
      if ( __size )
 {
   if ( -- __size > __pos )
     __size = __pos;
   for ( ++ __size; __size -- > 0; )
     if ( traits_type :: eq ( _M_data ( ) [ __size ], __c ) )
       return __size;
 }
      return npos;
    }
# 795 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_first_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      for (; __n && __pos < this -> size ( ); ++ __pos )
 {
   const _CharT * __p = traits_type :: find ( __s, __n, _M_data ( ) [ __pos ] );
   if ( __p )
     return __pos;
 }
      return npos;
    }
# 810 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_last_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      size_type __size = this -> size ( );
      if ( __size && __n )
 {
   if ( -- __size > __pos )
     __size = __pos;
   do
     {
       if ( traits_type :: find ( __s, __n, _M_data ( ) [ __size ] ) )
  return __size;
     }
   while ( __size -- != 0 );
 }
      return npos;
    }
# 831 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_first_not_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      for (; __pos < this -> size ( ); ++ __pos )
 if ( ! traits_type :: find ( __s, __n, _M_data ( ) [ __pos ] ) )
   return __pos;
      return npos;
    }
# 843 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_first_not_of ( _CharT __c, size_type __pos ) const
    {
      for (; __pos < this -> size ( ); ++ __pos )
 if ( ! traits_type :: eq ( _M_data ( ) [ __pos ], __c ) )
   return __pos;
      return npos;
    }
# 854 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_last_not_of ( const _CharT * __s, size_type __pos, size_type __n ) const
    {
      ;
      size_type __size = this -> size ( );
      if ( __size )
 {
   if ( -- __size > __pos )
     __size = __pos;
   do
     {
       if ( ! traits_type :: find ( __s, __n, _M_data ( ) [ __size ] ) )
  return __size;
     }
   while ( __size -- );
 }
      return npos;
    }
# 875 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    typename basic_string < _CharT, _Traits, _Alloc > :: size_type
    basic_string < _CharT, _Traits, _Alloc > ::
    find_last_not_of ( _CharT __c, size_type __pos ) const
    {
      size_type __size = this -> size ( );
      if ( __size )
 {
   if ( -- __size > __pos )
     __size = __pos;
   do
     {
       if ( ! traits_type :: eq ( _M_data ( ) [ __size ], __c ) )
  return __size;
     }
   while ( __size -- );
 }
      return npos;
    }
# 895 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos, size_type __n, const basic_string & __str ) const
    {
      _M_check ( __pos, "basic_string::compare" );
      __n = _M_limit ( __pos, __n );
      const size_type __osize = __str . size ( );
      const size_type __len = std :: min ( __n, __osize );
      int __r = traits_type :: compare ( _M_data ( ) + __pos, __str . data ( ), __len );
      if ( ! __r )
 __r = _S_compare ( __n, __osize );
      return __r;
    }
# 910 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos1, size_type __n1, const basic_string & __str,
     size_type __pos2, size_type __n2 ) const
    {
      _M_check ( __pos1, "basic_string::compare" );
      __str . _M_check ( __pos2, "basic_string::compare" );
      __n1 = _M_limit ( __pos1, __n1 );
      __n2 = __str . _M_limit ( __pos2, __n2 );
      const size_type __len = std :: min ( __n1, __n2 );
      int __r = traits_type :: compare ( _M_data ( ) + __pos1,
         __str . data ( ) + __pos2, __len );
      if ( ! __r )
 __r = _S_compare ( __n1, __n2 );
      return __r;
    }
# 928 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( const _CharT * __s ) const
    {
      ;
      const size_type __size = this -> size ( );
      const size_type __osize = traits_type :: length ( __s );
      const size_type __len = std :: min ( __size, __osize );
      int __r = traits_type :: compare ( _M_data ( ), __s, __len );
      if ( ! __r )
 __r = _S_compare ( __size, __osize );
      return __r;
    }
# 943 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos, size_type __n1, const _CharT * __s ) const
    {
      ;
      _M_check ( __pos, "basic_string::compare" );
      __n1 = _M_limit ( __pos, __n1 );
      const size_type __osize = traits_type :: length ( __s );
      const size_type __len = std :: min ( __n1, __osize );
      int __r = traits_type :: compare ( _M_data ( ) + __pos, __s, __len );
      if ( ! __r )
 __r = _S_compare ( __n1, __osize );
      return __r;
    }
# 959 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    int
    basic_string < _CharT, _Traits, _Alloc > ::
    compare ( size_type __pos, size_type __n1, const _CharT * __s,
     size_type __n2 ) const
    {
      ;
      _M_check ( __pos, "basic_string::compare" );
      __n1 = _M_limit ( __pos, __n1 );
      const size_type __len = std :: min ( __n1, __n2 );
      int __r = traits_type :: compare ( _M_data ( ) + __pos, __s, __len );
      if ( ! __r )
 __r = _S_compare ( __n1, __n2 );
      return __r;
    }
# 979 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
extern template class basic_string< char, char_traits< char> , allocator< char> > ;
# 980 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &);
# 983 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, const basic_string< char, char_traits< char> , allocator< char> > &);
# 986 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
extern template basic_istream< char, char_traits< char> > &getline(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &, char);
# 989 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
extern template basic_istream< char, char_traits< char> > &getline(basic_istream< char, char_traits< char> > &, basic_string< char, char_traits< char> , allocator< char> > &);
# 994 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
extern template class basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 995 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &);
# 998 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, const basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &);
# 1001 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &getline(basic_istream< wchar_t, char_traits< wchar_t> > &, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &, wchar_t);
# 1004 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &getline(basic_istream< wchar_t, char_traits< wchar_t> > &, basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > &);
# 1010 "/usr/include/c++/4.2.1/bits/basic_string.tcc" 3
}
# 50 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
namespace std {
# 66 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
class locale {
# 71 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
public: typedef int category;
# 74 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
class facet;
# 75 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
class id;
# 76 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
class _Impl;
# 78 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
friend class facet;
# 79 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
friend class _Impl;
# 81 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
template< class _Facet> friend inline bool has_facet(const locale &) throw();
# 85 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
template< class _Facet> friend inline const _Facet &use_facet(const locale &);
# 89 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
template< class _Cache> friend struct __use_cache;
# 104 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const category none = 0;
# 105 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const category ctype = (1L << 0);
# 106 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const category numeric = (1L << 1);
# 107 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const category collate = (1L << 2);
# 108 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const category time = (1L << 3);
# 109 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const category monetary = (1L << 4);
# 110 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const category messages = (1L << 5);
# 111 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const category all = (((((ctype | numeric) | collate) | time) | monetary) | messages);
# 123 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
locale() throw();
# 132 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
locale(const locale &) throw();
# 143 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
explicit locale(const char *);
# 157 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
locale(const locale &, const char *, category);
# 170 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
locale(const locale &, const locale &, category);
# 182 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
template < typename _Facet >
      locale ( const locale & __other, _Facet * __f );
# 186 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
~locale() throw();
# 197 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
const locale &operator=(const locale &) throw();
# 211 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
template < typename _Facet >
      locale
      combine ( const locale & __other ) const;
# 221 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
string name() const;
# 231 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
bool operator==(const locale &) const throw();
# 240 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
bool operator!=(const locale &__other) const throw()
# 241 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
{ return !this->operator==(__other); }
# 258 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
template < typename _Char, typename _Traits, typename _Alloc >
      bool
      operator ( ) ( const basic_string < _Char, _Traits, _Alloc > & __s1,
   const basic_string < _Char, _Traits, _Alloc > & __s2 ) const;
# 275 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static locale global(const locale &);
# 281 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const locale &classic();
# 285 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
private: _Impl *_M_impl;
# 288 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static _Impl *_S_classic;
# 291 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static _Impl *_S_global;
# 297 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const char *const *const _S_categories;
# 309 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
enum { _S_categories_size = 6};
# 312 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static __gthread_once_t _S_once;
# 316 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
explicit locale(_Impl *) throw();
# 319 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static void _S_initialize();
# 322 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static void _S_initialize_once();
# 325 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static category _S_normalize_category(category);
# 328 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
void _M_coalesce(const locale &, const locale &, category);
# 329 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
};
# 342 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
class locale::facet {
# 345 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
friend class locale;
# 346 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
friend class locale::_Impl;
# 348 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
mutable _Atomic_word _M_refcount;
# 351 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static __c_locale _S_c_locale;
# 354 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const char _S_c_name[2];
# 357 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static __gthread_once_t _S_once;
# 361 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static void _S_initialize_once();
# 374 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
protected: explicit facet(size_t __refs = (0)) throw() : _M_refcount(((__refs) ? 1 : 0))
# 375 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
{ }
# 379 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
virtual ~facet();
# 382 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static void _S_create_c_locale(__c_locale &, const char *, __c_locale = 0);
# 386 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static __c_locale _S_clone_c_locale(__c_locale &);
# 389 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static void _S_destroy_c_locale(__c_locale &);
# 394 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static __c_locale _S_get_c_locale();
# 397 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const char *_S_get_c_name();
# 401 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
private: void _M_add_reference() const throw()
# 402 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); }
# 405 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
void _M_remove_reference() const throw()
# 406 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
{
# 407 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1)
# 408 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
{
# 409 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
try
# 410 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
{ delete this; }
# 411 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
catch (...)
# 412 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
{ }
# 413 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
}
# 414 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
}
# 416 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
facet(const locale::facet &);
# 419 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
locale::facet &operator=(const locale::facet &);
# 420 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
};
# 433 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
class locale::id {
# 436 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
friend class locale;
# 437 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
friend class locale::_Impl;
# 439 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
template< class _Facet> friend inline const _Facet &use_facet(const locale &);
# 443 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
template< class _Facet> friend inline bool has_facet(const locale &) throw();
# 450 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
mutable size_t _M_index;
# 453 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static _Atomic_word _S_refcount;
# 456 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
void operator=(const locale::id &);
# 458 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
id(const locale::id &);
# 464 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
public: id() { }
# 467 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
size_t _M_id() const;
# 468 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
};
# 472 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
class locale::_Impl {
# 476 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
friend class locale;
# 477 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
friend class locale::facet;
# 479 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
template< class _Facet> friend inline bool has_facet(const locale &) throw();
# 483 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
template< class _Facet> friend inline const _Facet &use_facet(const locale &);
# 487 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
template< class _Cache> friend struct __use_cache;
# 492 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
_Atomic_word _M_refcount;
# 493 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
const locale::facet **_M_facets;
# 494 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
size_t _M_facets_size;
# 495 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
const locale::facet **_M_caches;
# 496 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
char **_M_names;
# 497 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const locale::id *const _S_id_ctype[];
# 498 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const locale::id *const _S_id_numeric[];
# 499 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const locale::id *const _S_id_collate[];
# 500 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const locale::id *const _S_id_time[];
# 501 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const locale::id *const _S_id_monetary[];
# 502 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const locale::id *const _S_id_messages[];
# 503 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
static const locale::id *const *const _S_facet_categories[];
# 506 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
void _M_add_reference() throw()
# 507 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); }
# 510 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
void _M_remove_reference() throw()
# 511 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
{
# 512 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1)
# 513 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
{
# 514 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
try
# 515 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
{ delete this; }
# 516 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
catch (...)
# 517 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
{ }
# 518 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
}
# 519 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
}
# 521 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
_Impl(const locale::_Impl &, size_t);
# 522 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
_Impl(const char *, size_t);
# 523 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
_Impl(size_t) throw();
# 525 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
~_Impl() throw();
# 527 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
_Impl(const locale::_Impl &);
# 530 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
void operator=(const locale::_Impl &);
# 533 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
bool _M_check_same_name()
# 534 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
{
# 535 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
bool __ret = true;
# 536 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
if ((_M_names)[1]) {
# 538 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
for (size_t __i = (0); __ret && (__i < ((_S_categories_size) - 1)); ++__i) {
# 539 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
__ret = (std::strcmp((_M_names)[__i], (_M_names)[__i + (1)]) == 0); } }
# 540 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
return __ret;
# 541 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
}
# 544 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
void _M_replace_categories(const locale::_Impl *, locale::category);
# 547 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
void _M_replace_category(const locale::_Impl *, const locale::id *const *);
# 550 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
void _M_replace_facet(const locale::_Impl *, const locale::id *);
# 553 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
void _M_install_facet(const locale::id *, const locale::facet *);
# 555 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
template < typename _Facet >
      inline void
      _M_init_facet ( _Facet * __facet )
      { _M_install_facet ( & _Facet :: id, __facet ); }
# 561 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
void _M_install_cache(const locale::facet *, size_t);
# 562 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
};
# 564 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
template < typename _Facet >
    locale :: locale ( const locale & __other, _Facet * __f )
    {
      _M_impl = new _Impl ( * __other . _M_impl, 1 );

      try
 { _M_impl -> _M_install_facet ( & _Facet :: id, __f ); }
      catch ( ... )
 {
   _M_impl -> _M_remove_reference ( );
   throw;
 }
      delete [ ] _M_impl -> _M_names [ 0 ];
      _M_impl -> _M_names [ 0 ] = 0;
    }
# 580 "/usr/include/c++/4.2.1/bits/locale_classes.h" 3
}
# 49 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
namespace std {
# 55 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
enum _Ios_Fmtflags {
# 57 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_boolalpha = 1,
# 58 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_dec,
# 59 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_fixed = 4,
# 60 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_hex = 8,
# 61 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_internal = 16,
# 62 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_left = 32,
# 63 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_oct = 64,
# 64 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_right = 128,
# 65 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_scientific = 256,
# 66 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_showbase = 512,
# 67 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_showpoint = 1024,
# 68 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_showpos = 2048,
# 69 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_skipws = 4096,
# 70 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_unitbuf = 8192,
# 71 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_uppercase = 16384,
# 72 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_adjustfield = 176,
# 73 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_basefield = 74,
# 74 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_floatfield = 260,
# 75 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_ios_fmtflags_end = 65536
# 76 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
};
# 79 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Fmtflags operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
# 80 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) & (static_cast< int>(__b))); }
# 83 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Fmtflags operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
# 84 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) | (static_cast< int>(__b))); }
# 87 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Fmtflags operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
# 88 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); }
# 91 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Fmtflags &operator|=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b)
# 92 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return __a = (__a | __b); }
# 95 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Fmtflags &operator&=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b)
# 96 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return __a = (__a & __b); }
# 99 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Fmtflags &operator^=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b)
# 100 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return __a = (__a ^ __b); }
# 103 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Fmtflags operator~(_Ios_Fmtflags __a)
# 104 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return (_Ios_Fmtflags)(~(static_cast< int>(__a))); }
# 107 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
enum _Ios_Openmode {
# 109 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_app = 1,
# 110 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_ate,
# 111 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_bin = 4,
# 112 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_in = 8,
# 113 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_out = 16,
# 114 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_trunc = 32,
# 115 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_ios_openmode_end = 65536
# 116 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
};
# 119 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Openmode operator&(_Ios_Openmode __a, _Ios_Openmode __b)
# 120 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return (_Ios_Openmode)((static_cast< int>(__a)) & (static_cast< int>(__b))); }
# 123 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Openmode operator|(_Ios_Openmode __a, _Ios_Openmode __b)
# 124 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return (_Ios_Openmode)((static_cast< int>(__a)) | (static_cast< int>(__b))); }
# 127 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Openmode operator^(_Ios_Openmode __a, _Ios_Openmode __b)
# 128 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return (_Ios_Openmode)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); }
# 131 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Openmode &operator|=(_Ios_Openmode &__a, _Ios_Openmode __b)
# 132 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return __a = (__a | __b); }
# 135 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Openmode &operator&=(_Ios_Openmode &__a, _Ios_Openmode __b)
# 136 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return __a = (__a & __b); }
# 139 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Openmode &operator^=(_Ios_Openmode &__a, _Ios_Openmode __b)
# 140 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return __a = (__a ^ __b); }
# 143 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Openmode operator~(_Ios_Openmode __a)
# 144 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return (_Ios_Openmode)(~(static_cast< int>(__a))); }
# 147 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
enum _Ios_Iostate {
# 149 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_goodbit,
# 150 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_badbit,
# 151 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_eofbit,
# 152 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_failbit = 4,
# 153 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_ios_iostate_end = 65536
# 154 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
};
# 157 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Iostate operator&(_Ios_Iostate __a, _Ios_Iostate __b)
# 158 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return (_Ios_Iostate)((static_cast< int>(__a)) & (static_cast< int>(__b))); }
# 161 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Iostate operator|(_Ios_Iostate __a, _Ios_Iostate __b)
# 162 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return (_Ios_Iostate)((static_cast< int>(__a)) | (static_cast< int>(__b))); }
# 165 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Iostate operator^(_Ios_Iostate __a, _Ios_Iostate __b)
# 166 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return (_Ios_Iostate)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); }
# 169 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Iostate &operator|=(_Ios_Iostate &__a, _Ios_Iostate __b)
# 170 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return __a = (__a | __b); }
# 173 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Iostate &operator&=(_Ios_Iostate &__a, _Ios_Iostate __b)
# 174 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return __a = (__a & __b); }
# 177 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Iostate &operator^=(_Ios_Iostate &__a, _Ios_Iostate __b)
# 178 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return __a = (__a ^ __b); }
# 181 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline _Ios_Iostate operator~(_Ios_Iostate __a)
# 182 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return (_Ios_Iostate)(~(static_cast< int>(__a))); }
# 184 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
enum _Ios_Seekdir {
# 186 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_beg,
# 187 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_cur,
# 188 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_end,
# 189 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_S_ios_seekdir_end = 65536
# 190 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
};
# 201 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
class ios_base {
# 207 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
public: class failure : public exception {
# 213 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
public: explicit failure(const string &) throw();
# 218 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
virtual ~failure() throw();
# 221 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
virtual const char *what() const throw();
# 224 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
private: string _M_msg;
# 225 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
};
# 253 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
typedef _Ios_Fmtflags fmtflags;
# 256 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags boolalpha = ((fmtflags)1);
# 259 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags dec = ((fmtflags)2);
# 262 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags fixed = ((fmtflags)4);
# 265 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags hex = ((fmtflags)8);
# 270 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags internal = ((fmtflags)16);
# 274 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags left = ((fmtflags)32);
# 277 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags oct = ((fmtflags)64);
# 281 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags right = ((fmtflags)128);
# 284 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags scientific = ((fmtflags)256);
# 288 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags showbase = ((fmtflags)512);
# 292 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags showpoint = ((fmtflags)1024);
# 295 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags showpos = ((fmtflags)2048);
# 298 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags skipws = ((fmtflags)4096);
# 301 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags unitbuf = ((fmtflags)8192);
# 305 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags uppercase = ((fmtflags)16384);
# 308 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags adjustfield = ((fmtflags)176);
# 311 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags basefield = ((fmtflags)74);
# 314 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const fmtflags floatfield = ((fmtflags)260);
# 328 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
typedef _Ios_Iostate iostate;
# 332 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const iostate badbit = ((iostate)1);
# 335 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const iostate eofbit = ((iostate)2);
# 340 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const iostate failbit = ((iostate)4);
# 343 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const iostate goodbit = ((iostate)0);
# 359 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
typedef _Ios_Openmode openmode;
# 362 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const openmode app = ((openmode)1);
# 365 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const openmode ate = ((openmode)2);
# 371 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const openmode binary = ((openmode)4);
# 374 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const openmode in = ((openmode)8);
# 377 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const openmode out = ((openmode)16);
# 380 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const openmode trunc = ((openmode)32);
# 392 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
typedef _Ios_Seekdir seekdir;
# 395 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const seekdir beg = ((seekdir)0);
# 398 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const seekdir cur = ((seekdir)1);
# 401 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static const seekdir end = ((seekdir)2);
# 404 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
typedef int io_state;
# 405 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
typedef int open_mode;
# 406 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
typedef int seek_dir;
# 408 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
typedef std::streampos streampos;
# 409 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
typedef std::streamoff streamoff;
# 418 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
enum event {
# 420 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
erase_event,
# 421 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
imbue_event,
# 422 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
copyfmt_event
# 423 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
};
# 435 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
typedef void (*event_callback)(event, ios_base &, int);
# 448 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
void register_callback(event_callback, int);
# 457 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
protected: streamsize _M_precision;
# 458 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
streamsize _M_width;
# 459 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
fmtflags _M_flags;
# 460 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
iostate _M_exception;
# 461 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
iostate _M_streambuf_state;
# 466 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
struct _Callback_list {
# 469 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_Callback_list *_M_next;
# 470 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
event_callback _M_fn;
# 471 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
int _M_index;
# 472 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_Atomic_word _M_refcount;
# 474 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_Callback_list(event_callback __fn, int __index, _Callback_list *
# 475 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__cb) : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0)
# 476 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ }
# 479 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
void _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); }
# 483 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
int _M_remove_reference()
# 484 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{ return __gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1); }
# 485 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
};
# 487 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_Callback_list *_M_callbacks;
# 490 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
void _M_call_callbacks(event) throw();
# 493 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
void _M_dispose_callbacks();
# 496 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
struct _Words {
# 498 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
void *_M_pword;
# 499 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
long _M_iword;
# 500 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_Words() : _M_pword((0)), _M_iword((0)) { }
# 501 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
};
# 504 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_Words _M_word_zero;
# 508 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
enum { _S_local_word_size = 8};
# 509 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_Words _M_local_word[_S_local_word_size];
# 512 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
int _M_word_size;
# 513 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_Words *_M_word;
# 516 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_Words &_M_grow_words(int, bool);
# 519 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
locale _M_ios_locale;
# 522 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
void _M_init();
# 530 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
public: class Init {
# 532 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
friend class ios_base;
# 534 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
public: Init();
# 535 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
~Init();
# 538 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
private: static _Atomic_word _S_refcount;
# 539 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static bool _S_synced_with_stdio;
# 540 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
};
# 548 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
fmtflags flags() const { return _M_flags; }
# 558 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
fmtflags flags(fmtflags __fmtfl)
# 559 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 560 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
fmtflags __old = (_M_flags);
# 561 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
(_M_flags) = __fmtfl;
# 562 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __old;
# 563 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 574 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl)
# 575 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 576 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
fmtflags __old = (_M_flags);
# 577 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
(((_M_flags)) |= __fmtfl);
# 578 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __old;
# 579 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 591 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl, fmtflags __mask)
# 592 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 593 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
fmtflags __old = (_M_flags);
# 594 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
(((_M_flags)) &= ((~__mask)));
# 595 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
(((_M_flags)) |= ((__fmtfl & __mask)));
# 596 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __old;
# 597 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 606 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
void unsetf(fmtflags __mask) { (((_M_flags)) &= ((~__mask))); }
# 618 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
streamsize precision() const { return _M_precision; }
# 626 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
streamsize precision(streamsize __prec)
# 627 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 628 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
streamsize __old = (_M_precision);
# 629 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
(_M_precision) = __prec;
# 630 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __old;
# 631 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 640 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
streamsize width() const { return _M_width; }
# 648 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
streamsize width(streamsize __wide)
# 649 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 650 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
streamsize __old = (_M_width);
# 651 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
(_M_width) = __wide;
# 652 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __old;
# 653 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 667 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static bool sync_with_stdio(bool = true);
# 679 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
locale imbue(const locale &);
# 690 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
locale getloc() const { return _M_ios_locale; }
# 700 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
const locale &_M_getloc() const { return _M_ios_locale; }
# 718 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
static int xalloc() throw();
# 734 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
long &iword(int __ix)
# 735 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 736 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_Words &__word = ((__ix < (_M_word_size)) ? ((_M_word)[__ix]) : this->_M_grow_words(__ix, true));
# 738 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __word._M_iword;
# 739 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 755 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
void *&pword(int __ix)
# 756 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 757 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
_Words &__word = ((__ix < (_M_word_size)) ? ((_M_word)[__ix]) : this->_M_grow_words(__ix, false));
# 759 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __word._M_pword;
# 760 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 771 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
virtual ~ios_base();
# 774 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
protected: ios_base();
# 779 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
private: ios_base(const ios_base &);
# 782 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
ios_base &operator=(const ios_base &);
# 783 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
};
# 788 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &boolalpha(ios_base &__base)
# 789 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 790 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.setf(ios_base::boolalpha);
# 791 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 792 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 796 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &noboolalpha(ios_base &__base)
# 797 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 798 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.unsetf(ios_base::boolalpha);
# 799 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 800 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 804 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &showbase(ios_base &__base)
# 805 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 806 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.setf(ios_base::showbase);
# 807 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 808 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 812 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &noshowbase(ios_base &__base)
# 813 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 814 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.unsetf(ios_base::showbase);
# 815 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 816 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 820 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &showpoint(ios_base &__base)
# 821 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 822 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.setf(ios_base::showpoint);
# 823 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 824 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 828 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &noshowpoint(ios_base &__base)
# 829 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 830 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.unsetf(ios_base::showpoint);
# 831 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 832 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 836 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &showpos(ios_base &__base)
# 837 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 838 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.setf(ios_base::showpos);
# 839 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 840 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 844 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &noshowpos(ios_base &__base)
# 845 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 846 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.unsetf(ios_base::showpos);
# 847 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 848 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 852 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &skipws(ios_base &__base)
# 853 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 854 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.setf(ios_base::skipws);
# 855 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 856 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 860 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &noskipws(ios_base &__base)
# 861 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 862 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.unsetf(ios_base::skipws);
# 863 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 864 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 868 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &uppercase(ios_base &__base)
# 869 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 870 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.setf(ios_base::uppercase);
# 871 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 872 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 876 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &nouppercase(ios_base &__base)
# 877 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 878 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.unsetf(ios_base::uppercase);
# 879 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 880 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 884 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &unitbuf(ios_base &__base)
# 885 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 886 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.setf(ios_base::unitbuf);
# 887 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 888 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 892 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &nounitbuf(ios_base &__base)
# 893 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 894 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.unsetf(ios_base::unitbuf);
# 895 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 896 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 901 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &internal(ios_base &__base)
# 902 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 903 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.setf(ios_base::internal, ios_base::adjustfield);
# 904 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 905 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 909 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &left(ios_base &__base)
# 910 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 911 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.setf(ios_base::left, ios_base::adjustfield);
# 912 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 913 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 917 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &right(ios_base &__base)
# 918 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 919 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.setf(ios_base::right, ios_base::adjustfield);
# 920 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 921 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 926 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &dec(ios_base &__base)
# 927 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 928 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.setf(ios_base::dec, ios_base::basefield);
# 929 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 930 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 934 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &hex(ios_base &__base)
# 935 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 936 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.setf(ios_base::hex, ios_base::basefield);
# 937 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 938 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 942 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &oct(ios_base &__base)
# 943 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 944 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.setf(ios_base::oct, ios_base::basefield);
# 945 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 946 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 951 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &fixed(ios_base &__base)
# 952 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 953 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.setf(ios_base::fixed, ios_base::floatfield);
# 954 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 955 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 959 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
inline ios_base &scientific(ios_base &__base)
# 960 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
{
# 961 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
__base.setf(ios_base::scientific, ios_base::floatfield);
# 962 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
return __base;
# 963 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 965 "/usr/include/c++/4.2.1/bits/ios_base.h" 3
}
# 51 "/usr/include/c++/4.2.1/streambuf" 3
namespace std {
# 58 "/usr/include/c++/4.2.1/streambuf" 3
template < typename _CharT, typename _Traits >
    streamsize
    __copy_streambufs_eof ( basic_streambuf < _CharT, _Traits > *,
     basic_streambuf < _CharT, _Traits > *, bool & );
# 123 "/usr/include/c++/4.2.1/streambuf" 3
template < typename _CharT, typename _Traits >
    class basic_streambuf
    {
    public :






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type :: int_type int_type;
      typedef typename traits_type :: pos_type pos_type;
      typedef typename traits_type :: off_type off_type;
# 146 "/usr/include/c++/4.2.1/streambuf" 3
      typedef basic_streambuf < char_type, traits_type > __streambuf_type;


      friend class basic_ios < char_type, traits_type >;
      friend class basic_istream < char_type, traits_type >;
      friend class basic_ostream < char_type, traits_type >;
      friend class istreambuf_iterator < char_type, traits_type >;
      friend class ostreambuf_iterator < char_type, traits_type >;

      friend streamsize
      __copy_streambufs_eof < > ( __streambuf_type *, __streambuf_type *, bool & );

      template < typename _CharT2 >
        friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
            _CharT2 * > :: __type
        __copy_aux ( istreambuf_iterator < _CharT2 >,
     istreambuf_iterator < _CharT2 >, _CharT2 * );

      template < typename _CharT2 >
        friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
      istreambuf_iterator < _CharT2 > > :: __type
        find ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      const _CharT2 & );

      template < typename _CharT2, typename _Traits2 >
        friend basic_istream < _CharT2, _Traits2 > &
        operator >> ( basic_istream < _CharT2, _Traits2 > &, _CharT2 * );

      template < typename _CharT2, typename _Traits2, typename _Alloc >
        friend basic_istream < _CharT2, _Traits2 > &
        operator >> ( basic_istream < _CharT2, _Traits2 > &,
     basic_string < _CharT2, _Traits2, _Alloc > & );

      template < typename _CharT2, typename _Traits2, typename _Alloc >
        friend basic_istream < _CharT2, _Traits2 > &
        getline ( basic_istream < _CharT2, _Traits2 > &,
  basic_string < _CharT2, _Traits2, _Alloc > &, _CharT2 );

    protected :
# 195 "/usr/include/c++/4.2.1/streambuf" 3
      char_type * _M_in_beg;
      char_type * _M_in_cur;
      char_type * _M_in_end;
      char_type * _M_out_beg;
      char_type * _M_out_cur;
      char_type * _M_out_end;






      locale _M_buf_locale;

  public :

      virtual
      ~ basic_streambuf ( )
      { }
# 223 "/usr/include/c++/4.2.1/streambuf" 3
      locale
      pubimbue ( const locale & __loc )
      {
 locale __tmp ( this -> getloc ( ) );
 this -> imbue ( __loc );
 _M_buf_locale = __loc;
 return __tmp;
      }
# 240 "/usr/include/c++/4.2.1/streambuf" 3
      locale
      getloc ( ) const
      { return _M_buf_locale; }
# 253 "/usr/include/c++/4.2.1/streambuf" 3
      __streambuf_type *
      pubsetbuf ( char_type * __s, streamsize __n )
      { return this -> setbuf ( __s, __n ); }

      pos_type
      pubseekoff ( off_type __off, ios_base :: seekdir __way,
   ios_base :: openmode __mode = ios_base :: in | ios_base :: out )
      { return this -> seekoff ( __off, __way, __mode ); }

      pos_type
      pubseekpos ( pos_type __sp,
   ios_base :: openmode __mode = ios_base :: in | ios_base :: out )
      { return this -> seekpos ( __sp, __mode ); }

      int
      pubsync ( ) { return this -> sync ( ); }
# 280 "/usr/include/c++/4.2.1/streambuf" 3
      streamsize
      in_avail ( )
      {
 const streamsize __ret = this -> egptr ( ) - this -> gptr ( );
 return __ret ? __ret : this -> showmanyc ( );
      }
# 294 "/usr/include/c++/4.2.1/streambuf" 3
      int_type
      snextc ( )
      {
 int_type __ret = traits_type :: eof ( );
 if ( __builtin_expect ( ! traits_type :: eq_int_type ( this -> sbumpc ( ),
             __ret ), true ) )
   __ret = this -> sgetc ( );
 return __ret;
      }
# 312 "/usr/include/c++/4.2.1/streambuf" 3
      int_type
      sbumpc ( )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> gptr ( ) < this -> egptr ( ), true ) )
   {
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
     this -> gbump ( 1 );
   }
 else
   __ret = this -> uflow ( );
 return __ret;
      }
# 334 "/usr/include/c++/4.2.1/streambuf" 3
      int_type
      sgetc ( )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> gptr ( ) < this -> egptr ( ), true ) )
   __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
 else
   __ret = this -> underflow ( );
 return __ret;
      }
# 353 "/usr/include/c++/4.2.1/streambuf" 3
      streamsize
      sgetn ( char_type * __s, streamsize __n )
      { return this -> xsgetn ( __s, __n ); }
# 367 "/usr/include/c++/4.2.1/streambuf" 3
      int_type
      sputbackc ( char_type __c )
      {
 int_type __ret;
 const bool __testpos = this -> eback ( ) < this -> gptr ( );
 if ( __builtin_expect ( ! __testpos ||
        ! traits_type :: eq ( __c, this -> gptr ( ) [ - 1 ] ), false ) )
   __ret = this -> pbackfail ( traits_type :: to_int_type ( __c ) );
 else
   {
     this -> gbump ( - 1 );
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
   }
 return __ret;
      }
# 392 "/usr/include/c++/4.2.1/streambuf" 3
      int_type
      sungetc ( )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> eback ( ) < this -> gptr ( ), true ) )
   {
     this -> gbump ( - 1 );
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
   }
 else
   __ret = this -> pbackfail ( );
 return __ret;
      }
# 419 "/usr/include/c++/4.2.1/streambuf" 3
      int_type
      sputc ( char_type __c )
      {
 int_type __ret;
 if ( __builtin_expect ( this -> pptr ( ) < this -> epptr ( ), true ) )
   {
     * this -> pptr ( ) = __c;
     this -> pbump ( 1 );
     __ret = traits_type :: to_int_type ( __c );
   }
 else
   __ret = this -> overflow ( traits_type :: to_int_type ( __c ) );
 return __ret;
      }
# 445 "/usr/include/c++/4.2.1/streambuf" 3
      streamsize
      sputn ( const char_type * __s, streamsize __n )
      { return this -> xsputn ( __s, __n ); }

    protected :
# 459 "/usr/include/c++/4.2.1/streambuf" 3
      basic_streambuf ( )
      : _M_in_beg ( 0 ), _M_in_cur ( 0 ), _M_in_end ( 0 ),
      _M_out_beg ( 0 ), _M_out_cur ( 0 ), _M_out_end ( 0 ),
      _M_buf_locale ( locale ( ) )
      { }
# 477 "/usr/include/c++/4.2.1/streambuf" 3
      char_type *
      eback ( ) const { return _M_in_beg; }

      char_type *
      gptr ( ) const { return _M_in_cur; }

      char_type *
      egptr ( ) const { return _M_in_end; }
# 493 "/usr/include/c++/4.2.1/streambuf" 3
      void
      gbump ( int __n ) { _M_in_cur += __n; }
# 504 "/usr/include/c++/4.2.1/streambuf" 3
      void
      setg ( char_type * __gbeg, char_type * __gnext, char_type * __gend )
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 524 "/usr/include/c++/4.2.1/streambuf" 3
      char_type *
      pbase ( ) const { return _M_out_beg; }

      char_type *
      pptr ( ) const { return _M_out_cur; }

      char_type *
      epptr ( ) const { return _M_out_end; }
# 540 "/usr/include/c++/4.2.1/streambuf" 3
      void
      pbump ( int __n ) { _M_out_cur += __n; }
# 550 "/usr/include/c++/4.2.1/streambuf" 3
      void
      setp ( char_type * __pbeg, char_type * __pend )
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 571 "/usr/include/c++/4.2.1/streambuf" 3
      virtual void
      imbue ( const locale & )
      { }
# 586 "/usr/include/c++/4.2.1/streambuf" 3
      virtual basic_streambuf < char_type, _Traits > *
      setbuf ( char_type *, streamsize )
      { return this; }
# 597 "/usr/include/c++/4.2.1/streambuf" 3
      virtual pos_type
      seekoff ( off_type, ios_base :: seekdir,
       ios_base :: openmode = ios_base :: in | ios_base :: out )
      { return pos_type ( off_type ( - 1 ) ); }
# 609 "/usr/include/c++/4.2.1/streambuf" 3
      virtual pos_type
      seekpos ( pos_type,
       ios_base :: openmode = ios_base :: in | ios_base :: out )
      { return pos_type ( off_type ( - 1 ) ); }
# 622 "/usr/include/c++/4.2.1/streambuf" 3
      virtual int
      sync ( ) { return 0; }
# 644 "/usr/include/c++/4.2.1/streambuf" 3
      virtual streamsize
      showmanyc ( ) { return 0; }
# 660 "/usr/include/c++/4.2.1/streambuf" 3
      virtual streamsize
      xsgetn ( char_type * __s, streamsize __n );
# 682 "/usr/include/c++/4.2.1/streambuf" 3
      virtual int_type
      underflow ( )
      { return traits_type :: eof ( ); }
# 695 "/usr/include/c++/4.2.1/streambuf" 3
      virtual int_type
      uflow ( )
      {
 int_type __ret = traits_type :: eof ( );
 const bool __testeof = traits_type :: eq_int_type ( this -> underflow ( ),
       __ret );
 if ( ! __testeof )
   {
     __ret = traits_type :: to_int_type ( * this -> gptr ( ) );
     this -> gbump ( 1 );
   }
 return __ret;
      }
# 719 "/usr/include/c++/4.2.1/streambuf" 3
      virtual int_type
      pbackfail ( int_type = traits_type :: eof ( ) )
      { return traits_type :: eof ( ); }
# 737 "/usr/include/c++/4.2.1/streambuf" 3
      virtual streamsize
      xsputn ( const char_type * __s, streamsize __n );
# 762 "/usr/include/c++/4.2.1/streambuf" 3
      virtual int_type
      overflow ( int_type = traits_type :: eof ( ) )
      { return traits_type :: eof ( ); }

    private :


      basic_streambuf ( const __streambuf_type & __sb )
      : _M_in_beg ( __sb . _M_in_beg ), _M_in_cur ( __sb . _M_in_cur ),
      _M_in_end ( __sb . _M_in_end ), _M_out_beg ( __sb . _M_out_beg ),
      _M_out_cur ( __sb . _M_out_cur ), _M_out_end ( __sb . _M_out_cur ),
      _M_buf_locale ( __sb . _M_buf_locale )
      { }

      __streambuf_type &
      operator = ( const __streambuf_type & ) { return * this; };
    };
# 808 "/usr/include/c++/4.2.1/streambuf" 3
template<> streamsize __copy_streambufs_eof(basic_streambuf< char, char_traits< char> > *, basic_streambuf< char, char_traits< char> > *, bool &);
# 813 "/usr/include/c++/4.2.1/streambuf" 3
template<> streamsize __copy_streambufs_eof(basic_streambuf< wchar_t, char_traits< wchar_t> > *, basic_streambuf< wchar_t, char_traits< wchar_t> > *, bool &);
# 817 "/usr/include/c++/4.2.1/streambuf" 3
}
# 45 "/usr/include/c++/4.2.1/bits/streambuf.tcc" 3
namespace std {
# 47 "/usr/include/c++/4.2.1/bits/streambuf.tcc" 3
template < typename _CharT, typename _Traits >
    streamsize
    basic_streambuf < _CharT, _Traits > ::
    xsgetn ( char_type * __s, streamsize __n )
    {
      streamsize __ret = 0;
      while ( __ret < __n )
 {
   const streamsize __buf_len = this -> egptr ( ) - this -> gptr ( );
   if ( __buf_len )
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std :: min ( __buf_len, __remaining );
       traits_type :: copy ( __s, this -> gptr ( ), __len );
       __ret += __len;
       __s += __len;
       this -> gbump ( __len );
     }

   if ( __ret < __n )
     {
       const int_type __c = this -> uflow ( );
       if ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
  {
    traits_type :: assign ( * __s ++, traits_type :: to_char_type ( __c ) );
    ++ __ret;
  }
       else
  break;
     }
 }
      return __ret;
    }
# 81 "/usr/include/c++/4.2.1/bits/streambuf.tcc" 3
template < typename _CharT, typename _Traits >
    streamsize
    basic_streambuf < _CharT, _Traits > ::
    xsputn ( const char_type * __s, streamsize __n )
    {
      streamsize __ret = 0;
      while ( __ret < __n )
 {
   const streamsize __buf_len = this -> epptr ( ) - this -> pptr ( );
   if ( __buf_len )
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std :: min ( __buf_len, __remaining );
       traits_type :: copy ( this -> pptr ( ), __s, __len );
       __ret += __len;
       __s += __len;
       this -> pbump ( __len );
     }

   if ( __ret < __n )
     {
       int_type __c = this -> overflow ( traits_type :: to_int_type ( * __s ) );
       if ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
  {
    ++ __ret;
    ++ __s;
  }
       else
  break;
     }
 }
      return __ret;
    }
# 118 "/usr/include/c++/4.2.1/bits/streambuf.tcc" 3
template < typename _CharT, typename _Traits >
    streamsize
    __copy_streambufs_eof ( basic_streambuf < _CharT, _Traits > * __sbin,
     basic_streambuf < _CharT, _Traits > * __sbout,
     bool & __ineof )
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits :: int_type __c = __sbin -> sgetc ( );
      while ( ! _Traits :: eq_int_type ( __c, _Traits :: eof ( ) ) )
 {
   __c = __sbout -> sputc ( _Traits :: to_char_type ( __c ) );
   if ( _Traits :: eq_int_type ( __c, _Traits :: eof ( ) ) )
     {
       __ineof = false;
       break;
     }
   ++ __ret;
   __c = __sbin -> snextc ( );
 }
      return __ret;
    }
# 141 "/usr/include/c++/4.2.1/bits/streambuf.tcc" 3
template < typename _CharT, typename _Traits >
    inline streamsize
    __copy_streambufs ( basic_streambuf < _CharT, _Traits > * __sbin,
        basic_streambuf < _CharT, _Traits > * __sbout )
    {
      bool __ineof;
      return __copy_streambufs_eof ( __sbin, __sbout, __ineof );
    }
# 154 "/usr/include/c++/4.2.1/bits/streambuf.tcc" 3
extern template class basic_streambuf< char, char_traits< char> > ;
# 155 "/usr/include/c++/4.2.1/bits/streambuf.tcc" 3
extern template streamsize __copy_streambufs(basic_streambuf< char, char_traits< char> > *, basic_streambuf< char, char_traits< char> > *);
# 159 "/usr/include/c++/4.2.1/bits/streambuf.tcc" 3
extern template streamsize __copy_streambufs_eof< char, char_traits< char> > (basic_streambuf< char, char_traits< char> > *, basic_streambuf< char, char_traits< char> > *, bool &);
# 165 "/usr/include/c++/4.2.1/bits/streambuf.tcc" 3
extern template class basic_streambuf< wchar_t, char_traits< wchar_t> > ;
# 166 "/usr/include/c++/4.2.1/bits/streambuf.tcc" 3
extern template streamsize __copy_streambufs(basic_streambuf< wchar_t, char_traits< wchar_t> > *, basic_streambuf< wchar_t, char_traits< wchar_t> > *);
# 170 "/usr/include/c++/4.2.1/bits/streambuf.tcc" 3
extern template streamsize __copy_streambufs_eof< wchar_t, char_traits< wchar_t> > (basic_streambuf< wchar_t, char_traits< wchar_t> > *, basic_streambuf< wchar_t, char_traits< wchar_t> > *, bool &);
# 177 "/usr/include/c++/4.2.1/bits/streambuf.tcc" 3
}
# 44 "/usr/include/c++/4.2.1/bits/streambuf_iterator.h" 3
namespace std {
# 48 "/usr/include/c++/4.2.1/bits/streambuf_iterator.h" 3
template < typename _CharT, typename _Traits >
    class istreambuf_iterator
    : public iterator < input_iterator_tag, _CharT, typename _Traits :: off_type,
        _CharT *, _CharT & >
    {
    public :



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits :: int_type int_type;
      typedef basic_streambuf < _CharT, _Traits > streambuf_type;
      typedef basic_istream < _CharT, _Traits > istream_type;


      template < typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
                      ostreambuf_iterator < _CharT2 > > :: __type
 copy ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      ostreambuf_iterator < _CharT2 > );

      template < typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
            _CharT2 * > :: __type
 __copy_aux ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
     _CharT2 * );

      template < typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
               istreambuf_iterator < _CharT2 > > :: __type
 find ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      const _CharT2 & );

    private :







      mutable streambuf_type * _M_sbuf;
      mutable int_type _M_c;

    public :

      istreambuf_iterator ( ) throw ( )
      : _M_sbuf ( 0 ), _M_c ( traits_type :: eof ( ) ) { }


      istreambuf_iterator ( istream_type & __s ) throw ( )
      : _M_sbuf ( __s . rdbuf ( ) ), _M_c ( traits_type :: eof ( ) ) { }


      istreambuf_iterator ( streambuf_type * __s ) throw ( )
      : _M_sbuf ( __s ), _M_c ( traits_type :: eof ( ) ) { }




      char_type
      operator * ( ) const
      {







 return traits_type :: to_char_type ( _M_get ( ) );
      }


      istreambuf_iterator &
      operator ++ ( )
      {
 ;


 if ( _M_sbuf )
   {
     _M_sbuf -> sbumpc ( );
     _M_c = traits_type :: eof ( );
   }
 return * this;
      }


      istreambuf_iterator
      operator ++ ( int )
      {
 ;



 istreambuf_iterator __old = * this;
 if ( _M_sbuf )
   {
     __old . _M_c = _M_sbuf -> sbumpc ( );
     _M_c = traits_type :: eof ( );
   }
 return __old;
      }





      bool
      equal ( const istreambuf_iterator & __b ) const
      {
 const bool __thiseof = _M_at_eof ( );
 const bool __beof = __b . _M_at_eof ( );
 return ( __thiseof && __beof || ( ! __thiseof && ! __beof ) );
      }

    private :
      int_type
      _M_get ( ) const
      {
 const int_type __eof = traits_type :: eof ( );
 int_type __ret = __eof;
 if ( _M_sbuf )
   {
     if ( ! traits_type :: eq_int_type ( _M_c, __eof ) )
       __ret = _M_c;
     else if ( ! traits_type :: eq_int_type ( ( __ret = _M_sbuf -> sgetc ( ) ),
            __eof ) )
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof ( ) const
      {
 const int_type __eof = traits_type :: eof ( );
 return traits_type :: eq_int_type ( _M_get ( ), __eof );
      }
    };
# 193 "/usr/include/c++/4.2.1/bits/streambuf_iterator.h" 3
template < typename _CharT, typename _Traits >
    inline bool
    operator == ( const istreambuf_iterator < _CharT, _Traits > & __a,
        const istreambuf_iterator < _CharT, _Traits > & __b )
    { return __a . equal ( __b ); }
# 199 "/usr/include/c++/4.2.1/bits/streambuf_iterator.h" 3
template < typename _CharT, typename _Traits >
    inline bool
    operator != ( const istreambuf_iterator < _CharT, _Traits > & __a,
        const istreambuf_iterator < _CharT, _Traits > & __b )
    { return ! __a . equal ( __b ); }
# 206 "/usr/include/c++/4.2.1/bits/streambuf_iterator.h" 3
template < typename _CharT, typename _Traits >
    class ostreambuf_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    public :



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf < _CharT, _Traits > streambuf_type;
      typedef basic_ostream < _CharT, _Traits > ostream_type;


      template < typename _CharT2 >
 friend typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value,
                      ostreambuf_iterator < _CharT2 > > :: __type
 copy ( istreambuf_iterator < _CharT2 >, istreambuf_iterator < _CharT2 >,
      ostreambuf_iterator < _CharT2 > );

    private :
      streambuf_type * _M_sbuf;
      bool _M_failed;

    public :

      ostreambuf_iterator ( ostream_type & __s ) throw ( )
      : _M_sbuf ( __s . rdbuf ( ) ), _M_failed ( ! _M_sbuf ) { }


      ostreambuf_iterator ( streambuf_type * __s ) throw ( )
      : _M_sbuf ( __s ), _M_failed ( ! _M_sbuf ) { }


      ostreambuf_iterator &
      operator = ( _CharT __c )
      {
 if ( ! _M_failed &&
     _Traits :: eq_int_type ( _M_sbuf -> sputc ( __c ), _Traits :: eof ( ) ) )
   _M_failed = true;
 return * this;
      }


      ostreambuf_iterator &
      operator * ( )
      { return * this; }


      ostreambuf_iterator &
      operator ++ ( int )
      { return * this; }


      ostreambuf_iterator &
      operator ++ ( )
      { return * this; }


      bool
      failed ( ) const throw ( )
      { return _M_failed; }

      ostreambuf_iterator &
      _M_put ( const _CharT * __ws, streamsize __len )
      {
 if ( __builtin_expect ( ! _M_failed, true )
     && __builtin_expect ( this -> _M_sbuf -> sputn ( __ws, __len ) != __len,
    false ) )
   _M_failed = true;
 return * this;
      }
    };
# 281 "/usr/include/c++/4.2.1/bits/streambuf_iterator.h" 3
template < typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
                           ostreambuf_iterator < _CharT > > :: __type
    copy ( istreambuf_iterator < _CharT > __first,
  istreambuf_iterator < _CharT > __last,
  ostreambuf_iterator < _CharT > __result )
    {
      if ( __first . _M_sbuf && ! __last . _M_sbuf && ! __result . _M_failed )
 {
   bool __ineof;
   __copy_streambufs_eof ( __first . _M_sbuf, __result . _M_sbuf, __ineof );
   if ( ! __ineof )
     __result . _M_failed = true;
 }
      return __result;
    }
# 298 "/usr/include/c++/4.2.1/bits/streambuf_iterator.h" 3
template < typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
            ostreambuf_iterator < _CharT > > :: __type
    __copy_aux ( _CharT * __first, _CharT * __last,
        ostreambuf_iterator < _CharT > __result )
    {
      const streamsize __num = __last - __first;
      if ( __num > 0 )
 __result . _M_put ( __first, __num );
      return __result;
    }
# 310 "/usr/include/c++/4.2.1/bits/streambuf_iterator.h" 3
template < typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
        ostreambuf_iterator < _CharT > > :: __type
    __copy_aux ( const _CharT * __first, const _CharT * __last,
        ostreambuf_iterator < _CharT > __result )
    {
      const streamsize __num = __last - __first;
      if ( __num > 0 )
 __result . _M_put ( __first, __num );
      return __result;
    }
# 322 "/usr/include/c++/4.2.1/bits/streambuf_iterator.h" 3
template < typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
            _CharT * > :: __type
    __copy_aux ( istreambuf_iterator < _CharT > __first,
        istreambuf_iterator < _CharT > __last, _CharT * __result )
    {
      typedef istreambuf_iterator < _CharT > __is_iterator_type;
      typedef typename __is_iterator_type :: traits_type traits_type;
      typedef typename __is_iterator_type :: streambuf_type streambuf_type;
      typedef typename traits_type :: int_type int_type;

      if ( __first . _M_sbuf && ! __last . _M_sbuf )
 {
   streambuf_type * __sb = __first . _M_sbuf;
   int_type __c = __sb -> sgetc ( );
   while ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
     {
       const streamsize __n = __sb -> egptr ( ) - __sb -> gptr ( );
       if ( __n > 1 )
  {
    traits_type :: copy ( __result, __sb -> gptr ( ), __n );
    __sb -> gbump ( __n );
    __result += __n;
    __c = __sb -> underflow ( );
  }
       else
  {
    * __result ++ = traits_type :: to_char_type ( __c );
    __c = __sb -> snextc ( );
  }
     }
 }
      return __result;
    }
# 357 "/usr/include/c++/4.2.1/bits/streambuf_iterator.h" 3
template < typename _CharT >
    typename __gnu_cxx :: __enable_if < __is_char < _CharT > :: __value,
          istreambuf_iterator < _CharT > > :: __type
    find ( istreambuf_iterator < _CharT > __first,
  istreambuf_iterator < _CharT > __last, const _CharT & __val )
    {
      typedef istreambuf_iterator < _CharT > __is_iterator_type;
      typedef typename __is_iterator_type :: traits_type traits_type;
      typedef typename __is_iterator_type :: streambuf_type streambuf_type;
      typedef typename traits_type :: int_type int_type;

      if ( __first . _M_sbuf && ! __last . _M_sbuf )
 {
   const int_type __ival = traits_type :: to_int_type ( __val );
   streambuf_type * __sb = __first . _M_sbuf;
   int_type __c = __sb -> sgetc ( );
   while ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) )
   && ! traits_type :: eq_int_type ( __c, __ival ) )
     {
       streamsize __n = __sb -> egptr ( ) - __sb -> gptr ( );
       if ( __n > 1 )
  {
    const _CharT * __p = traits_type :: find ( __sb -> gptr ( ),
       __n, __val );
    if ( __p )
      __n = __p - __sb -> gptr ( );
    __sb -> gbump ( __n );
    __c = __sb -> sgetc ( );
  }
       else
  __c = __sb -> snextc ( );
     }

   if ( ! traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
     __first . _M_c = __c;
   else
     __first . _M_sbuf = 0;
 }
      return __first;
    }
# 398 "/usr/include/c++/4.2.1/bits/streambuf_iterator.h" 3
}
# 39 "/usr/include/wctype.h" 3
typedef __darwin_wctrans_t wctrans_t;
# 63 "/usr/include/wctype.h" 3
static inline int iswblank(wint_t _wc)
# 64 "/usr/include/wctype.h" 3
{
# 65 "/usr/include/wctype.h" 3
return __istype(_wc, 131072L);
# 66 "/usr/include/wctype.h" 3
}
# 70 "/usr/include/wctype.h" 3
static inline int iswascii(wint_t _wc)
# 71 "/usr/include/wctype.h" 3
{
# 72 "/usr/include/wctype.h" 3
return (_wc & (~127)) == 0;
# 73 "/usr/include/wctype.h" 3
}
# 76 "/usr/include/wctype.h" 3
static inline int iswhexnumber(wint_t _wc)
# 77 "/usr/include/wctype.h" 3
{
# 78 "/usr/include/wctype.h" 3
return __istype(_wc, 65536L);
# 79 "/usr/include/wctype.h" 3
}
# 82 "/usr/include/wctype.h" 3
static inline int iswideogram(wint_t _wc)
# 83 "/usr/include/wctype.h" 3
{
# 84 "/usr/include/wctype.h" 3
return __istype(_wc, 524288L);
# 85 "/usr/include/wctype.h" 3
}
# 88 "/usr/include/wctype.h" 3
static inline int iswnumber(wint_t _wc)
# 89 "/usr/include/wctype.h" 3
{
# 90 "/usr/include/wctype.h" 3
return __istype(_wc, 1024L);
# 91 "/usr/include/wctype.h" 3
}
# 94 "/usr/include/wctype.h" 3
static inline int iswphonogram(wint_t _wc)
# 95 "/usr/include/wctype.h" 3
{
# 96 "/usr/include/wctype.h" 3
return __istype(_wc, 2097152L);
# 97 "/usr/include/wctype.h" 3
}
# 100 "/usr/include/wctype.h" 3
static inline int iswrune(wint_t _wc)
# 101 "/usr/include/wctype.h" 3
{
# 102 "/usr/include/wctype.h" 3
return __istype(_wc, 4294967280UL);
# 103 "/usr/include/wctype.h" 3
}
# 106 "/usr/include/wctype.h" 3
static inline int iswspecial(wint_t _wc)
# 107 "/usr/include/wctype.h" 3
{
# 108 "/usr/include/wctype.h" 3
return __istype(_wc, 1048576L);
# 109 "/usr/include/wctype.h" 3
}
# 132 "/usr/include/wctype.h" 3
extern "C" wint_t nextwctype(wint_t, wctype_t);
# 134 "/usr/include/wctype.h" 3
extern "C" wint_t towctrans(wint_t, wctrans_t);
# 136 "/usr/include/wctype.h" 3
extern "C" wctrans_t wctrans(const char *);
# 80 "/usr/include/c++/4.2.1/cwctype" 3
namespace std {
# 84 "/usr/include/c++/4.2.1/cwctype" 3
using ::wctype_t;
# 85 "/usr/include/c++/4.2.1/cwctype" 3
using ::wctrans_t;
# 87 "/usr/include/c++/4.2.1/cwctype" 3
using ::iswalnum;
# 88 "/usr/include/c++/4.2.1/cwctype" 3
using ::iswalpha;
# 90 "/usr/include/c++/4.2.1/cwctype" 3
using ::iswblank;
# 92 "/usr/include/c++/4.2.1/cwctype" 3
using ::iswcntrl;
# 93 "/usr/include/c++/4.2.1/cwctype" 3
using ::iswctype;
# 94 "/usr/include/c++/4.2.1/cwctype" 3
using ::iswdigit;
# 95 "/usr/include/c++/4.2.1/cwctype" 3
using ::iswgraph;
# 96 "/usr/include/c++/4.2.1/cwctype" 3
using ::iswlower;
# 97 "/usr/include/c++/4.2.1/cwctype" 3
using ::iswprint;
# 98 "/usr/include/c++/4.2.1/cwctype" 3
using ::iswpunct;
# 99 "/usr/include/c++/4.2.1/cwctype" 3
using ::iswspace;
# 100 "/usr/include/c++/4.2.1/cwctype" 3
using ::iswupper;
# 101 "/usr/include/c++/4.2.1/cwctype" 3
using ::iswxdigit;
# 102 "/usr/include/c++/4.2.1/cwctype" 3
using ::towctrans;
# 103 "/usr/include/c++/4.2.1/cwctype" 3
using ::towlower;
# 104 "/usr/include/c++/4.2.1/cwctype" 3
using ::towupper;
# 105 "/usr/include/c++/4.2.1/cwctype" 3
using ::wctrans;
# 106 "/usr/include/c++/4.2.1/cwctype" 3
using ::wctype;
# 108 "/usr/include/c++/4.2.1/cwctype" 3
}
# 38 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
namespace std {
# 41 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
struct ctype_base {
# 44 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
typedef const int *__to_type;
# 46 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
typedef unsigned long mask;
# 49 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
static const mask upper = (32768L);
# 50 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
static const mask lower = (4096L);
# 51 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
static const mask alpha = (256L);
# 52 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
static const mask digit = (1024L);
# 53 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
static const mask xdigit = (65536L);
# 54 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
static const mask space = (16384L);
# 55 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
static const mask print = (262144L);
# 56 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
static const mask graph = ((256L | 1024L) | 8192L);
# 57 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
static const mask cntrl = (512L);
# 58 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
static const mask punct = (8192L);
# 59 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
static const mask alnum = (256L | 1024L);
# 74 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
};
# 76 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_base.h" 3
}
# 53 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
namespace std {
# 65 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _Tv> void __convert_to_v(const char *, _Tv &, ios_base::iostate &, const __c_locale &);
# 73 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> void __convert_to_v(const char *, float &, ios_base::iostate &, const __c_locale &);
# 78 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> void __convert_to_v(const char *, double &, ios_base::iostate &, const __c_locale &);
# 83 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> void __convert_to_v(const char *, long double &, ios_base::iostate &, const __c_locale &);
# 88 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _CharT, class _Traits>
# 89 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
struct __pad {
# 92 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
static void _S_pad(ios_base &, _CharT, _CharT *, const _CharT *, const streamsize, const streamsize, const bool);
# 95 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
};
# 102 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    _CharT *
    __add_grouping ( _CharT * __s, _CharT __sep,
     const char * __gbeg, size_t __gsize,
     const _CharT * __first, const _CharT * __last );
# 111 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    inline
    ostreambuf_iterator < _CharT >
    __write ( ostreambuf_iterator < _CharT > __s, const _CharT * __ws, int __len )
    {
      __s . _M_put ( __ws, __len );
      return __s;
    }
# 121 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT, typename _OutIter >
    inline
    _OutIter
    __write ( _OutIter __s, const _CharT * __ws, int __len )
    {
      for ( int __j = 0; __j < __len; __j ++, ++ __s )
 * __s = __ws [ __j ];
      return __s;
    }
# 145 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    class __ctype_abstract_base : public locale :: facet, public ctype_base
    {
    public :


      typedef _CharT char_type;
# 163 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      bool
      is ( mask __m, char_type __c ) const
      { return this -> do_is ( __m, __c ); }
# 180 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      const char_type *
      is ( const char_type * __lo, const char_type * __hi, mask * __vec ) const
      { return this -> do_is ( __lo, __hi, __vec ); }
# 196 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      const char_type *
      scan_is ( mask __m, const char_type * __lo, const char_type * __hi ) const
      { return this -> do_scan_is ( __m, __lo, __hi ); }
# 212 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      const char_type *
      scan_not ( mask __m, const char_type * __lo, const char_type * __hi ) const
      { return this -> do_scan_not ( __m, __lo, __hi ); }
# 226 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      char_type
      toupper ( char_type __c ) const
      { return this -> do_toupper ( __c ); }
# 241 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      const char_type *
      toupper ( char_type * __lo, const char_type * __hi ) const
      { return this -> do_toupper ( __lo, __hi ); }
# 255 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      char_type
      tolower ( char_type __c ) const
      { return this -> do_tolower ( __c ); }
# 270 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      const char_type *
      tolower ( char_type * __lo, const char_type * __hi ) const
      { return this -> do_tolower ( __lo, __hi ); }
# 287 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      char_type
      widen ( char __c ) const
      { return this -> do_widen ( __c ); }
# 306 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      const char *
      widen ( const char * __lo, const char * __hi, char_type * __to ) const
      { return this -> do_widen ( __lo, __hi, __to ); }
# 325 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      char
      narrow ( char_type __c, char __dfault ) const
      { return this -> do_narrow ( __c, __dfault ); }
# 347 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      const char_type *
      narrow ( const char_type * __lo, const char_type * __hi,
       char __dfault, char * __to ) const
      { return this -> do_narrow ( __lo, __hi, __dfault, __to ); }

    protected :
      explicit
      __ctype_abstract_base ( size_t __refs = 0 ) : facet ( __refs ) { }

      virtual
      ~ __ctype_abstract_base ( ) { }
# 372 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual bool
      do_is ( mask __m, char_type __c ) const = 0;
# 391 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual const char_type *
      do_is ( const char_type * __lo, const char_type * __hi,
     mask * __vec ) const = 0;
# 410 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual const char_type *
      do_scan_is ( mask __m, const char_type * __lo,
   const char_type * __hi ) const = 0;
# 429 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual const char_type *
      do_scan_not ( mask __m, const char_type * __lo,
    const char_type * __hi ) const = 0;
# 447 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual char_type
      do_toupper ( char_type ) const = 0;
# 464 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual const char_type *
      do_toupper ( char_type * __lo, const char_type * __hi ) const = 0;
# 480 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual char_type
      do_tolower ( char_type ) const = 0;
# 497 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual const char_type *
      do_tolower ( char_type * __lo, const char_type * __hi ) const = 0;
# 516 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual char_type
      do_widen ( char ) const = 0;
# 537 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual const char *
      do_widen ( const char * __lo, const char * __hi,
        char_type * __dest ) const = 0;
# 559 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual char
      do_narrow ( char_type, char __dfault ) const = 0;
# 583 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual const char_type *
      do_narrow ( const char_type * __lo, const char_type * __hi,
  char __dfault, char * __dest ) const = 0;
    };
# 606 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    class ctype : public __ctype_abstract_base < _CharT >
    {
    public :

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base < _CharT > :: mask mask;


      static locale :: id id;

      explicit
      ctype ( size_t __refs = 0 ) : __ctype_abstract_base < _CharT > ( __refs ) { }

   protected :
      virtual
      ~ ctype ( );

      virtual bool
      do_is ( mask __m, char_type __c ) const;

      virtual const char_type *
      do_is ( const char_type * __lo, const char_type * __hi, mask * __vec ) const;

      virtual const char_type *
      do_scan_is ( mask __m, const char_type * __lo, const char_type * __hi ) const;

      virtual const char_type *
      do_scan_not ( mask __m, const char_type * __lo,
    const char_type * __hi ) const;

      virtual char_type
      do_toupper ( char_type __c ) const;

      virtual const char_type *
      do_toupper ( char_type * __lo, const char_type * __hi ) const;

      virtual char_type
      do_tolower ( char_type __c ) const;

      virtual const char_type *
      do_tolower ( char_type * __lo, const char_type * __hi ) const;

      virtual char_type
      do_widen ( char __c ) const;

      virtual const char *
      do_widen ( const char * __lo, const char * __hi, char_type * __dest ) const;

      virtual char
      do_narrow ( char_type, char __dfault ) const;

      virtual const char_type *
      do_narrow ( const char_type * __lo, const char_type * __hi,
  char __dfault, char * __dest ) const;
    };
# 663 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _CharT> locale::id
# 664 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
ctype< _CharT> ::id;
# 676 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> class ctype< char> : public locale::facet, public ctype_base {
# 681 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
public: typedef char char_type;
# 685 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
protected: __c_locale _M_c_locale_ctype;
# 686 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
bool _M_del;
# 687 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
__to_type _M_toupper;
# 688 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
__to_type _M_tolower;
# 689 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
const mask *_M_table;
# 690 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
mutable char _M_widen_ok;
# 691 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
mutable char _M_widen[(1 + (static_cast< unsigned char>((-1))))];
# 692 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
mutable char _M_narrow[(1 + (static_cast< unsigned char>((-1))))];
# 693 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
mutable char _M_narrow_ok;
# 698 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
public: static locale::id id;
# 700 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
static const size_t table_size = (1 + (static_cast< unsigned char>((-1))));
# 713 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
explicit ctype(const mask * = 0, bool = false, size_t = (0));
# 726 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
explicit ctype(__c_locale, const mask * = 0, bool = false, size_t = (0));
# 739 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
inline bool is(mask, char) const;
# 754 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
inline const char *is(const char *, const char *, mask *) const;
# 768 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
inline const char *scan_is(mask, const char *, const char *) const;
# 782 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
inline const char *scan_not(mask, const char *, const char *) const;
# 797 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
char_type toupper(char_type __c) const
# 798 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{ return this->do_toupper(__c); }
# 814 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const
# 815 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{ return this->do_toupper(__lo, __hi); }
# 830 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
char_type tolower(char_type __c) const
# 831 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{ return this->do_tolower(__c); }
# 847 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const
# 848 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{ return this->do_tolower(__lo, __hi); }
# 867 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
char_type widen(char __c) const
# 868 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{
# 869 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
if (_M_widen_ok) {
# 870 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
return (_M_widen)[static_cast< unsigned char>(__c)]; }
# 871 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
this->_M_widen_init();
# 872 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
return this->do_widen(__c);
# 873 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
}
# 894 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const
# 895 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{
# 896 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
if ((_M_widen_ok) == 1)
# 897 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{
# 898 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
memcpy(__to, __lo, __hi - __lo);
# 899 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
return __hi;
# 900 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
}
# 901 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
if (!(_M_widen_ok)) {
# 902 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
this->_M_widen_init(); }
# 903 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
return this->do_widen(__lo, __hi, __to);
# 904 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
}
# 925 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const
# 926 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{
# 927 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
if ((_M_narrow)[static_cast< unsigned char>(__c)]) {
# 928 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
return (_M_narrow)[static_cast< unsigned char>(__c)]; }
# 929 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
const char __t = this->do_narrow(__c, __dfault);
# 930 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
if (__t != __dfault) {
# 931 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
((_M_narrow)[static_cast< unsigned char>(__c)]) = __t; }
# 932 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
return __t;
# 933 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
}
# 958 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char
# 959 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
__dfault, char *__to) const
# 960 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{
# 961 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
if (__builtin_expect((_M_narrow_ok) == 1, true))
# 962 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{
# 963 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
memcpy(__to, __lo, __hi - __lo);
# 964 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
return __hi;
# 965 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
}
# 966 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
if (!(_M_narrow_ok)) {
# 967 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
this->_M_narrow_init(); }
# 968 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
return this->do_narrow(__lo, __hi, __dfault, __to);
# 969 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
}
# 975 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
protected: const mask *table() const throw()
# 976 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{ return _M_table; }
# 980 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
static const mask *classic_table() throw();
# 989 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual ~ctype();
# 1005 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type) const;
# 1022 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type *, const char_type *) const;
# 1038 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type) const;
# 1055 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type *, const char_type *) const;
# 1075 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const
# 1076 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{ return __c; }
# 1098 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual const char *do_widen(const char *__lo, const char *__hi, char_type *__dest) const
# 1099 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{
# 1100 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
memcpy(__dest, __lo, __hi - __lo);
# 1101 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
return __hi;
# 1102 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
}
# 1124 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char) const
# 1125 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{ return __c; }
# 1150 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *__lo, const char_type *__hi, char, char *
# 1151 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
__dest) const
# 1152 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{
# 1153 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
memcpy(__dest, __lo, __hi - __lo);
# 1154 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
return __hi;
# 1155 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
}
# 1159 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
private: void _M_widen_init() const
# 1160 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{
# 1161 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
char __tmp[sizeof(_M_widen)];
# 1162 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
for (size_t __i = (0); __i < sizeof(_M_widen); ++__i) {
# 1163 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
((__tmp)[__i]) = __i; }
# 1164 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
this->do_widen(__tmp, (__tmp) + sizeof(__tmp), _M_widen);
# 1166 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
(_M_widen_ok) = (1);
# 1168 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
if (memcmp(__tmp, _M_widen, sizeof(_M_widen))) {
# 1169 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
(_M_widen_ok) = (2); }
# 1170 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
}
# 1175 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
void _M_narrow_init() const
# 1176 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{
# 1177 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
char __tmp[sizeof(_M_narrow)];
# 1178 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
for (size_t __i = (0); __i < sizeof(_M_narrow); ++__i) {
# 1179 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
((__tmp)[__i]) = __i; }
# 1180 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
this->do_narrow(__tmp, (__tmp) + sizeof(__tmp), 0, _M_narrow);
# 1182 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
(_M_narrow_ok) = (1);
# 1183 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
if (memcmp(__tmp, _M_narrow, sizeof(_M_narrow))) {
# 1184 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
(_M_narrow_ok) = (2); } else
# 1186 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
{
# 1189 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
char __c;
# 1190 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
this->do_narrow(__tmp, (__tmp) + 1, 1, &__c);
# 1191 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
if (__c == 1) {
# 1192 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
(_M_narrow_ok) = (2); }
# 1193 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
}
# 1194 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
}
# 1195 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
};
# 1199 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> const ctype< char> &use_facet< ctype< char> > (const locale &);
# 1214 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> class ctype< wchar_t> : public __ctype_abstract_base< wchar_t> {
# 1219 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
public: typedef wchar_t char_type;
# 1220 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
typedef wctype_t __wmask_type;
# 1223 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
protected: __c_locale _M_c_locale_ctype;
# 1226 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
bool _M_narrow_ok;
# 1227 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
char _M_narrow[128];
# 1228 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
wint_t _M_widen[(1 + (static_cast< unsigned char>((-1))))];
# 1231 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
mask _M_bit[16];
# 1232 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
__wmask_type _M_wmask[16];
# 1237 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
public: static locale::id id;
# 1247 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
explicit ctype(size_t = (0));
# 1258 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
explicit ctype(__c_locale, size_t = (0));
# 1262 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
protected: __wmask_type _M_convert_to_wmask(const mask) const;
# 1266 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual ~ctype();
# 1282 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
inline virtual bool do_is(mask, char_type) const;
# 1301 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
inline virtual const char_type *do_is(const char_type *, const char_type *, mask *) const;
# 1319 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
inline virtual const char_type *do_scan_is(mask, const char_type *, const char_type *) const;
# 1337 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
inline virtual const char_type *do_scan_not(mask, const char_type *, const char_type *) const;
# 1354 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type) const;
# 1371 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type *, const char_type *) const;
# 1387 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type) const;
# 1404 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type *, const char_type *) const;
# 1424 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual char_type do_widen(char) const;
# 1446 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual const char *do_widen(const char *, const char *, char_type *) const;
# 1469 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual char do_narrow(char_type, char) const;
# 1495 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *, const char_type *, char, char *) const;
# 1500 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
void _M_initialize_ctype();
# 1501 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
};
# 1505 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> const ctype< wchar_t> &use_facet< ctype< wchar_t> > (const locale &);
# 1509 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    class ctype_byname : public ctype < _CharT >
    {
    public :
      typedef _CharT char_type;

      explicit
      ctype_byname ( const char * __s, size_t __refs = 0 );

    protected :
      virtual
      ~ ctype_byname ( ) { };
    };
# 1525 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> ctype_byname< char> ::ctype_byname(const char *, size_t);
# 1528 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> ctype_byname< wchar_t> ::ctype_byname(const char *, size_t);
# 1530 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
}
# 42 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
namespace std {
# 46 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
inline bool ctype< char> ::is(mask __m, char __c) const
# 47 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
{
# 48 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
if (_M_table) {
# 49 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
return ((_M_table)[static_cast< unsigned char>(__c)]) & __m; } else {
# 51 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
return __istype(__c, __m); }
# 52 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
}
# 56 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
inline const char *ctype< char> ::is(const char *__low, const char *__high, mask *__vec) const
# 57 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
{
# 58 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
if (_M_table) {
# 59 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
while (__low < __high) {
# 60 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
(*(__vec++)) = ((_M_table)[static_cast< unsigned char>((*(__low++)))]); } } else {
# 62 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
for (; __low < __high; (++__vec), (++__low))
# 63 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
{
# 65 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
(*__vec) = (__maskrune(*__low, (((((((((upper | lower) | alpha) | digit) | xdigit) | space) | print) | graph) | cntrl) | punct) | alnum));
# 83 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
} }
# 84 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
return __high;
# 85 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
}
# 89 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
inline const char *ctype< char> ::scan_is(mask __m, const char *__low, const char *__high) const
# 90 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
{
# 91 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
if (_M_table) {
# 92 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
while ((__low < __high) && (!(((_M_table)[static_cast< unsigned char>((*__low))]) & __m))) {
# 94 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
++__low; } } else {
# 96 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
while ((__low < __high) && (!this->is(__m, *__low))) {
# 97 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
++__low; } }
# 98 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
return __low;
# 99 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
}
# 103 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
inline const char *ctype< char> ::scan_not(mask __m, const char *__low, const char *__high) const
# 104 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
{
# 105 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
if (_M_table) {
# 106 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
while ((__low < __high) && ((((_M_table)[static_cast< unsigned char>((*__low))]) & __m) != (0))) {
# 108 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
++__low; } } else {
# 110 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
while ((__low < __high) && ((this->is(__m, *__low)) != 0)) {
# 111 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
++__low; } }
# 112 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
return __low;
# 113 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
}
# 118 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
inline bool ctype< wchar_t> ::do_is(mask __m, wchar_t __c) const
# 119 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
{
# 120 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
return __istype(__c, __m);
# 121 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
}
# 125 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
inline const wchar_t *ctype< wchar_t> ::do_is(const wchar_t *__lo, const wchar_t *__hi, mask *__vec) const
# 126 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
{
# 127 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
for (; __lo < __hi; (++__vec), (++__lo)) {
# 128 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
(*__vec) = (__maskrune(*__lo, (((((((((upper | lower) | alpha) | digit) | xdigit) | space) | print) | graph) | cntrl) | punct) | alnum)); }
# 130 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
return __hi;
# 131 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
}
# 135 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
inline const wchar_t *ctype< wchar_t> ::do_scan_is(mask __m, const wchar_t *__lo, const wchar_t *__hi) const
# 136 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
{
# 137 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
while ((__lo < __hi) && (!(__istype(*__lo, __m)))) {
# 138 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
++__lo; }
# 139 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
return __lo;
# 140 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
}
# 144 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
inline const wchar_t *ctype< wchar_t> ::do_scan_not(mask __m, const char_type *__lo, const char_type *__hi) const
# 145 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
{
# 146 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
while ((__lo < __hi) && (__istype(*__lo, __m))) {
# 147 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
++__lo; }
# 148 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
return __lo;
# 149 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
}
# 152 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/ctype_inline.h" 3
}
# 47 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
namespace std {
# 50 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
class codecvt_base {
# 53 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
public: enum result {
# 55 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
ok,
# 56 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
partial,
# 57 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
error,
# 58 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
noconv
# 59 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
};
# 60 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
};
# 71 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
template < typename _InternT, typename _ExternT, typename _StateT >
    class __codecvt_abstract_base
    : public locale :: facet, public codecvt_base
    {
    public :

      typedef codecvt_base :: result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;
# 119 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
      result
      out ( state_type & __state, const intern_type * __from,
   const intern_type * __from_end, const intern_type * & __from_next,
   extern_type * __to, extern_type * __to_end,
   extern_type * & __to_next ) const
      {
 return this -> do_out ( __state, __from, __from_end, __from_next,
       __to, __to_end, __to_next );
      }
# 158 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
      result
      unshift ( state_type & __state, extern_type * __to, extern_type * __to_end,
       extern_type * & __to_next ) const
      { return this -> do_unshift ( __state, __to, __to_end, __to_next ); }
# 199 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
      result
      in ( state_type & __state, const extern_type * __from,
  const extern_type * __from_end, const extern_type * & __from_next,
  intern_type * __to, intern_type * __to_end,
  intern_type * & __to_next ) const
      {
 return this -> do_in ( __state, __from, __from_end, __from_next,
      __to, __to_end, __to_next );
      }

      int
      encoding ( ) const throw ( )
      { return this -> do_encoding ( ); }

      bool
      always_noconv ( ) const throw ( )
      { return this -> do_always_noconv ( ); }

      int
      length ( state_type & __state, const extern_type * __from,
      const extern_type * __end, size_t __max ) const
      { return this -> do_length ( __state, __from, __end, __max ); }

      int
      max_length ( ) const throw ( )
      { return this -> do_max_length ( ); }

    protected :
      explicit
      __codecvt_abstract_base ( size_t __refs = 0 ) : locale :: facet ( __refs ) { }

      virtual
      ~ __codecvt_abstract_base ( ) { }
# 240 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
      virtual result
      do_out ( state_type & __state, const intern_type * __from,
      const intern_type * __from_end, const intern_type * & __from_next,
      extern_type * __to, extern_type * __to_end,
      extern_type * & __to_next ) const = 0;

      virtual result
      do_unshift ( state_type & __state, extern_type * __to,
   extern_type * __to_end, extern_type * & __to_next ) const = 0;

      virtual result
      do_in ( state_type & __state, const extern_type * __from,
     const extern_type * __from_end, const extern_type * & __from_next,
     intern_type * __to, intern_type * __to_end,
     intern_type * & __to_next ) const = 0;

      virtual int
      do_encoding ( ) const throw ( ) = 0;

      virtual bool
      do_always_noconv ( ) const throw ( ) = 0;

      virtual int
      do_length ( state_type &, const extern_type * __from,
  const extern_type * __end, size_t __max ) const = 0;

      virtual int
      do_max_length ( ) const throw ( ) = 0;
    };
# 272 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
template < typename _InternT, typename _ExternT, typename _StateT >
    class codecvt
    : public __codecvt_abstract_base < _InternT, _ExternT, _StateT >
    {
    public :

      typedef codecvt_base :: result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected :
      __c_locale _M_c_locale_codecvt;

    public :
      static locale :: id id;

      explicit
      codecvt ( size_t __refs = 0 )
      : __codecvt_abstract_base < _InternT, _ExternT, _StateT > ( __refs ) { }

      explicit
      codecvt ( __c_locale __cloc, size_t __refs = 0 );

    protected :
      virtual
      ~ codecvt ( ) { }

      virtual result
      do_out ( state_type & __state, const intern_type * __from,
      const intern_type * __from_end, const intern_type * & __from_next,
      extern_type * __to, extern_type * __to_end,
      extern_type * & __to_next ) const;

      virtual result
      do_unshift ( state_type & __state, extern_type * __to,
   extern_type * __to_end, extern_type * & __to_next ) const;

      virtual result
      do_in ( state_type & __state, const extern_type * __from,
     const extern_type * __from_end, const extern_type * & __from_next,
     intern_type * __to, intern_type * __to_end,
     intern_type * & __to_next ) const;

      virtual int
      do_encoding ( ) const throw ( );

      virtual bool
      do_always_noconv ( ) const throw ( );

      virtual int
      do_length ( state_type &, const extern_type * __from,
  const extern_type * __end, size_t __max ) const;

      virtual int
      do_max_length ( ) const throw ( );
    };
# 330 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
template< class _InternT, class _ExternT, class _StateT> locale::id
# 331 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
codecvt< _InternT, _ExternT, _StateT> ::id;
# 335 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
template<> class codecvt< char, char, __mbstate_t> : public __codecvt_abstract_base< char, char, __mbstate_t> {
# 340 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
public: typedef char intern_type;
# 341 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
typedef char extern_type;
# 342 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
typedef mbstate_t state_type;
# 345 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
protected: __c_locale _M_c_locale_codecvt;
# 348 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
public: static locale::id id;
# 351 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
explicit codecvt(size_t = (0));
# 354 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
explicit codecvt(__c_locale, size_t = (0));
# 358 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
protected: virtual ~codecvt();
# 361 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
virtual result do_out(state_type &, const intern_type *, const intern_type *, const intern_type *&, extern_type *, extern_type *, extern_type *&) const;
# 367 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
virtual result do_unshift(state_type &, extern_type *, extern_type *, extern_type *&) const;
# 371 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
virtual result do_in(state_type &, const extern_type *, const extern_type *, const extern_type *&, intern_type *, intern_type *, intern_type *&) const;
# 377 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
virtual int do_encoding() const throw();
# 380 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
virtual bool do_always_noconv() const throw();
# 383 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
virtual int do_length(state_type &, const extern_type *, const extern_type *, size_t) const;
# 387 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
virtual int do_max_length() const throw();
# 388 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
};
# 393 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
template<> class codecvt< wchar_t, char, __mbstate_t> : public __codecvt_abstract_base< wchar_t, char, __mbstate_t> {
# 398 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
public: typedef wchar_t intern_type;
# 399 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
typedef char extern_type;
# 400 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
typedef mbstate_t state_type;
# 403 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
protected: __c_locale _M_c_locale_codecvt;
# 406 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
public: static locale::id id;
# 409 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
explicit codecvt(size_t = (0));
# 412 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
explicit codecvt(__c_locale, size_t = (0));
# 416 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
protected: virtual ~codecvt();
# 419 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
virtual result do_out(state_type &, const intern_type *, const intern_type *, const intern_type *&, extern_type *, extern_type *, extern_type *&) const;
# 425 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
virtual result do_unshift(state_type &, extern_type *, extern_type *, extern_type *&) const;
# 430 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
virtual result do_in(state_type &, const extern_type *, const extern_type *, const extern_type *&, intern_type *, intern_type *, intern_type *&) const;
# 437 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
virtual int do_encoding() const throw();
# 440 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
virtual bool do_always_noconv() const throw();
# 443 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
virtual int do_length(state_type &, const extern_type *, const extern_type *, size_t) const;
# 447 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
virtual int do_max_length() const throw();
# 448 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
};
# 452 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
template < typename _InternT, typename _ExternT, typename _StateT >
    class codecvt_byname : public codecvt < _InternT, _ExternT, _StateT >
    {
    public :
      explicit
      codecvt_byname ( const char * __s, size_t __refs = 0 )
      : codecvt < _InternT, _ExternT, _StateT > ( __refs )
      {
 if ( std :: strcmp ( __s, "C" ) != 0 && std :: strcmp ( __s, "POSIX" ) != 0 )
   {
     this -> _S_destroy_c_locale ( this -> _M_c_locale_codecvt );
     this -> _S_create_c_locale ( this -> _M_c_locale_codecvt, __s );
   }
      }

    protected :
      virtual
      ~ codecvt_byname ( ) { }
    };
# 472 "/usr/include/c++/4.2.1/bits/codecvt.h" 3
}
# 1538 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
namespace std {
# 1541 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
class __num_base {
# 1547 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
public: enum {
# 1548 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_ominus,
# 1549 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_oplus,
# 1550 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_ox,
# 1551 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_oX,
# 1552 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_odigits,
# 1553 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_odigits_end = 20,
# 1554 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_oudigits = 20,
# 1555 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_oudigits_end = 36,
# 1556 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_oe = 18,
# 1557 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_oE = 34,
# 1558 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_oend = 36
# 1559 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
};
# 1566 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
static const char *_S_atoms_out;
# 1570 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
static const char *_S_atoms_in;
# 1573 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
enum {
# 1574 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_iminus,
# 1575 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_iplus,
# 1576 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_ix,
# 1577 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_iX,
# 1578 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_izero,
# 1579 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_ie = 18,
# 1580 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_iE = 24,
# 1581 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_iend = 26
# 1582 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
};
# 1587 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
static void _S_format_float(const ios_base &, char *, char);
# 1588 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
};
# 1590 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    struct __numpunct_cache : public locale :: facet
    {
      const char * _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT * _M_truename;
      size_t _M_truename_size;
      const _CharT * _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out [ __num_base :: _S_oend ];





      _CharT _M_atoms_in [ __num_base :: _S_iend ];

      bool _M_allocated;

      __numpunct_cache ( size_t __refs = 0 ) : facet ( __refs ),
      _M_grouping ( __null ), _M_grouping_size ( 0 ), _M_use_grouping ( false ),
      _M_truename ( __null ), _M_truename_size ( 0 ), _M_falsename ( __null ),
      _M_falsename_size ( 0 ), _M_decimal_point ( _CharT ( ) ),
      _M_thousands_sep ( _CharT ( ) ), _M_allocated ( false )
      { }

      ~ __numpunct_cache ( );

      void
      _M_cache ( const locale & __loc );

    private :
      __numpunct_cache &
      operator = ( const __numpunct_cache & );

      explicit
      __numpunct_cache ( const __numpunct_cache & );
    };
# 1637 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    __numpunct_cache < _CharT > :: ~ __numpunct_cache ( )
    {
      if ( _M_allocated )
 {
   delete [ ] _M_grouping;
   delete [ ] _M_truename;
   delete [ ] _M_falsename;
 }
    }
# 1661 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    class numpunct : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;

      typedef __numpunct_cache < _CharT > __cache_type;

    protected :
      __cache_type * _M_data;

    public :

      static locale :: id id;






      explicit
      numpunct ( size_t __refs = 0 ) : facet ( __refs ), _M_data ( __null )
      { _M_initialize_numpunct ( ); }
# 1698 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      explicit
      numpunct ( __cache_type * __cache, size_t __refs = 0 )
      : facet ( __refs ), _M_data ( __cache )
      { _M_initialize_numpunct ( ); }
# 1712 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      explicit
      numpunct ( __c_locale __cloc, size_t __refs = 0 )
      : facet ( __refs ), _M_data ( __null )
      { _M_initialize_numpunct ( __cloc ); }
# 1726 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      char_type
      decimal_point ( ) const
      { return this -> do_decimal_point ( ); }
# 1739 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      char_type
      thousands_sep ( ) const
      { return this -> do_thousands_sep ( ); }
# 1770 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      string
      grouping ( ) const
      { return this -> do_grouping ( ); }
# 1783 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      string_type
      truename ( ) const
      { return this -> do_truename ( ); }
# 1796 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      string_type
      falsename ( ) const
      { return this -> do_falsename ( ); }

    protected :

      virtual
      ~ numpunct ( );
# 1813 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point ( ) const
      { return _M_data -> _M_decimal_point; }
# 1825 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep ( ) const
      { return _M_data -> _M_thousands_sep; }
# 1838 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual string
      do_grouping ( ) const
      { return _M_data -> _M_grouping; }
# 1851 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual string_type
      do_truename ( ) const
      { return _M_data -> _M_truename; }
# 1864 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual string_type
      do_falsename ( ) const
      { return _M_data -> _M_falsename; }


      void
      _M_initialize_numpunct ( __c_locale __cloc = __null );
    };
# 1873 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _CharT> locale::id
# 1874 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
numpunct< _CharT> ::id;
# 1877 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> numpunct< char> ::~numpunct();
# 1881 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> void numpunct< char> ::_M_initialize_numpunct(__c_locale);
# 1885 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> numpunct< wchar_t> ::~numpunct();
# 1889 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> void numpunct< wchar_t> ::_M_initialize_numpunct(__c_locale);
# 1893 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    class numpunct_byname : public numpunct < _CharT >
    {
    public :
      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;

      explicit
      numpunct_byname ( const char * __s, size_t __refs = 0 )
      : numpunct < _CharT > ( __refs )
      {
 if ( std :: strcmp ( __s, "C" ) != 0 && std :: strcmp ( __s, "POSIX" ) != 0 )
   {
     __c_locale __tmp;
     this -> _S_create_c_locale ( __tmp, __s );
     this -> _M_initialize_numpunct ( __tmp );
     this -> _S_destroy_c_locale ( __tmp );
   }
      }

    protected :
      virtual
      ~ numpunct_byname ( ) { }
    };
# 1931 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT, typename _InIter >
    class num_get : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale :: id id;
# 1952 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      explicit
      num_get ( size_t __refs = 0 ) : facet ( __refs ) { }
# 1978 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, bool & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }
# 2014 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned short & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned int & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }


      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, long long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, unsigned long long & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }
# 2073 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, float & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, double & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, long double & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }
# 2115 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      get ( iter_type __in, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, void * & __v ) const
      { return this -> do_get ( __in, __end, __io, __err, __v ); }

    protected :

      virtual ~ num_get ( ) { }

      iter_type
      _M_extract_float ( iter_type, iter_type, ios_base &, ios_base :: iostate &,
         string & __xtrc ) const;

      template < typename _ValueT >
        iter_type
        _M_extract_int ( iter_type, iter_type, ios_base &, ios_base :: iostate &,
         _ValueT & __v ) const;

      template < typename _CharT2 >
      typename __gnu_cxx :: __enable_if < __is_char < _CharT2 > :: __value, int > :: __type
        _M_find ( const _CharT2 *, size_t __len, _CharT2 __c ) const
        {
   int __ret = - 1;
   if ( __len <= 10 )
     {
       if ( __c >= _CharT2 ( '0' ) && __c < _CharT2 ( _CharT2 ( '0' ) + __len ) )
  __ret = __c - _CharT2 ( '0' );
     }
   else
     {
       if ( __c >= _CharT2 ( '0' ) && __c <= _CharT2 ( '9' ) )
  __ret = __c - _CharT2 ( '0' );
       else if ( __c >= _CharT2 ( 'a' ) && __c <= _CharT2 ( 'f' ) )
  __ret = 10 + ( __c - _CharT2 ( 'a' ) );
       else if ( __c >= _CharT2 ( 'A' ) && __c <= _CharT2 ( 'F' ) )
  __ret = 10 + ( __c - _CharT2 ( 'A' ) );
     }
   return __ret;
 }

      template < typename _CharT2 >
      typename __gnu_cxx :: __enable_if < ! __is_char < _CharT2 > :: __value,
          int > :: __type
        _M_find ( const _CharT2 * __zero, size_t __len, _CharT2 __c ) const
        {
   int __ret = - 1;
   const char_type * __q = char_traits < _CharT2 > :: find ( __zero, __len, __c );
   if ( __q )
     {
       __ret = __q - __zero;
       if ( __ret > 15 )
  __ret -= 6;
     }
   return __ret;
 }
# 2186 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate &, bool & ) const;


      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate &, long & ) const;

      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
       unsigned short & ) const;

      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      unsigned int & ) const;

      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      unsigned long & ) const;


      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      long long & ) const;

      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      unsigned long long & ) const;


      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      float & ) const;

      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      double & ) const;







      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      long double & ) const;


      virtual iter_type
      do_get ( iter_type, iter_type, ios_base &, ios_base :: iostate & __err,
      void * & ) const;
# 2245 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
    };
# 2247 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _CharT, class _InIter> locale::id
# 2248 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
num_get< _CharT, _InIter> ::id;
# 2262 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT, typename _OutIter >
    class num_put : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale :: id id;
# 2283 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      explicit
      num_put ( size_t __refs = 0 ) : facet ( __refs ) { }
# 2301 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, bool __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }
# 2343 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   unsigned long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }


      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, long long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   unsigned long long __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }
# 2406 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill, double __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   long double __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }
# 2431 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      put ( iter_type __s, ios_base & __f, char_type __fill,
   const void * __v ) const
      { return this -> do_put ( __s, __f, __fill, __v ); }

    protected :
      template < typename _ValueT >
        iter_type
        _M_insert_float ( iter_type, ios_base & __io, char_type __fill,
   char __mod, _ValueT __v ) const;

      void
      _M_group_float ( const char * __grouping, size_t __grouping_size,
       char_type __sep, const char_type * __p, char_type * __new,
       char_type * __cs, int & __len ) const;

      template < typename _ValueT >
        iter_type
        _M_insert_int ( iter_type, ios_base & __io, char_type __fill,
        _ValueT __v ) const;

      void
      _M_group_int ( const char * __grouping, size_t __grouping_size,
     char_type __sep, ios_base & __io, char_type * __new,
     char_type * __cs, int & __len ) const;

      void
      _M_pad ( char_type __fill, streamsize __w, ios_base & __io,
      char_type * __new, const char_type * __cs, int & __len ) const;


      virtual
      ~ num_put ( ) { };
# 2479 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, bool __v ) const;

      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, long __v ) const;

      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, unsigned long ) const;


      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, long long __v ) const;

      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, unsigned long long ) const;


      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, double __v ) const;






      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, long double __v ) const;


      virtual iter_type
      do_put ( iter_type, ios_base &, char_type __fill, const void * __v ) const;







    };
# 2519 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _CharT, class _OutIter> locale::id
# 2520 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
num_put< _CharT, _OutIter> ::id;
# 2536 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    class collate : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;


    protected :


      __c_locale _M_c_locale_collate;

    public :

      static locale :: id id;
# 2563 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      explicit
      collate ( size_t __refs = 0 )
      : facet ( __refs ), _M_c_locale_collate ( _S_get_c_locale ( ) )
      { }
# 2577 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      explicit
      collate ( __c_locale __cloc, size_t __refs = 0 )
      : facet ( __refs ), _M_c_locale_collate ( _S_clone_c_locale ( __cloc ) )
      { }
# 2594 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      int
      compare ( const _CharT * __lo1, const _CharT * __hi1,
       const _CharT * __lo2, const _CharT * __hi2 ) const
      { return this -> do_compare ( __lo1, __hi1, __lo2, __hi2 ); }
# 2613 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      string_type
      transform ( const _CharT * __lo, const _CharT * __hi ) const
      { return this -> do_transform ( __lo, __hi ); }
# 2627 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      long
      hash ( const _CharT * __lo, const _CharT * __hi ) const
      { return this -> do_hash ( __lo, __hi ); }


      int
      _M_compare ( const _CharT *, const _CharT * ) const;

      size_t
      _M_transform ( _CharT *, const _CharT *, size_t ) const;

  protected :

      virtual
      ~ collate ( )
      { _S_destroy_c_locale ( _M_c_locale_collate ); }
# 2656 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual int
      do_compare ( const _CharT * __lo1, const _CharT * __hi1,
   const _CharT * __lo2, const _CharT * __hi2 ) const;
# 2672 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual string_type
      do_transform ( const _CharT * __lo, const _CharT * __hi ) const;
# 2685 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual long
      do_hash ( const _CharT * __lo, const _CharT * __hi ) const;
    };
# 2689 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _CharT> locale::id
# 2690 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
collate< _CharT> ::id;
# 2695 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> int collate< char> ::_M_compare(const char *, const char *) const;
# 2699 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> size_t collate< char> ::_M_transform(char *, const char *, size_t) const;
# 2704 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> int collate< wchar_t> ::_M_compare(const wchar_t *, const wchar_t *) const;
# 2708 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> size_t collate< wchar_t> ::_M_transform(wchar_t *, const wchar_t *, size_t) const;
# 2712 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    class collate_byname : public collate < _CharT >
    {
    public :


      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;


      explicit
      collate_byname ( const char * __s, size_t __refs = 0 )
      : collate < _CharT > ( __refs )
      {
 if ( std :: strcmp ( __s, "C" ) != 0 && std :: strcmp ( __s, "POSIX" ) != 0 )
   {
     this -> _S_destroy_c_locale ( this -> _M_c_locale_collate );
     this -> _S_create_c_locale ( this -> _M_c_locale_collate, __s );
   }
      }

    protected :
      virtual
      ~ collate_byname ( ) { }
    };
# 2745 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
class time_base {
# 2748 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
public: enum dateorder { no_order, dmy, mdy, ymd, ydm};
# 2749 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
};
# 2751 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    struct __timepunct_cache : public locale :: facet
    {

      static const _CharT * _S_timezones [ 14 ];

      const _CharT * _M_date_format;
      const _CharT * _M_date_era_format;
      const _CharT * _M_time_format;
      const _CharT * _M_time_era_format;
      const _CharT * _M_date_time_format;
      const _CharT * _M_date_time_era_format;
      const _CharT * _M_am;
      const _CharT * _M_pm;
      const _CharT * _M_am_pm_format;


      const _CharT * _M_day1;
      const _CharT * _M_day2;
      const _CharT * _M_day3;
      const _CharT * _M_day4;
      const _CharT * _M_day5;
      const _CharT * _M_day6;
      const _CharT * _M_day7;


      const _CharT * _M_aday1;
      const _CharT * _M_aday2;
      const _CharT * _M_aday3;
      const _CharT * _M_aday4;
      const _CharT * _M_aday5;
      const _CharT * _M_aday6;
      const _CharT * _M_aday7;


      const _CharT * _M_month01;
      const _CharT * _M_month02;
      const _CharT * _M_month03;
      const _CharT * _M_month04;
      const _CharT * _M_month05;
      const _CharT * _M_month06;
      const _CharT * _M_month07;
      const _CharT * _M_month08;
      const _CharT * _M_month09;
      const _CharT * _M_month10;
      const _CharT * _M_month11;
      const _CharT * _M_month12;


      const _CharT * _M_amonth01;
      const _CharT * _M_amonth02;
      const _CharT * _M_amonth03;
      const _CharT * _M_amonth04;
      const _CharT * _M_amonth05;
      const _CharT * _M_amonth06;
      const _CharT * _M_amonth07;
      const _CharT * _M_amonth08;
      const _CharT * _M_amonth09;
      const _CharT * _M_amonth10;
      const _CharT * _M_amonth11;
      const _CharT * _M_amonth12;

      bool _M_allocated;

      __timepunct_cache ( size_t __refs = 0 ) : facet ( __refs ),
      _M_date_format ( __null ), _M_date_era_format ( __null ), _M_time_format ( __null ),
      _M_time_era_format ( __null ), _M_date_time_format ( __null ),
      _M_date_time_era_format ( __null ), _M_am ( __null ), _M_pm ( __null ),
      _M_am_pm_format ( __null ), _M_day1 ( __null ), _M_day2 ( __null ), _M_day3 ( __null ),
      _M_day4 ( __null ), _M_day5 ( __null ), _M_day6 ( __null ), _M_day7 ( __null ),
      _M_aday1 ( __null ), _M_aday2 ( __null ), _M_aday3 ( __null ), _M_aday4 ( __null ),
      _M_aday5 ( __null ), _M_aday6 ( __null ), _M_aday7 ( __null ), _M_month01 ( __null ),
      _M_month02 ( __null ), _M_month03 ( __null ), _M_month04 ( __null ), _M_month05 ( __null ),
      _M_month06 ( __null ), _M_month07 ( __null ), _M_month08 ( __null ), _M_month09 ( __null ),
      _M_month10 ( __null ), _M_month11 ( __null ), _M_month12 ( __null ), _M_amonth01 ( __null ),
      _M_amonth02 ( __null ), _M_amonth03 ( __null ), _M_amonth04 ( __null ),
      _M_amonth05 ( __null ), _M_amonth06 ( __null ), _M_amonth07 ( __null ),
      _M_amonth08 ( __null ), _M_amonth09 ( __null ), _M_amonth10 ( __null ),
      _M_amonth11 ( __null ), _M_amonth12 ( __null ), _M_allocated ( false )
      { }

      ~ __timepunct_cache ( );

      void
      _M_cache ( const locale & __loc );

    private :
      __timepunct_cache &
      operator = ( const __timepunct_cache & );

      explicit
      __timepunct_cache ( const __timepunct_cache & );
    };
# 2845 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    __timepunct_cache < _CharT > :: ~ __timepunct_cache ( )
    {
      if ( _M_allocated )
 {

 }
    }
# 2857 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> const char *__timepunct_cache< char> ::_S_timezones[14];
# 2862 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> const wchar_t *__timepunct_cache< wchar_t> ::_S_timezones[14];
# 2866 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _CharT> const _CharT *
# 2867 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
__timepunct_cache< _CharT> ::_S_timezones[14];
# 2869 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    class __timepunct : public locale :: facet
    {
    public :

      typedef _CharT __char_type;
      typedef basic_string < _CharT > __string_type;
      typedef __timepunct_cache < _CharT > __cache_type;

    protected :
      __cache_type * _M_data;
      __c_locale _M_c_locale_timepunct;
      const char * _M_name_timepunct;

    public :

      static locale :: id id;

      explicit
      __timepunct ( size_t __refs = 0 );

      explicit
      __timepunct ( __cache_type * __cache, size_t __refs = 0 );
# 2903 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      explicit
      __timepunct ( __c_locale __cloc, const char * __s, size_t __refs = 0 );



      void
      _M_put ( _CharT * __s, size_t __maxlen, const _CharT * __format,
      const tm * __tm ) const;

      void
      _M_date_formats ( const _CharT * * __date ) const
      {

 __date [ 0 ] = _M_data -> _M_date_format;
 __date [ 1 ] = _M_data -> _M_date_era_format;
      }

      void
      _M_time_formats ( const _CharT * * __time ) const
      {

 __time [ 0 ] = _M_data -> _M_time_format;
 __time [ 1 ] = _M_data -> _M_time_era_format;
      }

      void
      _M_date_time_formats ( const _CharT * * __dt ) const
      {

 __dt [ 0 ] = _M_data -> _M_date_time_format;
 __dt [ 1 ] = _M_data -> _M_date_time_era_format;
      }

      void
      _M_am_pm_format ( const _CharT * __ampm ) const
      { __ampm = _M_data -> _M_am_pm_format; }

      void
      _M_am_pm ( const _CharT * * __ampm ) const
      {
 __ampm [ 0 ] = _M_data -> _M_am;
 __ampm [ 1 ] = _M_data -> _M_pm;
      }

      void
      _M_days ( const _CharT * * __days ) const
      {
 __days [ 0 ] = _M_data -> _M_day1;
 __days [ 1 ] = _M_data -> _M_day2;
 __days [ 2 ] = _M_data -> _M_day3;
 __days [ 3 ] = _M_data -> _M_day4;
 __days [ 4 ] = _M_data -> _M_day5;
 __days [ 5 ] = _M_data -> _M_day6;
 __days [ 6 ] = _M_data -> _M_day7;
      }

      void
      _M_days_abbreviated ( const _CharT * * __days ) const
      {
 __days [ 0 ] = _M_data -> _M_aday1;
 __days [ 1 ] = _M_data -> _M_aday2;
 __days [ 2 ] = _M_data -> _M_aday3;
 __days [ 3 ] = _M_data -> _M_aday4;
 __days [ 4 ] = _M_data -> _M_aday5;
 __days [ 5 ] = _M_data -> _M_aday6;
 __days [ 6 ] = _M_data -> _M_aday7;
      }

      void
      _M_months ( const _CharT * * __months ) const
      {
 __months [ 0 ] = _M_data -> _M_month01;
 __months [ 1 ] = _M_data -> _M_month02;
 __months [ 2 ] = _M_data -> _M_month03;
 __months [ 3 ] = _M_data -> _M_month04;
 __months [ 4 ] = _M_data -> _M_month05;
 __months [ 5 ] = _M_data -> _M_month06;
 __months [ 6 ] = _M_data -> _M_month07;
 __months [ 7 ] = _M_data -> _M_month08;
 __months [ 8 ] = _M_data -> _M_month09;
 __months [ 9 ] = _M_data -> _M_month10;
 __months [ 10 ] = _M_data -> _M_month11;
 __months [ 11 ] = _M_data -> _M_month12;
      }

      void
      _M_months_abbreviated ( const _CharT * * __months ) const
      {
 __months [ 0 ] = _M_data -> _M_amonth01;
 __months [ 1 ] = _M_data -> _M_amonth02;
 __months [ 2 ] = _M_data -> _M_amonth03;
 __months [ 3 ] = _M_data -> _M_amonth04;
 __months [ 4 ] = _M_data -> _M_amonth05;
 __months [ 5 ] = _M_data -> _M_amonth06;
 __months [ 6 ] = _M_data -> _M_amonth07;
 __months [ 7 ] = _M_data -> _M_amonth08;
 __months [ 8 ] = _M_data -> _M_amonth09;
 __months [ 9 ] = _M_data -> _M_amonth10;
 __months [ 10 ] = _M_data -> _M_amonth11;
 __months [ 11 ] = _M_data -> _M_amonth12;
      }

    protected :
      virtual
      ~ __timepunct ( );


      void
      _M_initialize_timepunct ( __c_locale __cloc = __null );
    };
# 3014 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _CharT> locale::id
# 3015 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
__timepunct< _CharT> ::id;
# 3020 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> void __timepunct< char> ::_M_initialize_timepunct(__c_locale);
# 3024 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> void __timepunct< char> ::_M_put(char *, size_t, const char *, const tm *) const;
# 3029 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> void __timepunct< wchar_t> ::_M_initialize_timepunct(__c_locale);
# 3033 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> void __timepunct< wchar_t> ::_M_put(wchar_t *, size_t, const wchar_t *, const tm *) const;
# 3037 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
}
# 42 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/time_members.h" 3
namespace std {
# 44 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/time_members.h" 3
template < typename _CharT >
    __timepunct < _CharT > :: __timepunct ( size_t __refs )
    : facet ( __refs ), _M_data ( __null )
    {
      _M_name_timepunct = _S_get_c_name ( );
      _M_initialize_timepunct ( );
    }
# 52 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/time_members.h" 3
template < typename _CharT >
    __timepunct < _CharT > :: __timepunct ( __cache_type * __cache, size_t __refs )
    : facet ( __refs ), _M_data ( __cache )
    {
      _M_name_timepunct = _S_get_c_name ( );
      _M_initialize_timepunct ( );
    }
# 60 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/time_members.h" 3
template < typename _CharT >
    __timepunct < _CharT > :: __timepunct ( __c_locale __cloc, const char * __s,
         size_t __refs )
    : facet ( __refs ), _M_data ( __null )
    {
      const size_t __len = std :: strlen ( __s ) + 1;
      char * __tmp = new char [ __len ];
      std :: memcpy ( __tmp, __s, __len );
      _M_name_timepunct = __tmp;

      try
 { _M_initialize_timepunct ( __cloc ); }
      catch ( ... )
 {
   delete [ ] _M_name_timepunct;
   throw;
 }
    }
# 79 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/time_members.h" 3
template < typename _CharT >
    __timepunct < _CharT > :: ~ __timepunct ( )
    {
      if ( _M_name_timepunct != _S_get_c_name ( ) )
 delete [ ] _M_name_timepunct;
      delete _M_data;
      _S_destroy_c_locale ( _M_c_locale_timepunct );
    }
# 88 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/time_members.h" 3
}
# 3042 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
namespace std {
# 3056 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT, typename _InIter >
    class time_get : public locale :: facet, public time_base
    {
    public :



      typedef _CharT char_type;
      typedef _InIter iter_type;

      typedef basic_string < _CharT > __string_type;


      static locale :: id id;
# 3078 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      explicit
      time_get ( size_t __refs = 0 )
      : facet ( __refs ) { }
# 3095 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      dateorder
      date_order ( ) const
      { return this -> do_date_order ( ); }
# 3119 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      get_time ( iter_type __beg, iter_type __end, ios_base & __io,
        ios_base :: iostate & __err, tm * __tm ) const
      { return this -> do_get_time ( __beg, __end, __io, __err, __tm ); }
# 3144 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      get_date ( iter_type __beg, iter_type __end, ios_base & __io,
        ios_base :: iostate & __err, tm * __tm ) const
      { return this -> do_get_date ( __beg, __end, __io, __err, __tm ); }
# 3172 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      get_weekday ( iter_type __beg, iter_type __end, ios_base & __io,
    ios_base :: iostate & __err, tm * __tm ) const
      { return this -> do_get_weekday ( __beg, __end, __io, __err, __tm ); }
# 3201 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      get_monthname ( iter_type __beg, iter_type __end, ios_base & __io,
      ios_base :: iostate & __err, tm * __tm ) const
      { return this -> do_get_monthname ( __beg, __end, __io, __err, __tm ); }
# 3227 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      get_year ( iter_type __beg, iter_type __end, ios_base & __io,
        ios_base :: iostate & __err, tm * __tm ) const
      { return this -> do_get_year ( __beg, __end, __io, __err, __tm ); }

    protected :

      virtual
      ~ time_get ( ) { }
# 3247 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual dateorder
      do_date_order ( ) const;
# 3265 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual iter_type
      do_get_time ( iter_type __beg, iter_type __end, ios_base & __io,
    ios_base :: iostate & __err, tm * __tm ) const;
# 3284 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual iter_type
      do_get_date ( iter_type __beg, iter_type __end, ios_base & __io,
    ios_base :: iostate & __err, tm * __tm ) const;
# 3303 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual iter_type
      do_get_weekday ( iter_type __beg, iter_type __end, ios_base &,
       ios_base :: iostate & __err, tm * __tm ) const;
# 3322 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual iter_type
      do_get_monthname ( iter_type __beg, iter_type __end, ios_base &,
         ios_base :: iostate & __err, tm * __tm ) const;
# 3341 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual iter_type
      do_get_year ( iter_type __beg, iter_type __end, ios_base & __io,
    ios_base :: iostate & __err, tm * __tm ) const;


      iter_type
      _M_extract_num ( iter_type __beg, iter_type __end, int & __member,
       int __min, int __max, size_t __len,
       ios_base & __io, ios_base :: iostate & __err ) const;



      iter_type
      _M_extract_name ( iter_type __beg, iter_type __end, int & __member,
        const _CharT * * __names, size_t __indexlen,
        ios_base & __io, ios_base :: iostate & __err ) const;


      iter_type
      _M_extract_via_format ( iter_type __beg, iter_type __end, ios_base & __io,
       ios_base :: iostate & __err, tm * __tm,
       const _CharT * __format ) const;
    };
# 3365 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _CharT, class _InIter> locale::id
# 3366 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
time_get< _CharT, _InIter> ::id;
# 3369 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT, typename _InIter >
    class time_get_byname : public time_get < _CharT, _InIter >
    {
    public :

      typedef _CharT char_type;
      typedef _InIter iter_type;

      explicit
      time_get_byname ( const char *, size_t __refs = 0 )
      : time_get < _CharT, _InIter > ( __refs ) { }

    protected :
      virtual
      ~ time_get_byname ( ) { }
    };
# 3397 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT, typename _OutIter >
    class time_put : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale :: id id;
# 3418 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      explicit
      time_put ( size_t __refs = 0 )
      : facet ( __refs ) { }
# 3437 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      put ( iter_type __s, ios_base & __io, char_type __fill, const tm * __tm,
   const _CharT * __beg, const _CharT * __end ) const;
# 3457 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      put ( iter_type __s, ios_base & __io, char_type __fill,
   const tm * __tm, char __format, char __mod = 0 ) const
      { return this -> do_put ( __s, __io, __fill, __tm, __format, __mod ); }

    protected :

      virtual
      ~ time_put ( )
      { }
# 3484 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual iter_type
      do_put ( iter_type __s, ios_base & __io, char_type __fill, const tm * __tm,
      char __format, char __mod ) const;
    };
# 3489 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _CharT, class _OutIter> locale::id
# 3490 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
time_put< _CharT, _OutIter> ::id;
# 3493 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT, typename _OutIter >
    class time_put_byname : public time_put < _CharT, _OutIter >
    {
    public :

      typedef _CharT char_type;
      typedef _OutIter iter_type;

      explicit
      time_put_byname ( const char *, size_t __refs = 0 )
      : time_put < _CharT, _OutIter > ( __refs )
      { };

    protected :
      virtual
      ~ time_put_byname ( ) { }
    };
# 3522 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
class money_base {
# 3525 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
public: enum part { none, space, symbol, sign, value};
# 3526 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
struct pattern { char field[4]; };
# 3528 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
static const pattern _S_default_pattern;
# 3531 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
enum {
# 3532 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_minus,
# 3533 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_zero,
# 3534 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
_S_end = 11
# 3535 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
};
# 3539 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
static const char *_S_atoms;
# 3544 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
static pattern _S_construct_pattern(char, char, char);
# 3545 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
};
# 3547 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT, bool _Intl >
    struct __moneypunct_cache : public locale :: facet
    {
      const char * _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;
      const _CharT * _M_curr_symbol;
      size_t _M_curr_symbol_size;
      const _CharT * _M_positive_sign;
      size_t _M_positive_sign_size;
      const _CharT * _M_negative_sign;
      size_t _M_negative_sign_size;
      int _M_frac_digits;
      money_base :: pattern _M_pos_format;
      money_base :: pattern _M_neg_format;




      _CharT _M_atoms [ money_base :: _S_end ];

      bool _M_allocated;

      __moneypunct_cache ( size_t __refs = 0 ) : facet ( __refs ),
      _M_grouping ( __null ), _M_grouping_size ( 0 ), _M_use_grouping ( false ),
      _M_decimal_point ( _CharT ( ) ), _M_thousands_sep ( _CharT ( ) ),
      _M_curr_symbol ( __null ), _M_curr_symbol_size ( 0 ),
      _M_positive_sign ( __null ), _M_positive_sign_size ( 0 ),
      _M_negative_sign ( __null ), _M_negative_sign_size ( 0 ),
      _M_frac_digits ( 0 ),
      _M_pos_format ( money_base :: pattern ( ) ),
      _M_neg_format ( money_base :: pattern ( ) ), _M_allocated ( false )
      { }

      ~ __moneypunct_cache ( );

      void
      _M_cache ( const locale & __loc );

    private :
      __moneypunct_cache &
      operator = ( const __moneypunct_cache & );

      explicit
      __moneypunct_cache ( const __moneypunct_cache & );
    };
# 3596 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT, bool _Intl >
    __moneypunct_cache < _CharT, _Intl > :: ~ __moneypunct_cache ( )
    {
      if ( _M_allocated )
 {
   delete [ ] _M_grouping;
   delete [ ] _M_curr_symbol;
   delete [ ] _M_positive_sign;
   delete [ ] _M_negative_sign;
 }
    }
# 3614 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT, bool _Intl >
    class moneypunct : public locale :: facet, public money_base
    {
    public :



      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;

      typedef __moneypunct_cache < _CharT, _Intl > __cache_type;

    private :
      __cache_type * _M_data;

    public :


      static const bool intl = _Intl;

      static locale :: id id;
# 3643 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      explicit
      moneypunct ( size_t __refs = 0 ) : facet ( __refs ), _M_data ( __null )
      { _M_initialize_moneypunct ( ); }
# 3655 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      explicit
      moneypunct ( __cache_type * __cache, size_t __refs = 0 )
      : facet ( __refs ), _M_data ( __cache )
      { _M_initialize_moneypunct ( ); }
# 3670 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      explicit
      moneypunct ( __c_locale __cloc, const char * __s, size_t __refs = 0 )
      : facet ( __refs ), _M_data ( __null )
      { _M_initialize_moneypunct ( __cloc, __s ); }
# 3684 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      char_type
      decimal_point ( ) const
      { return this -> do_decimal_point ( ); }
# 3697 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      char_type
      thousands_sep ( ) const
      { return this -> do_thousands_sep ( ); }
# 3726 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      string
      grouping ( ) const
      { return this -> do_grouping ( ); }
# 3739 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      string_type
      curr_symbol ( ) const
      { return this -> do_curr_symbol ( ); }
# 3756 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      string_type
      positive_sign ( ) const
      { return this -> do_positive_sign ( ); }
# 3773 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      string_type
      negative_sign ( ) const
      { return this -> do_negative_sign ( ); }
# 3789 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      int
      frac_digits ( ) const
      { return this -> do_frac_digits ( ); }
# 3824 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      pattern
      pos_format ( ) const
      { return this -> do_pos_format ( ); }

      pattern
      neg_format ( ) const
      { return this -> do_neg_format ( ); }


    protected :

      virtual
      ~ moneypunct ( );
# 3846 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point ( ) const
      { return _M_data -> _M_decimal_point; }
# 3858 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep ( ) const
      { return _M_data -> _M_thousands_sep; }
# 3871 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual string
      do_grouping ( ) const
      { return _M_data -> _M_grouping; }
# 3884 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual string_type
      do_curr_symbol ( ) const
      { return _M_data -> _M_curr_symbol; }
# 3897 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual string_type
      do_positive_sign ( ) const
      { return _M_data -> _M_positive_sign; }
# 3910 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual string_type
      do_negative_sign ( ) const
      { return _M_data -> _M_negative_sign; }
# 3924 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual int
      do_frac_digits ( ) const
      { return _M_data -> _M_frac_digits; }
# 3938 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual pattern
      do_pos_format ( ) const
      { return _M_data -> _M_pos_format; }
# 3952 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual pattern
      do_neg_format ( ) const
      { return _M_data -> _M_neg_format; }


       void
       _M_initialize_moneypunct ( __c_locale __cloc = __null,
    const char * __name = __null );
    };
# 3962 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _CharT, bool _Intl> locale::id
# 3963 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
moneypunct< _CharT, _Intl> ::id;
# 3965 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _CharT, bool _Intl> const bool
# 3966 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
moneypunct< _CharT, _Intl> ::intl;
# 3969 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> moneypunct< char, true> ::~moneypunct();
# 3972 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> moneypunct< char, false> ::~moneypunct();
# 3976 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> void moneypunct< char, true> ::_M_initialize_moneypunct(__c_locale, const char *);
# 3980 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> void moneypunct< char, false> ::_M_initialize_moneypunct(__c_locale, const char *);
# 3984 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> moneypunct< wchar_t, true> ::~moneypunct();
# 3987 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> moneypunct< wchar_t, false> ::~moneypunct();
# 3991 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> void moneypunct< wchar_t, true> ::_M_initialize_moneypunct(__c_locale, const char *);
# 3996 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> void moneypunct< wchar_t, false> ::_M_initialize_moneypunct(__c_locale, const char *);
# 4001 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT, bool _Intl >
    class moneypunct_byname : public moneypunct < _CharT, _Intl >
    {
    public :
      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;

      static const bool intl = _Intl;

      explicit
      moneypunct_byname ( const char * __s, size_t __refs = 0 )
      : moneypunct < _CharT, _Intl > ( __refs )
      {
 if ( std :: strcmp ( __s, "C" ) != 0 && std :: strcmp ( __s, "POSIX" ) != 0 )
   {
     __c_locale __tmp;
     this -> _S_create_c_locale ( __tmp, __s );
     this -> _M_initialize_moneypunct ( __tmp );
     this -> _S_destroy_c_locale ( __tmp );
   }
      }

    protected :
      virtual
      ~ moneypunct_byname ( ) { }
    };
# 4028 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _CharT, bool _Intl> const bool
# 4029 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
moneypunct_byname< _CharT, _Intl> ::intl;
# 4044 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT, typename _InIter >
    class money_get : public locale :: facet
    {
    public :



      typedef _CharT char_type;
      typedef _InIter iter_type;
      typedef basic_string < _CharT > string_type;



      static locale :: id id;
# 4066 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      explicit
      money_get ( size_t __refs = 0 ) : facet ( __refs ) { }
# 4096 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      get ( iter_type __s, iter_type __end, bool __intl, ios_base & __io,
   ios_base :: iostate & __err, long double & __units ) const
      { return this -> do_get ( __s, __end, __intl, __io, __err, __units ); }
# 4126 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      get ( iter_type __s, iter_type __end, bool __intl, ios_base & __io,
   ios_base :: iostate & __err, string_type & __digits ) const
      { return this -> do_get ( __s, __end, __intl, __io, __err, __digits ); }

    protected :

      virtual
      ~ money_get ( ) { }
# 4149 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual iter_type
      do_get ( iter_type __s, iter_type __end, bool __intl, ios_base & __io,
      ios_base :: iostate & __err, long double & __units ) const;
# 4161 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual iter_type
      do_get ( iter_type __s, iter_type __end, bool __intl, ios_base & __io,
      ios_base :: iostate & __err, string_type & __digits ) const;
# 4172 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      template < bool _Intl >
        iter_type
        _M_extract ( iter_type __s, iter_type __end, ios_base & __io,
     ios_base :: iostate & __err, string & __digits ) const;
    };
# 4178 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _CharT, class _InIter> locale::id
# 4179 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
money_get< _CharT, _InIter> ::id;
# 4193 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT, typename _OutIter >
    class money_put : public locale :: facet
    {
    public :


      typedef _CharT char_type;
      typedef _OutIter iter_type;
      typedef basic_string < _CharT > string_type;



      static locale :: id id;
# 4214 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      explicit
      money_put ( size_t __refs = 0 ) : facet ( __refs ) { }
# 4234 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      put ( iter_type __s, bool __intl, ios_base & __io,
   char_type __fill, long double __units ) const
      { return this -> do_put ( __s, __intl, __io, __fill, __units ); }
# 4256 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      iter_type
      put ( iter_type __s, bool __intl, ios_base & __io,
   char_type __fill, const string_type & __digits ) const
      { return this -> do_put ( __s, __intl, __io, __fill, __digits ); }

    protected :

      virtual
      ~ money_put ( ) { }
# 4290 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual iter_type
      do_put ( iter_type __s, bool __intl, ios_base & __io, char_type __fill,
      long double __units ) const;
# 4313 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual iter_type
      do_put ( iter_type __s, bool __intl, ios_base & __io, char_type __fill,
      const string_type & __digits ) const;
# 4324 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      template < bool _Intl >
        iter_type
        _M_insert ( iter_type __s, ios_base & __io, char_type __fill,
    const string_type & __digits ) const;
    };
# 4330 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _CharT, class _OutIter> locale::id
# 4331 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
money_put< _CharT, _OutIter> ::id;
# 4338 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
struct messages_base {
# 4340 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
typedef int catalog;
# 4341 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
};
# 4363 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    class messages : public locale :: facet, public messages_base
    {
    public :



      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;


    protected :


      __c_locale _M_c_locale_messages;
      const char * _M_name_messages;

    public :

      static locale :: id id;
# 4391 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      explicit
      messages ( size_t __refs = 0 );
# 4405 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      explicit
      messages ( __c_locale __cloc, const char * __s, size_t __refs = 0 );
# 4418 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      catalog
      open ( const basic_string < char > & __s, const locale & __loc ) const
      { return this -> do_open ( __s, __loc ); }
# 4436 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      catalog
      open ( const basic_string < char > &, const locale &, const char * ) const;
# 4454 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      string_type
      get ( catalog __c, int __set, int __msgid, const string_type & __s ) const
      { return this -> do_get ( __c, __set, __msgid, __s ); }
# 4465 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      void
      close ( catalog __c ) const
      { return this -> do_close ( __c ); }

    protected :

      virtual
      ~ messages ( );
# 4485 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual catalog
      do_open ( const basic_string < char > &, const locale & ) const;
# 4504 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
      virtual string_type
      do_get ( catalog, int, int, const string_type & __dfault ) const;






      virtual void
      do_close ( catalog ) const;


      char *
      _M_convert_to_char ( const string_type & __msg ) const
      {

 return reinterpret_cast < char * > ( const_cast < _CharT * > ( __msg . c_str ( ) ) );
      }


      string_type
      _M_convert_from_char ( char * ) const
      {

 return string_type ( );
      }
     };
# 4565 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template< class _CharT> locale::id
# 4566 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
messages< _CharT> ::id;
# 4571 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> string messages< char> ::do_get(catalog, int, int, const string &) const;
# 4576 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template<> wstring messages< wchar_t> ::do_get(catalog, int, int, const wstring &) const;
# 4580 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    class messages_byname : public messages < _CharT >
    {
    public :
      typedef _CharT char_type;
      typedef basic_string < _CharT > string_type;

      explicit
      messages_byname ( const char * __s, size_t __refs = 0 );

    protected :
      virtual
      ~ messages_byname ( )
      { }
    };
# 4596 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
}
# 41 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/messages_members.h" 3
namespace std {
# 44 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/messages_members.h" 3
template < typename _CharT >
     messages < _CharT > :: messages ( size_t __refs )
     : facet ( __refs )
     { _M_c_locale_messages = _S_get_c_locale ( ); }
# 49 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/messages_members.h" 3
template < typename _CharT >
     messages < _CharT > :: messages ( __c_locale, const char *, size_t __refs )
     : facet ( __refs )
     { _M_c_locale_messages = _S_get_c_locale ( ); }
# 54 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/messages_members.h" 3
template < typename _CharT >
    typename messages < _CharT > :: catalog
    messages < _CharT > :: open ( const basic_string < char > & __s, const locale & __loc,
      const char * ) const
    { return this -> do_open ( __s, __loc ); }
# 61 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/messages_members.h" 3
template < typename _CharT >
    messages < _CharT > :: ~ messages ( )
    { _S_destroy_c_locale ( _M_c_locale_messages ); }
# 65 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/messages_members.h" 3
template < typename _CharT >
    typename messages < _CharT > :: catalog
    messages < _CharT > :: do_open ( const basic_string < char > &, const locale & ) const
    { return 0; }
# 70 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/messages_members.h" 3
template < typename _CharT >
    typename messages < _CharT > :: string_type
    messages < _CharT > :: do_get ( catalog, int, int,
        const string_type & __dfault ) const
    { return __dfault; }
# 76 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/messages_members.h" 3
template < typename _CharT >
    void
    messages < _CharT > :: do_close ( catalog ) const
    { }
# 82 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/messages_members.h" 3
template < typename _CharT >
     messages_byname < _CharT > :: messages_byname ( const char * __s, size_t __refs )
     : messages < _CharT > ( __refs )
     {
 if ( std :: strcmp ( __s, "C" ) != 0 && std :: strcmp ( __s, "POSIX" ) != 0 )
   {
     this -> _S_destroy_c_locale ( this -> _M_c_locale_messages );
     this -> _S_create_c_locale ( this -> _M_c_locale_messages, __s );
   }
     }
# 93 "/usr/include/c++/4.2.1/i686-apple-darwin10/bits/messages_members.h" 3
}
# 4601 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
namespace std {
# 4609 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isspace ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: space, __c ); }
# 4615 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isprint ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: print, __c ); }
# 4621 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    iscntrl ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: cntrl, __c ); }
# 4627 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isupper ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: upper, __c ); }
# 4633 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    islower ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: lower, __c ); }
# 4639 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isalpha ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: alpha, __c ); }
# 4645 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isdigit ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: digit, __c ); }
# 4651 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    ispunct ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: punct, __c ); }
# 4657 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isxdigit ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: xdigit, __c ); }
# 4663 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isalnum ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: alnum, __c ); }
# 4669 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    inline bool
    isgraph ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . is ( ctype_base :: graph, __c ); }
# 4675 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    inline _CharT
    toupper ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . toupper ( __c ); }
# 4681 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
template < typename _CharT >
    inline _CharT
    tolower ( _CharT __c, const locale & __loc )
    { return use_facet < ctype < _CharT > > ( __loc ) . tolower ( __c ); }
# 4686 "/usr/include/c++/4.2.1/bits/locale_facets.h" 3
}
# 46 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
namespace std {
# 55 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
template < typename _CharT, typename _Traits >
    class basic_ios : public ios_base
    {
    public :






      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;
# 78 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
      typedef ctype < _CharT > __ctype_type;
      typedef num_put < _CharT, ostreambuf_iterator < _CharT, _Traits > >
           __num_put_type;
      typedef num_get < _CharT, istreambuf_iterator < _CharT, _Traits > >
           __num_get_type;



    protected :
      basic_ostream < _CharT, _Traits > * _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf < _CharT, _Traits > * _M_streambuf;


      const __ctype_type * _M_ctype;

      const __num_put_type * _M_num_put;

      const __num_get_type * _M_num_get;

    public :







      operator void * ( ) const
      { return this -> fail ( ) ? 0 : const_cast < basic_ios * > ( this ); }

      bool
      operator ! ( ) const
      { return this -> fail ( ); }
# 122 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
      iostate
      rdstate ( ) const
      { return _M_streambuf_state; }
# 133 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
      void
      clear ( iostate __state = goodbit );







      void
      setstate ( iostate __state )
      { this -> clear ( this -> rdstate ( ) | __state ); }




      void
      _M_setstate ( iostate __state )
      {


 _M_streambuf_state |= __state;
 if ( this -> exceptions ( ) & __state )
   throw;
      }







      bool
      good ( ) const
      { return this -> rdstate ( ) == 0; }







      bool
      eof ( ) const
      { return ( this -> rdstate ( ) & eofbit ) != 0; }
# 186 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
      bool
      fail ( ) const
      { return ( this -> rdstate ( ) & ( badbit | failbit ) ) != 0; }







      bool
      bad ( ) const
      { return ( this -> rdstate ( ) & badbit ) != 0; }
# 207 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
      iostate
      exceptions ( ) const
      { return _M_exception; }
# 242 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
      void
      exceptions ( iostate __except )
      {
        _M_exception = __except;
        this -> clear ( _M_streambuf_state );
      }







      explicit
      basic_ios ( basic_streambuf < _CharT, _Traits > * __sb )
      : ios_base ( ), _M_tie ( 0 ), _M_fill ( ), _M_fill_init ( false ), _M_streambuf ( 0 ),
      _M_ctype ( 0 ), _M_num_put ( 0 ), _M_num_get ( 0 )
      { this -> init ( __sb ); }







      virtual
      ~ basic_ios ( ) { }
# 280 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
      basic_ostream < _CharT, _Traits > *
      tie ( ) const
      { return _M_tie; }
# 292 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
      basic_ostream < _CharT, _Traits > *
      tie ( basic_ostream < _CharT, _Traits > * __tiestr )
      {
        basic_ostream < _CharT, _Traits > * __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf < _CharT, _Traits > *
      rdbuf ( ) const
      { return _M_streambuf; }
# 332 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
      basic_streambuf < _CharT, _Traits > *
      rdbuf ( basic_streambuf < _CharT, _Traits > * __sb );
# 346 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
      basic_ios &
      copyfmt ( const basic_ios & __rhs );







      char_type
      fill ( ) const
      {
 if ( ! _M_fill_init )
   {
     _M_fill = this -> widen ( ' ' );
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 375 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
      char_type
      fill ( char_type __ch )
      {
 char_type __old = this -> fill ( );
 _M_fill = __ch;
 return __old;
      }
# 395 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
      locale
      imbue ( const locale & __loc );
# 415 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
      char
      narrow ( char_type __c, char __dfault ) const;
# 433 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
      char_type
      widen ( char __c ) const;

    protected :







      basic_ios ( )
      : ios_base ( ), _M_tie ( 0 ), _M_fill ( char_type ( ) ), _M_fill_init ( false ),
      _M_streambuf ( 0 ), _M_ctype ( 0 ), _M_num_put ( 0 ), _M_num_get ( 0 )
      { }







      void
      init ( basic_streambuf < _CharT, _Traits > * __sb );

      void
      _M_cache_locale ( const locale & __loc );
    };
# 462 "/usr/include/c++/4.2.1/bits/basic_ios.h" 3
}
# 41 "/usr/include/c++/4.2.1/bits/basic_ios.tcc" 3
namespace std {
# 43 "/usr/include/c++/4.2.1/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    void
    basic_ios < _CharT, _Traits > :: clear ( iostate __state )
    {
      if ( this -> rdbuf ( ) )
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if ( this -> exceptions ( ) & this -> rdstate ( ) )
 __throw_ios_failure ( ( "basic_ios::clear" ) );
    }
# 55 "/usr/include/c++/4.2.1/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    basic_streambuf < _CharT, _Traits > *
    basic_ios < _CharT, _Traits > :: rdbuf ( basic_streambuf < _CharT, _Traits > * __sb )
    {
      basic_streambuf < _CharT, _Traits > * __old = _M_streambuf;
      _M_streambuf = __sb;
      this -> clear ( );
      return __old;
    }
# 65 "/usr/include/c++/4.2.1/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ios < _CharT, _Traits > &
    basic_ios < _CharT, _Traits > :: copyfmt ( const basic_ios & __rhs )
    {


      if ( this != & __rhs )
 {




   _Words * __words = ( __rhs . _M_word_size <= _S_local_word_size ) ?
                      _M_local_word : new _Words [ __rhs . _M_word_size ];


   _Callback_list * __cb = __rhs . _M_callbacks;
   if ( __cb )
     __cb -> _M_add_reference ( );
   _M_call_callbacks ( erase_event );
   if ( _M_word != _M_local_word )
     {
       delete [ ] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks ( );


   _M_callbacks = __cb;
   for ( int __i = 0; __i < __rhs . _M_word_size; ++ __i )
     __words [ __i ] = __rhs . _M_word [ __i ];
   _M_word = __words;
   _M_word_size = __rhs . _M_word_size;

   this -> flags ( __rhs . flags ( ) );
   this -> width ( __rhs . width ( ) );
   this -> precision ( __rhs . precision ( ) );
   this -> tie ( __rhs . tie ( ) );
   this -> fill ( __rhs . fill ( ) );
   _M_ios_locale = __rhs . getloc ( );
   _M_cache_locale ( _M_ios_locale );

   _M_call_callbacks ( copyfmt_event );


   this -> exceptions ( __rhs . exceptions ( ) );
 }
      return * this;
    }
# 115 "/usr/include/c++/4.2.1/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    char
    basic_ios < _CharT, _Traits > :: narrow ( char_type __c, char __dfault ) const
    { return __check_facet ( _M_ctype ) . narrow ( __c, __dfault ); }
# 120 "/usr/include/c++/4.2.1/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    _CharT
    basic_ios < _CharT, _Traits > :: widen ( char __c ) const
    { return __check_facet ( _M_ctype ) . widen ( __c ); }
# 126 "/usr/include/c++/4.2.1/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    locale
    basic_ios < _CharT, _Traits > :: imbue ( const locale & __loc )
    {
      locale __old ( this -> getloc ( ) );
      ios_base :: imbue ( __loc );
      _M_cache_locale ( __loc );
      if ( this -> rdbuf ( ) != 0 )
 this -> rdbuf ( ) -> pubimbue ( __loc );
      return __old;
    }
# 138 "/usr/include/c++/4.2.1/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    void
    basic_ios < _CharT, _Traits > :: init ( basic_streambuf < _CharT, _Traits > * __sb )
    {

      ios_base :: _M_init ( );


      _M_cache_locale ( _M_ios_locale );
# 160 "/usr/include/c++/4.2.1/bits/basic_ios.tcc" 3
      _M_fill = _CharT ( );
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }
# 169 "/usr/include/c++/4.2.1/bits/basic_ios.tcc" 3
template < typename _CharT, typename _Traits >
    void
    basic_ios < _CharT, _Traits > :: _M_cache_locale ( const locale & __loc )
    {
      if ( __builtin_expect ( has_facet < __ctype_type > ( __loc ), true ) )
 _M_ctype = & use_facet < __ctype_type > ( __loc );
      else
 _M_ctype = 0;

      if ( __builtin_expect ( has_facet < __num_put_type > ( __loc ), true ) )
 _M_num_put = & use_facet < __num_put_type > ( __loc );
      else
 _M_num_put = 0;

      if ( __builtin_expect ( has_facet < __num_get_type > ( __loc ), true ) )
 _M_num_get = & use_facet < __num_get_type > ( __loc );
      else
 _M_num_get = 0;
    }
# 193 "/usr/include/c++/4.2.1/bits/basic_ios.tcc" 3
extern template class basic_ios< char, char_traits< char> > ;
# 196 "/usr/include/c++/4.2.1/bits/basic_ios.tcc" 3
extern template class basic_ios< wchar_t, char_traits< wchar_t> > ;
# 200 "/usr/include/c++/4.2.1/bits/basic_ios.tcc" 3
}
# 48 "/usr/include/c++/4.2.1/ostream" 3
namespace std {
# 58 "/usr/include/c++/4.2.1/ostream" 3
template < typename _CharT, typename _Traits >
    class basic_ostream : virtual public basic_ios < _CharT, _Traits >
    {
    public :

      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef basic_ios < _CharT, _Traits > __ios_type;
      typedef basic_ostream < _CharT, _Traits > __ostream_type;
      typedef num_put < _CharT, ostreambuf_iterator < _CharT, _Traits > >
             __num_put_type;
      typedef ctype < _CharT > __ctype_type;
# 85 "/usr/include/c++/4.2.1/ostream" 3
      explicit
      basic_ostream ( __streambuf_type * __sb )
      { this -> init ( __sb ); }






      virtual
      ~ basic_ostream ( ) { }


      class sentry;
      friend class sentry;
# 111 "/usr/include/c++/4.2.1/ostream" 3
      __ostream_type &
      operator << ( __ostream_type & ( * __pf ) ( __ostream_type & ) )
      {



 return __pf ( * this );
      }

      __ostream_type &
      operator << ( __ios_type & ( * __pf ) ( __ios_type & ) )
      {



 __pf ( * this );
 return * this;
      }

      __ostream_type &
      operator << ( ios_base & ( * __pf ) ( ios_base & ) )
      {



 __pf ( * this );
 return * this;
      }
# 168 "/usr/include/c++/4.2.1/ostream" 3
      __ostream_type &
      operator << ( long __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( unsigned long __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( bool __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( short __n );

      __ostream_type &
      operator << ( unsigned short __n )
      {


 return _M_insert ( static_cast < unsigned long > ( __n ) );
      }

      __ostream_type &
      operator << ( int __n );

      __ostream_type &
      operator << ( unsigned int __n )
      {


 return _M_insert ( static_cast < unsigned long > ( __n ) );
      }


      __ostream_type &
      operator << ( long long __n )
      { return _M_insert ( __n ); }

      __ostream_type &
      operator << ( unsigned long long __n )
      { return _M_insert ( __n ); }


      __ostream_type &
      operator << ( double __f )
      { return _M_insert ( __f ); }

      __ostream_type &
      operator << ( float __f )
      {


 return _M_insert ( static_cast < double > ( __f ) );
      }

      __ostream_type &
      operator << ( long double __f )
      { return _M_insert ( __f ); }

      __ostream_type &
      operator << ( const void * __p )
      { return _M_insert ( __p ); }
# 253 "/usr/include/c++/4.2.1/ostream" 3
      __ostream_type &
      operator << ( __streambuf_type * __sb );
# 286 "/usr/include/c++/4.2.1/ostream" 3
      __ostream_type &
      put ( char_type __c );


      void
      _M_write ( const char_type * __s, streamsize __n )
      {
 const streamsize __put = this -> rdbuf ( ) -> sputn ( __s, __n );
 if ( __put != __n )
   this -> setstate ( ios_base :: badbit );
      }
# 314 "/usr/include/c++/4.2.1/ostream" 3
      __ostream_type &
      write ( const char_type * __s, streamsize __n );
# 327 "/usr/include/c++/4.2.1/ostream" 3
      __ostream_type &
      flush ( );
# 338 "/usr/include/c++/4.2.1/ostream" 3
      pos_type
      tellp ( );
# 349 "/usr/include/c++/4.2.1/ostream" 3
      __ostream_type &
      seekp ( pos_type );
# 361 "/usr/include/c++/4.2.1/ostream" 3
       __ostream_type &
      seekp ( off_type, ios_base :: seekdir );

    protected :
      explicit
      basic_ostream ( ) { }

      template < typename _ValueT >
        __ostream_type &
        _M_insert ( _ValueT __v );
    };
# 383 "/usr/include/c++/4.2.1/ostream" 3
template < typename _CharT, typename _Traits >
    class basic_ostream < _CharT, _Traits > :: sentry
    {

      bool _M_ok;
      basic_ostream < _CharT, _Traits > & _M_os;

    public :
# 402 "/usr/include/c++/4.2.1/ostream" 3
      explicit
      sentry ( basic_ostream < _CharT, _Traits > & __os );
# 412 "/usr/include/c++/4.2.1/ostream" 3
      ~ sentry ( )
      {

 if ( _M_os . flags ( ) & ios_base :: unitbuf && ! uncaught_exception ( ) )
   {

     if ( _M_os . rdbuf ( ) && _M_os . rdbuf ( ) -> pubsync ( ) == - 1 )
       _M_os . setstate ( ios_base :: badbit );
   }
      }
# 430 "/usr/include/c++/4.2.1/ostream" 3
      operator bool ( ) const
      { return _M_ok; }
    };
# 451 "/usr/include/c++/4.2.1/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, _CharT __c )
    { return __ostream_insert ( __out, & __c, 1 ); }
# 456 "/usr/include/c++/4.2.1/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, char __c )
    { return ( __out << __out . widen ( __c ) ); }
# 462 "/usr/include/c++/4.2.1/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, char __c )
    { return __ostream_insert ( __out, & __c, 1 ); }
# 468 "/usr/include/c++/4.2.1/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, signed char __c )
    { return ( __out << static_cast < char > ( __c ) ); }
# 473 "/usr/include/c++/4.2.1/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, unsigned char __c )
    { return ( __out << static_cast < char > ( __c ) ); }
# 493 "/usr/include/c++/4.2.1/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, const _CharT * __s )
    {
      if ( ! __s )
 __out . setstate ( ios_base :: badbit );
      else
 __ostream_insert ( __out, __s,
    static_cast < streamsize > ( _Traits :: length ( __s ) ) );
      return __out;
    }
# 505 "/usr/include/c++/4.2.1/ostream" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, const char * __s );
# 510 "/usr/include/c++/4.2.1/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, const char * __s )
    {
      if ( ! __s )
 __out . setstate ( ios_base :: badbit );
      else
 __ostream_insert ( __out, __s,
    static_cast < streamsize > ( _Traits :: length ( __s ) ) );
      return __out;
    }
# 523 "/usr/include/c++/4.2.1/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, const signed char * __s )
    { return ( __out << reinterpret_cast < const char * > ( __s ) ); }
# 528 "/usr/include/c++/4.2.1/ostream" 3
template < class _Traits >
    inline basic_ostream < char, _Traits > &
    operator << ( basic_ostream < char, _Traits > & __out, const unsigned char * __s )
    { return ( __out << reinterpret_cast < const char * > ( __s ) ); }
# 543 "/usr/include/c++/4.2.1/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    endl ( basic_ostream < _CharT, _Traits > & __os )
    { return flush ( __os . put ( __os . widen ( '\n' ) ) ); }
# 554 "/usr/include/c++/4.2.1/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    ends ( basic_ostream < _CharT, _Traits > & __os )
    { return __os . put ( _CharT ( ) ); }
# 564 "/usr/include/c++/4.2.1/ostream" 3
template < typename _CharT, typename _Traits >
    inline basic_ostream < _CharT, _Traits > &
    flush ( basic_ostream < _CharT, _Traits > & __os )
    { return __os . flush ( ); }
# 569 "/usr/include/c++/4.2.1/ostream" 3
}
# 45 "/usr/include/c++/4.2.1/typeinfo" 3
namespace __cxxabiv1 {
# 47 "/usr/include/c++/4.2.1/typeinfo" 3
class __class_type_info;
# 48 "/usr/include/c++/4.2.1/typeinfo" 3
}
# 60 "/usr/include/c++/4.2.1/typeinfo" 3
namespace std {
# 68 "/usr/include/c++/4.2.1/typeinfo" 3
class __attribute__((visibility("default"))) type_info {
# 75 "/usr/include/c++/4.2.1/typeinfo" 3
public: virtual ~type_info();
# 79 "/usr/include/c++/4.2.1/typeinfo" 3
const char *name() const
# 80 "/usr/include/c++/4.2.1/typeinfo" 3
{ return __name; }
# 94 "/usr/include/c++/4.2.1/typeinfo" 3
bool before(const type_info &__arg) const
# 95 "/usr/include/c++/4.2.1/typeinfo" 3
{ return (__name) < (__arg.__name); }
# 97 "/usr/include/c++/4.2.1/typeinfo" 3
bool operator==(const type_info &__arg) const
# 98 "/usr/include/c++/4.2.1/typeinfo" 3
{ return (__name) == (__arg.__name); }
# 100 "/usr/include/c++/4.2.1/typeinfo" 3
bool operator!=(const type_info &__arg) const
# 101 "/usr/include/c++/4.2.1/typeinfo" 3
{ return !this->operator==(__arg); }
# 107 "/usr/include/c++/4.2.1/typeinfo" 3
virtual bool __is_pointer_p() const;
# 110 "/usr/include/c++/4.2.1/typeinfo" 3
virtual bool __is_function_p() const;
# 118 "/usr/include/c++/4.2.1/typeinfo" 3
virtual bool __do_catch(const type_info *, void **, unsigned) const;
# 122 "/usr/include/c++/4.2.1/typeinfo" 3
virtual bool __do_upcast(const __cxxabiv1::__class_type_info *, void **) const;
# 128 "/usr/include/c++/4.2.1/typeinfo" 3
protected: const char *__name;
# 130 "/usr/include/c++/4.2.1/typeinfo" 3
explicit type_info(const char *__n) : __name(__n) { }
# 134 "/usr/include/c++/4.2.1/typeinfo" 3
private: type_info &operator=(const type_info &);
# 135 "/usr/include/c++/4.2.1/typeinfo" 3
type_info(const type_info &);
# 136 "/usr/include/c++/4.2.1/typeinfo" 3
};
# 143 "/usr/include/c++/4.2.1/typeinfo" 3
class __attribute__((visibility("default"))) bad_cast : public exception {
# 146 "/usr/include/c++/4.2.1/typeinfo" 3
public: bad_cast() throw() { }
# 150 "/usr/include/c++/4.2.1/typeinfo" 3
virtual ~bad_cast() throw();
# 153 "/usr/include/c++/4.2.1/typeinfo" 3
virtual const char *what() const throw();
# 154 "/usr/include/c++/4.2.1/typeinfo" 3
};
# 157 "/usr/include/c++/4.2.1/typeinfo" 3
class __attribute__((visibility("default"))) bad_typeid : public exception {
# 160 "/usr/include/c++/4.2.1/typeinfo" 3
public: bad_typeid() throw() { }
# 164 "/usr/include/c++/4.2.1/typeinfo" 3
virtual ~bad_typeid() throw();
# 167 "/usr/include/c++/4.2.1/typeinfo" 3
virtual const char *what() const throw();
# 168 "/usr/include/c++/4.2.1/typeinfo" 3
};
# 169 "/usr/include/c++/4.2.1/typeinfo" 3
}
# 46 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
namespace std {
# 48 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _Facet >
    locale
    locale :: combine ( const locale & __other ) const
    {
      _Impl * __tmp = new _Impl ( * _M_impl, 1 );
      try
 {
   __tmp -> _M_replace_facet ( __other . _M_impl, & _Facet :: id );
 }
      catch ( ... )
 {
   __tmp -> _M_remove_reference ( );
   throw;
 }
      return locale ( __tmp );
    }
# 65 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    bool
    locale :: operator ( ) ( const basic_string < _CharT, _Traits, _Alloc > & __s1,
                       const basic_string < _CharT, _Traits, _Alloc > & __s2 ) const
    {
      typedef std :: collate < _CharT > __collate_type;
      const __collate_type & __collate = use_facet < __collate_type > ( * this );
      return ( __collate . compare ( __s1 . data ( ), __s1 . data ( ) + __s1 . length ( ),
    __s2 . data ( ), __s2 . data ( ) + __s2 . length ( ) ) < 0 );
    }
# 87 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _Facet >
    inline bool
    has_facet ( const locale & __loc ) throw ( )
    {
      const size_t __i = _Facet :: id . _M_id ( );
      const locale :: facet * * __facets = __loc . _M_impl -> _M_facets;
      return ( __i < __loc . _M_impl -> _M_facets_size && __facets [ __i ] );
    }
# 109 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _Facet >
    inline const _Facet &
    use_facet ( const locale & __loc )
    {
      const size_t __i = _Facet :: id . _M_id ( );
      const locale :: facet * * __facets = __loc . _M_impl -> _M_facets;
      if ( ! ( __i < __loc . _M_impl -> _M_facets_size && __facets [ __i ] ) )
        __throw_bad_cast ( );
      return static_cast < const _Facet & > ( * __facets [ __i ] );
    }
# 122 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template< class _Facet>
# 123 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
struct __use_cache {
# 126 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
const _Facet *operator()(const locale &) const;
# 127 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
};
# 130 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT >
    struct __use_cache < __numpunct_cache < _CharT > >
    {
      const __numpunct_cache < _CharT > *
      operator ( ) ( const locale & __loc ) const
      {
 const size_t __i = numpunct < _CharT > :: id . _M_id ( );
 const locale :: facet * * __caches = __loc . _M_impl -> _M_caches;
 if ( ! __caches [ __i ] )
   {
     __numpunct_cache < _CharT > * __tmp = __null;
     try
       {
  __tmp = new __numpunct_cache < _CharT >;
  __tmp -> _M_cache ( __loc );
       }
     catch ( ... )
       {
  delete __tmp;
  throw;
       }
     __loc . _M_impl -> _M_install_cache ( __tmp, __i );
   }
 return static_cast < const __numpunct_cache < _CharT > * > ( __caches [ __i ] );
      }
    };
# 157 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, bool _Intl >
    struct __use_cache < __moneypunct_cache < _CharT, _Intl > >
    {
      const __moneypunct_cache < _CharT, _Intl > *
      operator ( ) ( const locale & __loc ) const
      {
 const size_t __i = moneypunct < _CharT, _Intl > :: id . _M_id ( );
 const locale :: facet * * __caches = __loc . _M_impl -> _M_caches;
 if ( ! __caches [ __i ] )
   {
     __moneypunct_cache < _CharT, _Intl > * __tmp = __null;
     try
       {
  __tmp = new __moneypunct_cache < _CharT, _Intl >;
  __tmp -> _M_cache ( __loc );
       }
     catch ( ... )
       {
  delete __tmp;
  throw;
       }
     __loc . _M_impl -> _M_install_cache ( __tmp, __i );
   }
 return static_cast <
   const __moneypunct_cache < _CharT, _Intl > * > ( __caches [ __i ] );
      }
    };
# 185 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT >
    void
    __numpunct_cache < _CharT > :: _M_cache ( const locale & __loc )
    {
      _M_allocated = true;

      const numpunct < _CharT > & __np = use_facet < numpunct < _CharT > > ( __loc );

      _M_grouping_size = __np . grouping ( ) . size ( );
      char * __grouping = new char [ _M_grouping_size ];
      __np . grouping ( ) . copy ( __grouping, _M_grouping_size );
      _M_grouping = __grouping;
      _M_use_grouping = ( _M_grouping_size
    && static_cast < signed char > ( __np . grouping ( ) [ 0 ] ) > 0 );

      _M_truename_size = __np . truename ( ) . size ( );
      _CharT * __truename = new _CharT [ _M_truename_size ];
      __np . truename ( ) . copy ( __truename, _M_truename_size );
      _M_truename = __truename;

      _M_falsename_size = __np . falsename ( ) . size ( );
      _CharT * __falsename = new _CharT [ _M_falsename_size ];
      __np . falsename ( ) . copy ( __falsename, _M_falsename_size );
      _M_falsename = __falsename;

      _M_decimal_point = __np . decimal_point ( );
      _M_thousands_sep = __np . thousands_sep ( );

      const ctype < _CharT > & __ct = use_facet < ctype < _CharT > > ( __loc );
      __ct . widen ( __num_base :: _S_atoms_out,
   __num_base :: _S_atoms_out + __num_base :: _S_oend, _M_atoms_out );
      __ct . widen ( __num_base :: _S_atoms_in,
   __num_base :: _S_atoms_in + __num_base :: _S_iend, _M_atoms_in );
    }
# 220 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, bool _Intl >
    void
    __moneypunct_cache < _CharT, _Intl > :: _M_cache ( const locale & __loc )
    {
      _M_allocated = true;

      const moneypunct < _CharT, _Intl > & __mp =
 use_facet < moneypunct < _CharT, _Intl > > ( __loc );

      _M_grouping_size = __mp . grouping ( ) . size ( );
      char * __grouping = new char [ _M_grouping_size ];
      __mp . grouping ( ) . copy ( __grouping, _M_grouping_size );
      _M_grouping = __grouping;
      _M_use_grouping = ( _M_grouping_size
    && static_cast < signed char > ( __mp . grouping ( ) [ 0 ] ) > 0 );

      _M_decimal_point = __mp . decimal_point ( );
      _M_thousands_sep = __mp . thousands_sep ( );
      _M_frac_digits = __mp . frac_digits ( );

      _M_curr_symbol_size = __mp . curr_symbol ( ) . size ( );
      _CharT * __curr_symbol = new _CharT [ _M_curr_symbol_size ];
      __mp . curr_symbol ( ) . copy ( __curr_symbol, _M_curr_symbol_size );
      _M_curr_symbol = __curr_symbol;

      _M_positive_sign_size = __mp . positive_sign ( ) . size ( );
      _CharT * __positive_sign = new _CharT [ _M_positive_sign_size ];
      __mp . positive_sign ( ) . copy ( __positive_sign, _M_positive_sign_size );
      _M_positive_sign = __positive_sign;

      _M_negative_sign_size = __mp . negative_sign ( ) . size ( );
      _CharT * __negative_sign = new _CharT [ _M_negative_sign_size ];
      __mp . negative_sign ( ) . copy ( __negative_sign, _M_negative_sign_size );
      _M_negative_sign = __negative_sign;

      _M_pos_format = __mp . pos_format ( );
      _M_neg_format = __mp . neg_format ( );

      const ctype < _CharT > & __ct = use_facet < ctype < _CharT > > ( __loc );
      __ct . widen ( money_base :: _S_atoms,
   money_base :: _S_atoms + money_base :: _S_end, _M_atoms );
    }
# 273 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
static bool __verify_grouping(const char *, size_t, const string &);
# 278 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    _M_extract_float ( _InIter __beg, _InIter __end, ios_base & __io,
       ios_base :: iostate & __err, string & __xtrc ) const
    {
      typedef char_traits < _CharT > __traits_type;
      typedef __numpunct_cache < _CharT > __cache_type;
      __use_cache < __cache_type > __uc;
      const locale & __loc = __io . _M_getloc ( );
      const __cache_type * __lc = __uc ( __loc );
      const _CharT * __lit = __lc -> _M_atoms_in;
      char_type __c = char_type ( );


      bool __testeof = __beg == __end;


      if ( ! __testeof )
 {
   __c = * __beg;
   const bool __plus = __c == __lit [ __num_base :: _S_iplus ];
   if ( ( __plus || __c == __lit [ __num_base :: _S_iminus ] )
       && ! ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
       && ! ( __c == __lc -> _M_decimal_point ) )
     {
       __xtrc += __plus ? '+' : '-';
       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while ( ! __testeof )
 {
   if ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep
       || __c == __lc -> _M_decimal_point )
     break;
   else if ( __c == __lit [ __num_base :: _S_izero ] )
     {
       if ( ! __found_mantissa )
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++ __sep_pos;

       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if ( __lc -> _M_use_grouping )
 __found_grouping . reserve ( 32 );
      const char_type * __lit_zero = __lit + __num_base :: _S_izero;

      if ( ! __lc -> _M_allocated )

 while ( ! __testeof )
   {
     const int __digit = _M_find ( __lit_zero, 10, __c );
     if ( __digit != - 1 )
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if ( __c == __lc -> _M_decimal_point
       && ! __found_dec && ! __found_sci )
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ( ( __c == __lit [ __num_base :: _S_ie ]
        || __c == __lit [ __num_base :: _S_iE ] )
       && ! __found_sci && __found_mantissa )
       {

  __xtrc += 'e';
  __found_sci = true;


  if ( ++ __beg != __end )
    {
      __c = * __beg;
      const bool __plus = __c == __lit [ __num_base :: _S_iplus ];
      if ( __plus || __c == __lit [ __num_base :: _S_iminus ] )
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if ( ++ __beg != __end )
       __c = * __beg;
     else
       __testeof = true;
   }
      else
 while ( ! __testeof )
   {


     if ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
       {
  if ( ! __found_dec && ! __found_sci )
    {


      if ( __sep_pos )
        {
   __found_grouping += static_cast < char > ( __sep_pos );
   __sep_pos = 0;
        }
      else
        {


   __xtrc . clear ( );
   break;
        }
    }
  else
    break;
       }
     else if ( __c == __lc -> _M_decimal_point )
       {
  if ( ! __found_dec && ! __found_sci )
    {



      if ( __found_grouping . size ( ) )
        __found_grouping += static_cast < char > ( __sep_pos );
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type * __q =
    __traits_type :: find ( __lit_zero, 10, __c );
  if ( __q )
    {
      __xtrc += '0' + ( __q - __lit_zero );
      __found_mantissa = true;
      ++ __sep_pos;
    }
  else if ( ( __c == __lit [ __num_base :: _S_ie ]
     || __c == __lit [ __num_base :: _S_iE ] )
    && ! __found_sci && __found_mantissa )
    {

      if ( __found_grouping . size ( ) && ! __found_dec )
        __found_grouping += static_cast < char > ( __sep_pos );
      __xtrc += 'e';
      __found_sci = true;


      if ( ++ __beg != __end )
        {
   __c = * __beg;
   const bool __plus = __c == __lit [ __num_base :: _S_iplus ];
   if ( ( __plus || __c == __lit [ __num_base :: _S_iminus ] )
       && ! ( __lc -> _M_use_grouping
     && __c == __lc -> _M_thousands_sep )
       && ! ( __c == __lc -> _M_decimal_point ) )
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if ( ++ __beg != __end )
       __c = * __beg;
     else
       __testeof = true;
   }



      if ( __found_grouping . size ( ) )
        {

   if ( ! __found_dec && ! __found_sci )
     __found_grouping += static_cast < char > ( __sep_pos );

          if ( ! std :: __verify_grouping ( __lc -> _M_grouping,
          __lc -> _M_grouping_size,
          __found_grouping ) )
     __err |= ios_base :: failbit;
        }


      if ( __testeof )
        __err |= ios_base :: eofbit;
      return __beg;
    }
# 509 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    template < typename _ValueT >
      _InIter
      num_get < _CharT, _InIter > ::
      _M_extract_int ( _InIter __beg, _InIter __end, ios_base & __io,
       ios_base :: iostate & __err, _ValueT & __v ) const
      {
        typedef char_traits < _CharT > __traits_type;
 using __gnu_cxx :: __add_unsigned;
 typedef typename __add_unsigned < _ValueT > :: __type __unsigned_type;
 typedef __numpunct_cache < _CharT > __cache_type;
 __use_cache < __cache_type > __uc;
 const locale & __loc = __io . _M_getloc ( );
 const __cache_type * __lc = __uc ( __loc );
 const _CharT * __lit = __lc -> _M_atoms_in;
 char_type __c = char_type ( );


 const ios_base :: fmtflags __basefield = __io . flags ( )
                                        & ios_base :: basefield;
 const bool __oct = __basefield == ios_base :: oct;
 int __base = __oct ? 8 : ( __basefield == ios_base :: hex ? 16 : 10 );


 bool __testeof = __beg == __end;


 bool __negative = false;
 if ( ! __testeof )
   {
     __c = * __beg;
     if ( numeric_limits < _ValueT > :: is_signed )
       __negative = __c == __lit [ __num_base :: _S_iminus ];
     if ( ( __negative || __c == __lit [ __num_base :: _S_iplus ] )
  && ! ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
  && ! ( __c == __lc -> _M_decimal_point ) )
       {
  if ( ++ __beg != __end )
    __c = * __beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while ( ! __testeof )
   {
     if ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep
  || __c == __lc -> _M_decimal_point )
       break;
     else if ( __c == __lit [ __num_base :: _S_izero ]
       && ( ! __found_zero || __base == 10 ) )
       {
  __found_zero = true;
  ++ __sep_pos;
  if ( __basefield == 0 )
    __base = 8;
  if ( __base == 8 )
    __sep_pos = 0;
       }
     else if ( __found_zero
       && ( __c == __lit [ __num_base :: _S_ix ]
    || __c == __lit [ __num_base :: _S_iX ] ) )
       {
  if ( __basefield == 0 )
    __base = 16;
  if ( __base == 16 )
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if ( ++ __beg != __end )
       {
  __c = * __beg;
  if ( ! __found_zero )
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = ( __base == 16 ? __num_base :: _S_iend
         - __num_base :: _S_izero : __base );


 string __found_grouping;
 if ( __lc -> _M_use_grouping )
   __found_grouping . reserve ( 32 );
 bool __testfail = false;
 const __unsigned_type __max = __negative ?
   - numeric_limits < _ValueT > :: min ( ) : numeric_limits < _ValueT > :: max ( );
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type * __lit_zero = __lit + __num_base :: _S_izero;

 if ( ! __lc -> _M_allocated )

   while ( ! __testeof )
     {
       __digit = _M_find ( __lit_zero, __len, __c );
       if ( __digit == - 1 )
  break;

       if ( __result > __smax )
  __testfail = true;
       else
  {
    __result *= __base;
    __testfail |= __result > __max - __digit;
    __result += __digit;
    ++ __sep_pos;
  }

       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }
 else
   while ( ! __testeof )
     {


       if ( __lc -> _M_use_grouping && __c == __lc -> _M_thousands_sep )
  {


    if ( __sep_pos )
      {
        __found_grouping += static_cast < char > ( __sep_pos );
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if ( __c == __lc -> _M_decimal_point )
  break;
       else
  {
    const char_type * __q =
      __traits_type :: find ( __lit_zero, __len, __c );
    if ( ! __q )
      break;

    __digit = __q - __lit_zero;
    if ( __digit > 15 )
      __digit -= 6;
    if ( __result > __smax )
      __testfail = true;
    else
      {
        __result *= __base;
        __testfail |= __result > __max - __digit;
        __result += __digit;
        ++ __sep_pos;
      }
  }

       if ( ++ __beg != __end )
  __c = * __beg;
       else
  __testeof = true;
     }



 if ( __found_grouping . size ( ) )
   {

     __found_grouping += static_cast < char > ( __sep_pos );

     if ( ! std :: __verify_grouping ( __lc -> _M_grouping,
     __lc -> _M_grouping_size,
     __found_grouping ) )
       __err |= ios_base :: failbit;
   }

 if ( ! __testfail && ( __sep_pos || __found_zero
       || __found_grouping . size ( ) ) )
   __v = __negative ? - __result : __result;
 else
   __err |= ios_base :: failbit;

 if ( __testeof )
   __err |= ios_base :: eofbit;
 return __beg;
      }
# 714 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, bool & __v ) const
    {
      if ( ! ( __io . flags ( ) & ios_base :: boolalpha ) )
        {



   long __l = - 1;
          __beg = _M_extract_int ( __beg, __end, __io, __err, __l );
   if ( __l == 0 || __l == 1 )
     __v = __l;
   else
            __err |= ios_base :: failbit;
        }
      else
        {

   typedef __numpunct_cache < _CharT > __cache_type;
   __use_cache < __cache_type > __uc;
   const locale & __loc = __io . _M_getloc ( );
   const __cache_type * __lc = __uc ( __loc );

   bool __testf = true;
   bool __testt = true;
   size_t __n;
   bool __testeof = __beg == __end;
          for ( __n = 0; ! __testeof; ++ __n )
            {
       const char_type __c = * __beg;

       if ( __testf )
  if ( __n < __lc -> _M_falsename_size )
    __testf = __c == __lc -> _M_falsename [ __n ];
  else
    break;

       if ( __testt )
  if ( __n < __lc -> _M_truename_size )
    __testt = __c == __lc -> _M_truename [ __n ];
  else
    break;

       if ( ! __testf && ! __testt )
  break;

       if ( ++ __beg == __end )
  __testeof = true;
            }
   if ( __testf && __n == __lc -> _M_falsename_size )
     __v = 0;
   else if ( __testt && __n == __lc -> _M_truename_size )
     __v = 1;
   else
     __err |= ios_base :: failbit;

          if ( __testeof )
            __err |= ios_base :: eofbit;
        }
      return __beg;
    }
# 779 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, long & __v ) const
    { return _M_extract_int ( __beg, __end, __io, __err, __v ); }
# 786 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, unsigned short & __v ) const
    { return _M_extract_int ( __beg, __end, __io, __err, __v ); }
# 793 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, unsigned int & __v ) const
    { return _M_extract_int ( __beg, __end, __io, __err, __v ); }
# 800 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, unsigned long & __v ) const
    { return _M_extract_int ( __beg, __end, __io, __err, __v ); }
# 808 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, long long & __v ) const
    { return _M_extract_int ( __beg, __end, __io, __err, __v ); }
# 815 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, unsigned long long & __v ) const
    { return _M_extract_int ( __beg, __end, __io, __err, __v ); }
# 823 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
    ios_base :: iostate & __err, float & __v ) const
    {
      string __xtrc;
      __xtrc . reserve ( 32 );
      __beg = _M_extract_float ( __beg, __end, __io, __err, __xtrc );
      std :: __convert_to_v ( __xtrc . c_str ( ), __v, __err, _S_get_c_locale ( ) );
      return __beg;
    }
# 836 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, double & __v ) const
    {
      string __xtrc;
      __xtrc . reserve ( 32 );
      __beg = _M_extract_float ( __beg, __end, __io, __err, __xtrc );
      std :: __convert_to_v ( __xtrc . c_str ( ), __v, __err, _S_get_c_locale ( ) );
      return __beg;
    }
# 864 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, long double & __v ) const
    {
      string __xtrc;
      __xtrc . reserve ( 32 );
      __beg = _M_extract_float ( __beg, __end, __io, __err, __xtrc );
      std :: __convert_to_v ( __xtrc . c_str ( ), __v, __err, _S_get_c_locale ( ) );
      return __beg;
    }
# 877 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    num_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, ios_base & __io,
           ios_base :: iostate & __err, void * & __v ) const
    {

      typedef ios_base :: fmtflags fmtflags;
      const fmtflags __fmt = __io . flags ( );
      __io . flags ( __fmt & ~ ios_base :: basefield | ios_base :: hex );

      unsigned long __ul;
      __beg = _M_extract_int ( __beg, __end, __io, __err, __ul );


      __io . flags ( __fmt );

      if ( ! ( __err & ios_base :: failbit ) )
 __v = reinterpret_cast < void * > ( __ul );
      return __beg;
    }
# 901 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    void
    num_put < _CharT, _OutIter > ::
    _M_pad ( _CharT __fill, streamsize __w, ios_base & __io,
    _CharT * __new, const _CharT * __cs, int & __len ) const
    {


      __pad < _CharT, char_traits < _CharT > > :: _S_pad ( __io, __fill, __new, __cs,
        __w, __len, true );
      __len = static_cast < int > ( __w );
    }
# 916 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _ValueT >
    int
    __int_to_char ( _CharT * __bufend, _ValueT __v, const _CharT * __lit,
    ios_base :: fmtflags __flags, bool __dec )
    {
      _CharT * __buf = __bufend;
      if ( __builtin_expect ( __dec, true ) )
 {

   do
     {
       * -- __buf = __lit [ ( __v % 10 ) + __num_base :: _S_odigits ];
       __v /= 10;
     }
   while ( __v != 0 );
 }
      else if ( ( __flags & ios_base :: basefield ) == ios_base :: oct )
 {

   do
     {
       * -- __buf = __lit [ ( __v & 7 ) + __num_base :: _S_odigits ];
       __v >>= 3;
     }
   while ( __v != 0 );
 }
      else
 {

   const bool __uppercase = __flags & ios_base :: uppercase;
   const int __case_offset = __uppercase ? __num_base :: _S_oudigits
                                         : __num_base :: _S_odigits;
   do
     {
       * -- __buf = __lit [ ( __v & 15 ) + __case_offset ];
       __v >>= 4;
     }
   while ( __v != 0 );
 }
      return __bufend - __buf;
    }
# 960 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    void
    num_put < _CharT, _OutIter > ::
    _M_group_int ( const char * __grouping, size_t __grouping_size, _CharT __sep,
   ios_base &, _CharT * __new, _CharT * __cs, int & __len ) const
    {
      _CharT * __p = std :: __add_grouping ( __new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len );
      __len = __p - __new;
    }
# 971 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    template < typename _ValueT >
      _OutIter
      num_put < _CharT, _OutIter > ::
      _M_insert_int ( _OutIter __s, ios_base & __io, _CharT __fill,
      _ValueT __v ) const
      {
 using __gnu_cxx :: __add_unsigned;
 typedef typename __add_unsigned < _ValueT > :: __type __unsigned_type;
 typedef __numpunct_cache < _CharT > __cache_type;
 __use_cache < __cache_type > __uc;
 const locale & __loc = __io . _M_getloc ( );
 const __cache_type * __lc = __uc ( __loc );
 const _CharT * __lit = __lc -> _M_atoms_out;
 const ios_base :: fmtflags __flags = __io . flags ( );


 const int __ilen = 5 * sizeof ( _ValueT );
 _CharT * __cs = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
            * __ilen ) );



 const ios_base :: fmtflags __basefield = __flags & ios_base :: basefield;
 const bool __dec = ( __basefield != ios_base :: oct
       && __basefield != ios_base :: hex );
 const __unsigned_type __u = ( __v > 0 || ! __dec ) ? __v : - __v;
  int __len = __int_to_char ( __cs + __ilen, __u, __lit, __flags, __dec );
 __cs += __ilen - __len;


 if ( __lc -> _M_use_grouping )
   {


     _CharT * __cs2 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * ( __len + 1 )
          * 2 ) );
     _M_group_int ( __lc -> _M_grouping, __lc -> _M_grouping_size,
    __lc -> _M_thousands_sep, __io, __cs2 + 2, __cs, __len );
     __cs = __cs2 + 2;
   }


 if ( __builtin_expect ( __dec, true ) )
   {

     if ( __v > 0 )
       {
  if ( __flags & ios_base :: showpos
      && numeric_limits < _ValueT > :: is_signed )
    * -- __cs = __lit [ __num_base :: _S_oplus ], ++ __len;
       }
     else if ( __v )
       * -- __cs = __lit [ __num_base :: _S_ominus ], ++ __len;
   }
 else if ( __flags & ios_base :: showbase && __v )
   {
     if ( __basefield == ios_base :: oct )
       * -- __cs = __lit [ __num_base :: _S_odigits ], ++ __len;
     else
       {

  const bool __uppercase = __flags & ios_base :: uppercase;
  * -- __cs = __lit [ __num_base :: _S_ox + __uppercase ];

  * -- __cs = __lit [ __num_base :: _S_odigits ];
  __len += 2;
       }
   }


 const streamsize __w = __io . width ( );
 if ( __w > static_cast < streamsize > ( __len ) )
   {
     _CharT * __cs3 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * __w ) );
     _M_pad ( __fill, __w, __io, __cs3, __cs, __len );
     __cs = __cs3;
   }
 __io . width ( 0 );



 return std :: __write ( __s, __cs, __len );
      }
# 1058 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    void
    num_put < _CharT, _OutIter > ::
    _M_group_float ( const char * __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT * __p, _CharT * __new,
     _CharT * __cs, int & __len ) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT * __p2 = std :: __add_grouping ( __new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen );


      int __newlen = __p2 - __new;
      if ( __p )
 {
   char_traits < _CharT > :: copy ( __p2, __p, __len - __declen );
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 1093 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    template < typename _ValueT >
      _OutIter
      num_put < _CharT, _OutIter > ::
      _M_insert_float ( _OutIter __s, ios_base & __io, _CharT __fill, char __mod,
         _ValueT __v ) const
      {
 typedef __numpunct_cache < _CharT > __cache_type;
 __use_cache < __cache_type > __uc;
 const locale & __loc = __io . _M_getloc ( );
 const __cache_type * __lc = __uc ( __loc );


 const streamsize __prec = __io . precision ( ) < 0 ? 6 : __io . precision ( );

 const int __max_digits = numeric_limits < _ValueT > :: digits10;


 int __len;

 char __fbuf [ 16 ];
 __num_base :: _S_format_float ( __io, __fbuf, __mod );




 int __cs_size = __max_digits * 3;
 char * __cs = static_cast < char * > ( __builtin_alloca ( __cs_size ) );
 __len = std :: __convert_from_v ( _S_get_c_locale ( ), __cs, __cs_size,
          __fbuf, __prec, __v );


 if ( __len >= __cs_size )
   {
     __cs_size = __len + 1;
     __cs = static_cast < char * > ( __builtin_alloca ( __cs_size ) );
     __len = std :: __convert_from_v ( _S_get_c_locale ( ), __cs, __cs_size,
       __fbuf, __prec, __v );
   }



 const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );

 _CharT * __ws = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
            * __len ) );
 __ctype . widen ( __cs, __cs + __len, __ws );


 _CharT * __wp = 0;
 const char * __p = char_traits < char > :: find ( __cs, __len, '.' );
 if ( __p )
   {
     __wp = __ws + ( __p - __cs );
     * __wp = __lc -> _M_decimal_point;
   }




 if ( __lc -> _M_use_grouping
     && ( __wp || __len < 3 || ( __cs [ 1 ] <= '9' && __cs [ 2 ] <= '9'
          && __cs [ 1 ] >= '0' && __cs [ 2 ] >= '0' ) ) )
   {


     _CharT * __ws2 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * __len * 2 ) );

     streamsize __off = 0;
     if ( __cs [ 0 ] == '-' || __cs [ 0 ] == '+' )
       {
  __off = 1;
  __ws2 [ 0 ] = __ws [ 0 ];
  __len -= 1;
       }

     _M_group_float ( __lc -> _M_grouping, __lc -> _M_grouping_size,
      __lc -> _M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len );
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io . width ( );
 if ( __w > static_cast < streamsize > ( __len ) )
   {
     _CharT * __ws3 = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
          * __w ) );
     _M_pad ( __fill, __w, __io, __ws3, __ws, __len );
     __ws = __ws3;
   }
 __io . width ( 0 );



 return std :: __write ( __s, __ws, __len );
      }
# 1211 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill, bool __v ) const
    {
      const ios_base :: fmtflags __flags = __io . flags ( );
      if ( ( __flags & ios_base :: boolalpha ) == 0 )
        {
          const long __l = __v;
          __s = _M_insert_int ( __s, __io, __fill, __l );
        }
      else
        {
   typedef __numpunct_cache < _CharT > __cache_type;
   __use_cache < __cache_type > __uc;
   const locale & __loc = __io . _M_getloc ( );
   const __cache_type * __lc = __uc ( __loc );

   const _CharT * __name = __v ? __lc -> _M_truename
                              : __lc -> _M_falsename;
   int __len = __v ? __lc -> _M_truename_size
                   : __lc -> _M_falsename_size;

   const streamsize __w = __io . width ( );
   if ( __w > static_cast < streamsize > ( __len ) )
     {
       _CharT * __cs
  = static_cast < _CharT * > ( __builtin_alloca ( sizeof ( _CharT )
       * __w ) );
       _M_pad ( __fill, __w, __io, __cs, __name, __len );
       __name = __cs;
     }
   __io . width ( 0 );
   __s = std :: __write ( __s, __name, __len );
 }
      return __s;
    }
# 1249 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill, long __v ) const
    { return _M_insert_int ( __s, __io, __fill, __v ); }
# 1255 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill,
           unsigned long __v ) const
    { return _M_insert_int ( __s, __io, __fill, __v ); }
# 1263 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill, long long __v ) const
    { return _M_insert_int ( __s, __io, __fill, __v ); }
# 1269 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill,
           unsigned long long __v ) const
    { return _M_insert_int ( __s, __io, __fill, __v ); }
# 1277 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill, double __v ) const
    { return _M_insert_float ( __s, __io, __fill, char ( ), __v ); }
# 1291 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill,
    long double __v ) const
    { return _M_insert_float ( __s, __io, __fill, 'L', __v ); }
# 1298 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    num_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type __fill,
           const void * __v ) const
    {
      const ios_base :: fmtflags __flags = __io . flags ( );
      const ios_base :: fmtflags __fmt = ~ ( ios_base :: basefield
      | ios_base :: uppercase
      | ios_base :: internal );
      __io . flags ( __flags & __fmt | ( ios_base :: hex | ios_base :: showbase ) );

      __s = _M_insert_int ( __s, __io, __fill,
     reinterpret_cast < unsigned long > ( __v ) );
      __io . flags ( __flags );
      return __s;
    }
# 1316 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    template < bool _Intl >
      _InIter
      money_get < _CharT, _InIter > ::
      _M_extract ( iter_type __beg, iter_type __end, ios_base & __io,
   ios_base :: iostate & __err, string & __units ) const
      {
 typedef char_traits < _CharT > __traits_type;
 typedef typename string_type :: size_type size_type;
 typedef money_base :: part part;
 typedef __moneypunct_cache < _CharT, _Intl > __cache_type;

 const locale & __loc = __io . _M_getloc ( );
 const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );

 __use_cache < __cache_type > __uc;
 const __cache_type * __lc = __uc ( __loc );
 const char_type * __lit = __lc -> _M_atoms;


 bool __negative = false;

 size_type __sign_size = 0;

 const bool __mandatory_sign = ( __lc -> _M_positive_sign_size
           && __lc -> _M_negative_sign_size );

 string __grouping_tmp;
 if ( __lc -> _M_use_grouping )
   __grouping_tmp . reserve ( 32 );

 int __last_pos = 0;

 int __n = 0;

 bool __testvalid = true;

 bool __testdecfound = false;


 string __res;
 __res . reserve ( 32 );

 const char_type * __lit_zero = __lit + money_base :: _S_zero;
 const money_base :: pattern __p = __lc -> _M_neg_format;
 for ( int __i = 0; __i < 4 && __testvalid; ++ __i )
   {
     const part __which = static_cast < part > ( __p . field [ __i ] );
     switch ( __which )
       {
       case money_base :: symbol :




  if ( __io . flags ( ) & ios_base :: showbase || __sign_size > 1
      || __i == 0
      || ( __i == 1 && ( __mandatory_sign
         || ( static_cast < part > ( __p . field [ 0 ] )
      == money_base :: sign )
         || ( static_cast < part > ( __p . field [ 2 ] )
      == money_base :: space ) ) )
      || ( __i == 2 && ( ( static_cast < part > ( __p . field [ 3 ] )
          == money_base :: value )
         || __mandatory_sign
         && ( static_cast < part > ( __p . field [ 3 ] )
      == money_base :: sign ) ) ) )
    {
      const size_type __len = __lc -> _M_curr_symbol_size;
      size_type __j = 0;
      for (; __beg != __end && __j < __len
      && * __beg == __lc -> _M_curr_symbol [ __j ];
    ++ __beg, ++ __j );
      if ( __j != __len
   && ( __j || __io . flags ( ) & ios_base :: showbase ) )
        __testvalid = false;
    }
  break;
       case money_base :: sign :

  if ( __lc -> _M_positive_sign_size && __beg != __end
      && * __beg == __lc -> _M_positive_sign [ 0 ] )
    {
      __sign_size = __lc -> _M_positive_sign_size;
      ++ __beg;
    }
  else if ( __lc -> _M_negative_sign_size && __beg != __end
    && * __beg == __lc -> _M_negative_sign [ 0 ] )
    {
      __negative = true;
      __sign_size = __lc -> _M_negative_sign_size;
      ++ __beg;
    }
  else if ( __lc -> _M_positive_sign_size
    && ! __lc -> _M_negative_sign_size )


    __negative = true;
  else if ( __mandatory_sign )
    __testvalid = false;
  break;
       case money_base :: value :


  for (; __beg != __end; ++ __beg )
    {
      const char_type __c = * __beg;
      const char_type * __q = __traits_type :: find ( __lit_zero,
              10, __c );
      if ( __q != 0 )
        {
   __res += money_base :: _S_atoms [ __q - __lit ];
   ++ __n;
        }
      else if ( __c == __lc -> _M_decimal_point
        && ! __testdecfound )
        {
   __last_pos = __n;
   __n = 0;
   __testdecfound = true;
        }
      else if ( __lc -> _M_use_grouping
        && __c == __lc -> _M_thousands_sep
        && ! __testdecfound )
        {
   if ( __n )
     {

       __grouping_tmp += static_cast < char > ( __n );
       __n = 0;
     }
   else
     {
       __testvalid = false;
       break;
     }
        }
      else
        break;
    }
  if ( __res . empty ( ) )
    __testvalid = false;
  break;
       case money_base :: space :

  if ( __beg != __end && __ctype . is ( ctype_base :: space, * __beg ) )
    ++ __beg;
  else
    __testvalid = false;
       case money_base :: none :

  if ( __i != 3 )
    for (; __beg != __end
    && __ctype . is ( ctype_base :: space, * __beg ); ++ __beg );
  break;
       }
   }


 if ( __sign_size > 1 && __testvalid )
   {
     const char_type * __sign = __negative ? __lc -> _M_negative_sign
                                          : __lc -> _M_positive_sign;
     size_type __i = 1;
     for (; __beg != __end && __i < __sign_size
     && * __beg == __sign [ __i ]; ++ __beg, ++ __i );

     if ( __i != __sign_size )
       __testvalid = false;
   }

 if ( __testvalid )
   {

     if ( __res . size ( ) > 1 )
       {
  const size_type __first = __res . find_first_not_of ( '0' );
  const bool __only_zeros = __first == string :: npos;
  if ( __first )
    __res . erase ( 0, __only_zeros ? __res . size ( ) - 1 : __first );
       }


     if ( __negative && __res [ 0 ] != '0' )
       __res . insert ( __res . begin ( ), '-' );


     if ( __grouping_tmp . size ( ) )
       {

  __grouping_tmp += static_cast < char > ( __testdecfound ? __last_pos
                         : __n );
  if ( ! std :: __verify_grouping ( __lc -> _M_grouping,
         __lc -> _M_grouping_size,
         __grouping_tmp ) )
    __err |= ios_base :: failbit;
       }


     if ( __testdecfound && __lc -> _M_frac_digits > 0
  && __n != __lc -> _M_frac_digits )
       __testvalid = false;
   }


 if ( ! __testvalid )
   __err |= ios_base :: failbit;
 else
   __units . swap ( __res );


 if ( __beg == __end )
   __err |= ios_base :: eofbit;
 return __beg;
      }
# 1547 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    money_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, bool __intl, ios_base & __io,
    ios_base :: iostate & __err, long double & __units ) const
    {
      string __str;
      __beg = __intl ? _M_extract < true > ( __beg, __end, __io, __err, __str )
              : _M_extract < false > ( __beg, __end, __io, __err, __str );
      std :: __convert_to_v ( __str . c_str ( ), __units, __err, _S_get_c_locale ( ) );
      return __beg;
    }
# 1560 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    money_get < _CharT, _InIter > ::
    do_get ( iter_type __beg, iter_type __end, bool __intl, ios_base & __io,
    ios_base :: iostate & __err, string_type & __digits ) const
    {
      typedef typename string :: size_type size_type;

      const locale & __loc = __io . _M_getloc ( );
      const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );

      string __str;
      __beg = __intl ? _M_extract < true > ( __beg, __end, __io, __err, __str )
              : _M_extract < false > ( __beg, __end, __io, __err, __str );
      const size_type __len = __str . size ( );
      if ( __len )
 {
   __digits . resize ( __len );
   __ctype . widen ( __str . data ( ), __str . data ( ) + __len, & __digits [ 0 ] );
 }
      return __beg;
    }
# 1583 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    template < bool _Intl >
      _OutIter
      money_put < _CharT, _OutIter > ::
      _M_insert ( iter_type __s, ios_base & __io, char_type __fill,
  const string_type & __digits ) const
      {
 typedef typename string_type :: size_type size_type;
 typedef money_base :: part part;
 typedef __moneypunct_cache < _CharT, _Intl > __cache_type;

 const locale & __loc = __io . _M_getloc ( );
 const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );

 __use_cache < __cache_type > __uc;
 const __cache_type * __lc = __uc ( __loc );
 const char_type * __lit = __lc -> _M_atoms;



 const char_type * __beg = __digits . data ( );

 money_base :: pattern __p;
 const char_type * __sign;
 size_type __sign_size;
 if ( ! ( * __beg == __lit [ money_base :: _S_minus ] ) )
   {
     __p = __lc -> _M_pos_format;
     __sign = __lc -> _M_positive_sign;
     __sign_size = __lc -> _M_positive_sign_size;
   }
 else
   {
     __p = __lc -> _M_neg_format;
     __sign = __lc -> _M_negative_sign;
     __sign_size = __lc -> _M_negative_sign_size;
     if ( __digits . size ( ) )
       ++ __beg;
   }


 size_type __len = __ctype . scan_not ( ctype_base :: digit, __beg,
        __beg + __digits . size ( ) ) - __beg;
 if ( __len )
   {



     string_type __value;
     __value . reserve ( 2 * __len );



     long __paddec = __len - __lc -> _M_frac_digits;
     if ( __paddec > 0 )
         {
  if ( __lc -> _M_frac_digits < 0 )
    __paddec = __len;
    if ( __lc -> _M_grouping_size )
      {
      __value . assign ( 2 * __paddec, char_type ( ) );
       _CharT * __vend =
        std :: __add_grouping ( & __value [ 0 ], __lc -> _M_thousands_sep,
       __lc -> _M_grouping,
       __lc -> _M_grouping_size,
       __beg, __beg + __paddec );
      __value . erase ( __vend - & __value [ 0 ] );
      }
    else
    __value . assign ( __beg, __paddec );
       }


     if ( __lc -> _M_frac_digits > 0 )
       {
  __value += __lc -> _M_decimal_point;
  if ( __paddec >= 0 )
    __value . append ( __beg + __paddec, __lc -> _M_frac_digits );
  else
    {

      __value . append ( - __paddec, __lit [ money_base :: _S_zero ] );
      __value . append ( __beg, __len );
    }
         }


     const ios_base :: fmtflags __f = __io . flags ( )
                                    & ios_base :: adjustfield;
     __len = __value . size ( ) + __sign_size;
     __len += ( ( __io . flags ( ) & ios_base :: showbase )
        ? __lc -> _M_curr_symbol_size : 0 );

     string_type __res;
     __res . reserve ( 2 * __len );

     const size_type __width = static_cast < size_type > ( __io . width ( ) );
     const bool __testipad = ( __f == ios_base :: internal
         && __len < __width );

     for ( int __i = 0; __i < 4; ++ __i )
       {
  const part __which = static_cast < part > ( __p . field [ __i ] );
  switch ( __which )
    {
    case money_base :: symbol :
      if ( __io . flags ( ) & ios_base :: showbase )
        __res . append ( __lc -> _M_curr_symbol,
       __lc -> _M_curr_symbol_size );
      break;
    case money_base :: sign :



      if ( __sign_size )
        __res += __sign [ 0 ];
      break;
    case money_base :: value :
      __res += __value;
      break;
    case money_base :: space :



      if ( __testipad )
        __res . append ( __width - __len, __fill );
      else
        __res += __fill;
      break;
    case money_base :: none :
      if ( __testipad )
        __res . append ( __width - __len, __fill );
      break;
    }
       }


     if ( __sign_size > 1 )
       __res . append ( __sign + 1, __sign_size - 1 );


     __len = __res . size ( );
     if ( __width > __len )
       {
  if ( __f == ios_base :: left )

    __res . append ( __width - __len, __fill );
  else

    __res . insert ( 0, __width - __len, __fill );
  __len = __width;
       }


     __s = std :: __write ( __s, __res . data ( ), __len );
   }
 __io . width ( 0 );
 return __s;
      }
# 1752 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    money_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, bool __intl, ios_base & __io, char_type __fill,
    long double __units ) const
    {
      const locale __loc = __io . getloc ( );
      const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );


      int __cs_size = 64;
      char * __cs = static_cast < char * > ( __builtin_alloca ( __cs_size ) );


      int __len = std :: __convert_from_v ( _S_get_c_locale ( ), __cs, __cs_size,
     "%.*Lf", 0, __units );

      if ( __len >= __cs_size )
 {
   __cs_size = __len + 1;
   __cs = static_cast < char * > ( __builtin_alloca ( __cs_size ) );
   __len = std :: __convert_from_v ( _S_get_c_locale ( ), __cs, __cs_size,
     "%.*Lf", 0, __units );
 }







      string_type __digits ( __len, char_type ( ) );
      __ctype . widen ( __cs, __cs + __len, & __digits [ 0 ] );
      return __intl ? _M_insert < true > ( __s, __io, __fill, __digits )
             : _M_insert < false > ( __s, __io, __fill, __digits );
    }
# 1789 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    money_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, bool __intl, ios_base & __io, char_type __fill,
    const string_type & __digits ) const
    { return __intl ? _M_insert < true > ( __s, __io, __fill, __digits )
             : _M_insert < false > ( __s, __io, __fill, __digits ); }
# 1802 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    time_base :: dateorder
    time_get < _CharT, _InIter > :: do_date_order ( ) const
    { return time_base :: no_order; }
# 1809 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    time_get < _CharT, _InIter > ::
    _M_extract_via_format ( iter_type __beg, iter_type __end, ios_base & __io,
     ios_base :: iostate & __err, tm * __tm,
     const _CharT * __format ) const
    {
      const locale & __loc = __io . _M_getloc ( );
      const __timepunct < _CharT > & __tp = use_facet < __timepunct < _CharT > > ( __loc );
      const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );
      const size_t __len = char_traits < _CharT > :: length ( __format );

      ios_base :: iostate __tmperr = ios_base :: goodbit;
      for ( size_t __i = 0; __beg != __end && __i < __len && ! __tmperr; ++ __i )
 {
   if ( __ctype . narrow ( __format [ __i ], 0 ) == '%' )
     {

       char __c = __ctype . narrow ( __format [ ++ __i ], 0 );
       int __mem = 0;
       if ( __c == 'E' || __c == 'O' )
  __c = __ctype . narrow ( __format [ ++ __i ], 0 );
       switch ( __c )
  {
    const char * __cs;
    _CharT __wcs [ 10 ];
  case 'a' :

    const char_type * __days1 [ 7 ];
    __tp . _M_days_abbreviated ( __days1 );
    __beg = _M_extract_name ( __beg, __end, __tm -> tm_wday, __days1,
       7, __io, __tmperr );
    break;
  case 'A' :

    const char_type * __days2 [ 7 ];
    __tp . _M_days ( __days2 );
    __beg = _M_extract_name ( __beg, __end, __tm -> tm_wday, __days2,
       7, __io, __tmperr );
    break;
  case 'h' :
  case 'b' :

    const char_type * __months1 [ 12 ];
    __tp . _M_months_abbreviated ( __months1 );
    __beg = _M_extract_name ( __beg, __end, __tm -> tm_mon,
       __months1, 12, __io, __tmperr );
    break;
  case 'B' :

    const char_type * __months2 [ 12 ];
    __tp . _M_months ( __months2 );
    __beg = _M_extract_name ( __beg, __end, __tm -> tm_mon,
       __months2, 12, __io, __tmperr );
    break;
  case 'c' :

    const char_type * __dt [ 2 ];
    __tp . _M_date_time_formats ( __dt );
    __beg = _M_extract_via_format ( __beg, __end, __io, __tmperr,
      __tm, __dt [ 0 ] );
    break;
  case 'd' :

    __beg = _M_extract_num ( __beg, __end, __tm -> tm_mday, 1, 31, 2,
      __io, __tmperr );
    break;
  case 'e' :


    if ( __ctype . is ( ctype_base :: space, * __beg ) )
      __beg = _M_extract_num ( ++ __beg, __end, __tm -> tm_mday, 1, 9,
        1, __io, __tmperr );
    else
      __beg = _M_extract_num ( __beg, __end, __tm -> tm_mday, 10, 31,
        2, __io, __tmperr );
    break;
  case 'D' :

    __cs = "%m/%d/%y";
    __ctype . widen ( __cs, __cs + 9, __wcs );
    __beg = _M_extract_via_format ( __beg, __end, __io, __tmperr,
      __tm, __wcs );
    break;
  case 'H' :

    __beg = _M_extract_num ( __beg, __end, __tm -> tm_hour, 0, 23, 2,
      __io, __tmperr );
    break;
  case 'I' :

    __beg = _M_extract_num ( __beg, __end, __tm -> tm_hour, 1, 12, 2,
      __io, __tmperr );
    break;
  case 'm' :

    __beg = _M_extract_num ( __beg, __end, __mem, 1, 12, 2,
      __io, __tmperr );
    if ( ! __tmperr )
      __tm -> tm_mon = __mem - 1;
    break;
  case 'M' :

    __beg = _M_extract_num ( __beg, __end, __tm -> tm_min, 0, 59, 2,
      __io, __tmperr );
    break;
  case 'n' :
    if ( __ctype . narrow ( * __beg, 0 ) == '\n' )
      ++ __beg;
    else
      __tmperr |= ios_base :: failbit;
    break;
  case 'R' :

    __cs = "%H:%M";
    __ctype . widen ( __cs, __cs + 6, __wcs );
    __beg = _M_extract_via_format ( __beg, __end, __io, __tmperr,
      __tm, __wcs );
    break;
  case 'S' :



    __beg = _M_extract_num ( __beg, __end, __tm -> tm_sec, 0, 60, 2,



      __io, __tmperr );
    break;
  case 't' :
    if ( __ctype . narrow ( * __beg, 0 ) == '\t' )
      ++ __beg;
    else
      __tmperr |= ios_base :: failbit;
    break;
  case 'T' :

    __cs = "%H:%M:%S";
    __ctype . widen ( __cs, __cs + 9, __wcs );
    __beg = _M_extract_via_format ( __beg, __end, __io, __tmperr,
      __tm, __wcs );
    break;
  case 'x' :

    const char_type * __dates [ 2 ];
    __tp . _M_date_formats ( __dates );
    __beg = _M_extract_via_format ( __beg, __end, __io, __tmperr,
      __tm, __dates [ 0 ] );
    break;
  case 'X' :

    const char_type * __times [ 2 ];
    __tp . _M_time_formats ( __times );
    __beg = _M_extract_via_format ( __beg, __end, __io, __tmperr,
      __tm, __times [ 0 ] );
    break;
  case 'y' :
  case 'C' :

    __beg = _M_extract_num ( __beg, __end, __tm -> tm_year, 0, 99, 2,
      __io, __tmperr );
    break;
  case 'Y' :

    __beg = _M_extract_num ( __beg, __end, __mem, 0, 9999, 4,
      __io, __tmperr );
    if ( ! __tmperr )
      __tm -> tm_year = __mem - 1900;
    break;
  case 'Z' :

    if ( __ctype . is ( ctype_base :: upper, * __beg ) )
      {
        int __tmp;
        __beg = _M_extract_name ( __beg, __end, __tmp,
           __timepunct_cache < _CharT > :: _S_timezones,
           14, __io, __tmperr );


        if ( __beg != __end && ! __tmperr && __tmp == 0
     && ( * __beg == __ctype . widen ( '-' )
         || * __beg == __ctype . widen ( '+' ) ) )
   {
     __beg = _M_extract_num ( __beg, __end, __tmp, 0, 23, 2,
       __io, __tmperr );
     __beg = _M_extract_num ( __beg, __end, __tmp, 0, 59, 2,
       __io, __tmperr );
   }
      }
    else
      __tmperr |= ios_base :: failbit;
    break;
  default :

    __tmperr |= ios_base :: failbit;
  }
     }
   else
     {

       if ( __format [ __i ] == * __beg )
  ++ __beg;
       else
  __tmperr |= ios_base :: failbit;
     }
 }

      if ( __tmperr )
 __err |= ios_base :: failbit;

      return __beg;
    }
# 2022 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    time_get < _CharT, _InIter > ::
    _M_extract_num ( iter_type __beg, iter_type __end, int & __member,
     int __min, int __max, size_t __len,
     ios_base & __io, ios_base :: iostate & __err ) const
    {
      const locale & __loc = __io . _M_getloc ( );
      const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );


      int __mult = __len == 2 ? 10 : ( __len == 4 ? 1000 : 1 );

      ++ __min;
      size_t __i = 0;
      int __value = 0;
      for (; __beg != __end && __i < __len; ++ __beg, ++ __i )
 {
   const char __c = __ctype . narrow ( * __beg, '*' );
   if ( __c >= '0' && __c <= '9' )
     {
       __value = __value * 10 + ( __c - '0' );
       const int __valuec = __value * __mult;
       if ( __valuec > __max || __valuec + __mult < __min )
  break;
       __mult /= 10;
     }
   else
     break;
 }
      if ( __i == __len )
 __member = __value;
      else
 __err |= ios_base :: failbit;

      return __beg;
    }
# 2062 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    time_get < _CharT, _InIter > ::
    _M_extract_name ( iter_type __beg, iter_type __end, int & __member,
      const _CharT * * __names, size_t __indexlen,
      ios_base & __io, ios_base :: iostate & __err ) const
    {
      typedef char_traits < _CharT > __traits_type;
      const locale & __loc = __io . _M_getloc ( );
      const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );

      int * __matches = static_cast < int * > ( __builtin_alloca ( sizeof ( int )
         * __indexlen ) );
      size_t __nmatches = 0;
      size_t __pos = 0;
      bool __testvalid = true;
      const char_type * __name;





      if ( __beg != __end )
 {
   const char_type __c = * __beg;
   for ( size_t __i1 = 0; __i1 < __indexlen; ++ __i1 )
     if ( __c == __names [ __i1 ] [ 0 ]
  || __c == __ctype . toupper ( __names [ __i1 ] [ 0 ] ) )
       __matches [ __nmatches ++ ] = __i1;
 }

      while ( __nmatches > 1 )
 {

   size_t __minlen = __traits_type :: length ( __names [ __matches [ 0 ] ] );
   for ( size_t __i2 = 1; __i2 < __nmatches; ++ __i2 )
     __minlen = std :: min ( __minlen,
         __traits_type :: length ( __names [ __matches [ __i2 ] ] ) );
   ++ __beg, ++ __pos;
   if ( __pos < __minlen && __beg != __end )
     for ( size_t __i3 = 0; __i3 < __nmatches; )
       {
  __name = __names [ __matches [ __i3 ] ];
  if ( ! ( __name [ __pos ] == * __beg ) )
    __matches [ __i3 ] = __matches [ -- __nmatches ];
  else
    ++ __i3;
       }
   else
     break;
 }

      if ( __nmatches == 1 )
 {

   ++ __beg, ++ __pos;
   __name = __names [ __matches [ 0 ] ];
   const size_t __len = __traits_type :: length ( __name );
   while ( __pos < __len && __beg != __end && __name [ __pos ] == * __beg )
     ++ __beg, ++ __pos;

   if ( __len == __pos )
     __member = __matches [ 0 ];
   else
     __testvalid = false;
 }
      else
 __testvalid = false;
      if ( ! __testvalid )
 __err |= ios_base :: failbit;

      return __beg;
    }
# 2136 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    time_get < _CharT, _InIter > ::
    do_get_time ( iter_type __beg, iter_type __end, ios_base & __io,
  ios_base :: iostate & __err, tm * __tm ) const
    {
      const locale & __loc = __io . _M_getloc ( );
      const __timepunct < _CharT > & __tp = use_facet < __timepunct < _CharT > > ( __loc );
      const char_type * __times [ 2 ];
      __tp . _M_time_formats ( __times );
      __beg = _M_extract_via_format ( __beg, __end, __io, __err,
        __tm, __times [ 0 ] );
      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
    }
# 2153 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    time_get < _CharT, _InIter > ::
    do_get_date ( iter_type __beg, iter_type __end, ios_base & __io,
  ios_base :: iostate & __err, tm * __tm ) const
    {
      const locale & __loc = __io . _M_getloc ( );
      const __timepunct < _CharT > & __tp = use_facet < __timepunct < _CharT > > ( __loc );
      const char_type * __dates [ 2 ];
      __tp . _M_date_formats ( __dates );
      __beg = _M_extract_via_format ( __beg, __end, __io, __err,
        __tm, __dates [ 0 ] );
      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
    }
# 2170 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    time_get < _CharT, _InIter > ::
    do_get_weekday ( iter_type __beg, iter_type __end, ios_base & __io,
     ios_base :: iostate & __err, tm * __tm ) const
    {
      typedef char_traits < _CharT > __traits_type;
      const locale & __loc = __io . _M_getloc ( );
      const __timepunct < _CharT > & __tp = use_facet < __timepunct < _CharT > > ( __loc );
      const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );
      const char_type * __days [ 7 ];
      __tp . _M_days_abbreviated ( __days );
      int __tmpwday;
      ios_base :: iostate __tmperr = ios_base :: goodbit;
      __beg = _M_extract_name ( __beg, __end, __tmpwday, __days, 7,
         __io, __tmperr );







      if ( ! __tmperr && __beg != __end )
 {
   size_t __pos = __traits_type :: length ( __days [ __tmpwday ] );
   __tp . _M_days ( __days );
   const char_type * __name = __days [ __tmpwday ];
   if ( __name [ __pos ] == * __beg )
     {

       const size_t __len = __traits_type :: length ( __name );
       while ( __pos < __len && __beg != __end
       && __name [ __pos ] == * __beg )
  ++ __beg, ++ __pos;
       if ( __len != __pos )
  __tmperr |= ios_base :: failbit;
     }
 }
      if ( ! __tmperr )
 __tm -> tm_wday = __tmpwday;
      else
 __err |= ios_base :: failbit;

      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
     }
# 2219 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    time_get < _CharT, _InIter > ::
    do_get_monthname ( iter_type __beg, iter_type __end,
                     ios_base & __io, ios_base :: iostate & __err, tm * __tm ) const
    {
      typedef char_traits < _CharT > __traits_type;
      const locale & __loc = __io . _M_getloc ( );
      const __timepunct < _CharT > & __tp = use_facet < __timepunct < _CharT > > ( __loc );
      const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );
      const char_type * __months [ 12 ];
      __tp . _M_months_abbreviated ( __months );
      int __tmpmon;
      ios_base :: iostate __tmperr = ios_base :: goodbit;
      __beg = _M_extract_name ( __beg, __end, __tmpmon, __months, 12,
         __io, __tmperr );







      if ( ! __tmperr && __beg != __end )
 {
   size_t __pos = __traits_type :: length ( __months [ __tmpmon ] );
   __tp . _M_months ( __months );
   const char_type * __name = __months [ __tmpmon ];
   if ( __name [ __pos ] == * __beg )
     {

       const size_t __len = __traits_type :: length ( __name );
       while ( __pos < __len && __beg != __end
       && __name [ __pos ] == * __beg )
  ++ __beg, ++ __pos;
       if ( __len != __pos )
  __tmperr |= ios_base :: failbit;
     }
 }
      if ( ! __tmperr )
 __tm -> tm_mon = __tmpmon;
      else
 __err |= ios_base :: failbit;

      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
    }
# 2268 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _InIter >
    _InIter
    time_get < _CharT, _InIter > ::
    do_get_year ( iter_type __beg, iter_type __end, ios_base & __io,
  ios_base :: iostate & __err, tm * __tm ) const
    {
      const locale & __loc = __io . _M_getloc ( );
      const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );

      size_t __i = 0;
      int __value = 0;
      for (; __beg != __end && __i < 4; ++ __beg, ++ __i )
 {
   const char __c = __ctype . narrow ( * __beg, '*' );
   if ( __c >= '0' && __c <= '9' )
     __value = __value * 10 + ( __c - '0' );
   else
     break;
 }
      if ( __i == 2 || __i == 4 )
 __tm -> tm_year = __i == 2 ? __value : __value - 1900;
      else
 __err |= ios_base :: failbit;

      if ( __beg == __end )
 __err |= ios_base :: eofbit;
      return __beg;
    }
# 2297 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    time_put < _CharT, _OutIter > ::
    put ( iter_type __s, ios_base & __io, char_type __fill, const tm * __tm,
 const _CharT * __beg, const _CharT * __end ) const
    {
      const locale & __loc = __io . _M_getloc ( );
      ctype < _CharT > const & __ctype = use_facet < ctype < _CharT > > ( __loc );
      for (; __beg != __end; ++ __beg )
 if ( __ctype . narrow ( * __beg, 0 ) != '%' )
   {
     * __s = * __beg;
     ++ __s;
   }
 else if ( ++ __beg != __end )
   {
     char __format;
     char __mod = 0;
     const char __c = __ctype . narrow ( * __beg, 0 );
     if ( __c != 'E' && __c != 'O' )
       __format = __c;
     else if ( ++ __beg != __end )
       {
  __mod = __c;
  __format = __ctype . narrow ( * __beg, 0 );
       }
     else
       break;
     __s = this -> do_put ( __s, __io, __fill, __tm, __format, __mod );
   }
 else
   break;
      return __s;
    }
# 2332 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _OutIter >
    _OutIter
    time_put < _CharT, _OutIter > ::
    do_put ( iter_type __s, ios_base & __io, char_type, const tm * __tm,
    char __format, char __mod ) const
    {
      const locale & __loc = __io . _M_getloc ( );
      ctype < _CharT > const & __ctype = use_facet < ctype < _CharT > > ( __loc );
      __timepunct < _CharT > const & __tp = use_facet < __timepunct < _CharT > > ( __loc );



      const size_t __maxlen = 128;
      char_type * __res =
       static_cast < char_type * > ( __builtin_alloca ( sizeof ( char_type ) * __maxlen ) );






      char_type __fmt [ 4 ];
      __fmt [ 0 ] = __ctype . widen ( '%' );
      if ( ! __mod )
 {
   __fmt [ 1 ] = __format;
   __fmt [ 2 ] = char_type ( );
 }
      else
 {
   __fmt [ 1 ] = __mod;
   __fmt [ 2 ] = __format;
   __fmt [ 3 ] = char_type ( );
 }

      __tp . _M_put ( __res, __maxlen, __fmt, __tm );


      return std :: __write ( __s, __res, char_traits < char_type > :: length ( __res ) );
    }
# 2374 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT >
    int
    collate < _CharT > :: _M_compare ( const _CharT *, const _CharT * ) const
    { return 0; }
# 2380 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT >
    size_t
    collate < _CharT > :: _M_transform ( _CharT *, const _CharT *, size_t ) const
    { return 0; }
# 2385 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT >
    int
    collate < _CharT > ::
    do_compare ( const _CharT * __lo1, const _CharT * __hi1,
        const _CharT * __lo2, const _CharT * __hi2 ) const
    {


      const string_type __one ( __lo1, __hi1 );
      const string_type __two ( __lo2, __hi2 );

      const _CharT * __p = __one . c_str ( );
      const _CharT * __pend = __one . data ( ) + __one . length ( );
      const _CharT * __q = __two . c_str ( );
      const _CharT * __qend = __two . data ( ) + __two . length ( );




      for (;; )
 {
   const int __res = _M_compare ( __p, __q );
   if ( __res )
     return __res;

   __p += char_traits < _CharT > :: length ( __p );
   __q += char_traits < _CharT > :: length ( __q );
   if ( __p == __pend && __q == __qend )
     return 0;
   else if ( __p == __pend )
     return - 1;
   else if ( __q == __qend )
     return 1;

   __p ++;
   __q ++;
 }
    }
# 2424 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT >
    typename collate < _CharT > :: string_type
    collate < _CharT > ::
    do_transform ( const _CharT * __lo, const _CharT * __hi ) const
    {
      string_type __ret;


      const string_type __str ( __lo, __hi );

      const _CharT * __p = __str . c_str ( );
      const _CharT * __pend = __str . data ( ) + __str . length ( );

      size_t __len = ( __hi - __lo ) * 2;

      _CharT * __c = new _CharT [ __len ];

      try
 {



   for (;; )
     {

       size_t __res = _M_transform ( __c, __p, __len );


       if ( __res >= __len )
  {
    __len = __res + 1;
    delete [ ] __c, __c = 0;
    __c = new _CharT [ __len ];
    __res = _M_transform ( __c, __p, __len );
  }

       __ret . append ( __c, __res );
       __p += char_traits < _CharT > :: length ( __p );
       if ( __p == __pend )
  break;

       __p ++;
       __ret . push_back ( _CharT ( ) );
     }
 }
      catch ( ... )
 {
   delete [ ] __c;
   throw;
 }

      delete [ ] __c;

      return __ret;
    }
# 2480 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT >
    long
    collate < _CharT > ::
    do_hash ( const _CharT * __lo, const _CharT * __hi ) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++ __lo )
 __val = * __lo + ( ( __val << 7 ) |
         ( __val >> ( numeric_limits < unsigned long > :: digits - 7 ) ) );
      return static_cast < long > ( __val );
    }
# 2503 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT, typename _Traits >
    void
    __pad < _CharT, _Traits > :: _S_pad ( ios_base & __io, _CharT __fill,
       _CharT * __news, const _CharT * __olds,
       const streamsize __newlen,
       const streamsize __oldlen, const bool __num )
    {
      const size_t __plen = static_cast < size_t > ( __newlen - __oldlen );
      const ios_base :: fmtflags __adjust = __io . flags ( ) & ios_base :: adjustfield;


      if ( __adjust == ios_base :: left )
 {
   _Traits :: copy ( __news, const_cast < _CharT * > ( __olds ), __oldlen );
   _Traits :: assign ( __news + __oldlen, __plen, __fill );
   return;
 }

      size_t __mod = 0;
      if ( __adjust == ios_base :: internal && __num )
 {



          const locale & __loc = __io . _M_getloc ( );
   const ctype < _CharT > & __ctype = use_facet < ctype < _CharT > > ( __loc );

   const bool __testsign = ( __ctype . widen ( '-' ) == __olds [ 0 ]
       || __ctype . widen ( '+' ) == __olds [ 0 ] );
   const bool __testhex = ( __ctype . widen ( '0' ) == __olds [ 0 ]
      && __oldlen > 1
      && ( __ctype . widen ( 'x' ) == __olds [ 1 ]
          || __ctype . widen ( 'X' ) == __olds [ 1 ] ) );
   if ( __testhex )
     {
       __news [ 0 ] = __olds [ 0 ];
       __news [ 1 ] = __olds [ 1 ];
       __mod = 2;
       __news += 2;
     }
   else if ( __testsign )
     {
       __news [ 0 ] = __olds [ 0 ];
       __mod = 1;
       ++ __news;
     }

 }
      _Traits :: assign ( __news, __plen, __fill );
      _Traits :: copy ( __news + __plen, const_cast < _CharT * > ( __olds + __mod ),
      __oldlen - __mod );
    }
# 2557 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
static bool __verify_grouping(const char *__grouping, size_t __grouping_size, const string &
# 2558 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
__grouping_tmp)
# 2559 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
{
# 2560 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
const size_t __n = (__grouping_tmp.size() - (1));
# 2561 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
const size_t __min = std::min(__n, ((size_t)(__grouping_size - (1))));
# 2562 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
size_t __i = __n;
# 2563 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
bool __test = true;
# 2568 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
for (size_t __j = (0); (__j < __min) && __test; (--__i), (++__j)) {
# 2569 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
__test = ((__grouping_tmp[__i]) == (__grouping[__j])); }
# 2570 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
for (; (__i) && __test; --__i) {
# 2571 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
__test = ((__grouping_tmp[__i]) == (__grouping[__min])); }
# 2575 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
if ((static_cast< signed char>((__grouping[__min]))) > 0) {
# 2576 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
__test &= ((__grouping_tmp[(0)]) <= (__grouping[__min])); }
# 2577 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
return __test;
# 2578 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
}
# 2580 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
template < typename _CharT >
    _CharT *
    __add_grouping ( _CharT * __s, _CharT __sep,
     const char * __gbeg, size_t __gsize,
     const _CharT * __first, const _CharT * __last )
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while ( __last - __first > __gbeg [ __idx ]
      && static_cast < signed char > ( __gbeg [ __idx ] ) > 0 )
 {
   __last -= __gbeg [ __idx ];
   __idx < __gsize - 1 ? ++ __idx : ++ __ctr;
 }

      while ( __first != __last )
 * __s ++ = * __first ++;

      while ( __ctr -- )
 {
   * __s ++ = __sep;
   for ( char __i = __gbeg [ __idx ]; __i > 0; -- __i )
     * __s ++ = * __first ++;
 }

      while ( __idx -- )
 {
   * __s ++ = __sep;
   for ( char __i = __gbeg [ __idx ]; __i > 0; -- __i )
     * __s ++ = * __first ++;
 }

      return __s;
    }
# 2620 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class moneypunct< char, false> ;
# 2621 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class moneypunct< char, true> ;
# 2622 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class moneypunct_byname< char, false> ;
# 2623 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class moneypunct_byname< char, true> ;
# 2624 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class money_get< char, istreambuf_iterator< char, char_traits< char> > > ;
# 2625 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class money_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
# 2626 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class numpunct< char> ;
# 2627 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class numpunct_byname< char> ;
# 2628 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class num_get< char, istreambuf_iterator< char, char_traits< char> > > ;
# 2629 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class num_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
# 2630 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class __timepunct< char> ;
# 2631 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class time_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
# 2632 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class time_put_byname< char, ostreambuf_iterator< char, char_traits< char> > > ;
# 2633 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class time_get< char, istreambuf_iterator< char, char_traits< char> > > ;
# 2634 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class time_get_byname< char, istreambuf_iterator< char, char_traits< char> > > ;
# 2635 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class messages< char> ;
# 2636 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class messages_byname< char> ;
# 2637 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class ctype_byname< char> ;
# 2638 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class codecvt_byname< char, char, __mbstate_t> ;
# 2639 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class collate< char> ;
# 2640 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class collate_byname< char> ;
# 2642 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const codecvt< char, char, __mbstate_t> &use_facet< codecvt< char, char, __mbstate_t> > (const locale &);
# 2646 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const collate< char> &use_facet< collate< char> > (const locale &);
# 2650 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const numpunct< char> &use_facet< numpunct< char> > (const locale &);
# 2654 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const num_put< char, ostreambuf_iterator< char, char_traits< char> > > &use_facet< num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 2658 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const num_get< char, istreambuf_iterator< char, char_traits< char> > > &use_facet< num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 2662 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const moneypunct< char, true> &use_facet< moneypunct< char, true> > (const locale &);
# 2666 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const moneypunct< char, false> &use_facet< moneypunct< char, false> > (const locale &);
# 2670 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const money_put< char, ostreambuf_iterator< char, char_traits< char> > > &use_facet< money_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 2674 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const money_get< char, istreambuf_iterator< char, char_traits< char> > > &use_facet< money_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 2678 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const __timepunct< char> &use_facet< __timepunct< char> > (const locale &);
# 2682 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const time_put< char, ostreambuf_iterator< char, char_traits< char> > > &use_facet< time_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 2686 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const time_get< char, istreambuf_iterator< char, char_traits< char> > > &use_facet< time_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 2690 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const messages< char> &use_facet< messages< char> > (const locale &);
# 2694 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< ctype< char> > (const locale &) throw();
# 2698 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< codecvt< char, char, __mbstate_t> > (const locale &) throw();
# 2702 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< collate< char> > (const locale &) throw();
# 2706 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< numpunct< char> > (const locale &) throw();
# 2710 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 2714 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 2718 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< moneypunct< char, false> > (const locale &) throw();
# 2722 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< money_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 2726 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< money_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 2730 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< __timepunct< char> > (const locale &) throw();
# 2734 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< time_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 2738 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< time_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 2742 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< messages< char> > (const locale &) throw();
# 2747 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class moneypunct< wchar_t, false> ;
# 2748 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class moneypunct< wchar_t, true> ;
# 2749 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class moneypunct_byname< wchar_t, false> ;
# 2750 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class moneypunct_byname< wchar_t, true> ;
# 2751 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class money_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 2752 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class money_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 2753 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class numpunct< wchar_t> ;
# 2754 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class numpunct_byname< wchar_t> ;
# 2755 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 2756 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 2757 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class __timepunct< wchar_t> ;
# 2758 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class time_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 2759 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class time_put_byname< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 2760 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class time_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 2761 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class time_get_byname< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 2762 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class messages< wchar_t> ;
# 2763 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class messages_byname< wchar_t> ;
# 2764 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class ctype_byname< wchar_t> ;
# 2765 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class codecvt_byname< wchar_t, char, __mbstate_t> ;
# 2766 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class collate< wchar_t> ;
# 2767 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template class collate_byname< wchar_t> ;
# 2769 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const codecvt< wchar_t, char, __mbstate_t> &use_facet< codecvt< wchar_t, char, __mbstate_t> > (const locale &);
# 2773 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const collate< wchar_t> &use_facet< collate< wchar_t> > (const locale &);
# 2777 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const numpunct< wchar_t> &use_facet< numpunct< wchar_t> > (const locale &);
# 2781 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > &use_facet< num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 2785 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > &use_facet< num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 2789 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const moneypunct< wchar_t, true> &use_facet< moneypunct< wchar_t, true> > (const locale &);
# 2793 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const moneypunct< wchar_t, false> &use_facet< moneypunct< wchar_t, false> > (const locale &);
# 2797 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const money_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > &use_facet< money_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 2801 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const money_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > &use_facet< money_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 2805 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const __timepunct< wchar_t> &use_facet< __timepunct< wchar_t> > (const locale &);
# 2809 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const time_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > &use_facet< time_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 2813 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const time_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > &use_facet< time_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 2817 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template const messages< wchar_t> &use_facet< messages< wchar_t> > (const locale &);
# 2821 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< ctype< wchar_t> > (const locale &) throw();
# 2825 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< codecvt< wchar_t, char, __mbstate_t> > (const locale &) throw();
# 2829 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< collate< wchar_t> > (const locale &) throw();
# 2833 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< numpunct< wchar_t> > (const locale &) throw();
# 2837 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 2841 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 2845 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< moneypunct< wchar_t, false> > (const locale &) throw();
# 2849 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< money_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 2853 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< money_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 2857 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< __timepunct< wchar_t> > (const locale &) throw();
# 2861 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< time_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 2865 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< time_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 2869 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
extern template bool has_facet< messages< wchar_t> > (const locale &) throw();
# 2875 "/usr/include/c++/4.2.1/bits/locale_facets.tcc" 3
}
# 48 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
namespace std {
# 50 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > :: sentry ::
    sentry ( basic_ostream < _CharT, _Traits > & __os )
    : _M_ok ( false ), _M_os ( __os )
    {

      if ( __os . tie ( ) && __os . good ( ) )
 __os . tie ( ) -> flush ( );

      if ( __os . good ( ) )
 _M_ok = true;
      else
 __os . setstate ( ios_base :: failbit );
    }
# 65 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    template < typename _ValueT >
      basic_ostream < _CharT, _Traits > &
      basic_ostream < _CharT, _Traits > ::
      _M_insert ( _ValueT __v )
      {
 sentry __cerb ( * this );
 if ( __cerb )
   {
     ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
     try
       {
  const __num_put_type & __np = __check_facet ( this -> _M_num_put );
  if ( __np . put ( * this, * this, this -> fill ( ), __v ) . failed ( ) )
    __err |= ios_base :: badbit;
       }
     catch ( ... )
       { this -> _M_setstate ( ios_base :: badbit ); }
     if ( __err )
       this -> setstate ( __err );
   }
 return * this;
      }
# 89 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    operator << ( short __n )
    {


      const ios_base :: fmtflags __fmt = this -> flags ( ) & ios_base :: basefield;
      if ( __fmt == ios_base :: oct || __fmt == ios_base :: hex )
 return _M_insert ( static_cast < long > ( static_cast < unsigned short > ( __n ) ) );
      else
 return _M_insert ( static_cast < long > ( __n ) );
    }
# 103 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    operator << ( int __n )
    {


      const ios_base :: fmtflags __fmt = this -> flags ( ) & ios_base :: basefield;
      if ( __fmt == ios_base :: oct || __fmt == ios_base :: hex )
 return _M_insert ( static_cast < long > ( static_cast < unsigned int > ( __n ) ) );
      else
 return _M_insert ( static_cast < long > ( __n ) );
    }
# 117 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    operator << ( __streambuf_type * __sbin )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this );
      if ( __cerb && __sbin )
 {
   try
     {
       if ( ! __copy_streambufs ( __sbin, this -> rdbuf ( ) ) )
  __err |= ios_base :: failbit;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: failbit ); }
 }
      else if ( ! __sbin )
 __err |= ios_base :: badbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 141 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    put ( char_type __c )
    {






      sentry __cerb ( * this );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __put = this -> rdbuf ( ) -> sputc ( __c );
       if ( traits_type :: eq_int_type ( __put, traits_type :: eof ( ) ) )
  __err |= ios_base :: badbit;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 170 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    write ( const _CharT * __s, streamsize __n )
    {







      sentry __cerb ( * this );
      if ( __cerb )
 {
   try
     { _M_write ( __s, __n ); }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      return * this;
    }
# 193 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    flush ( )
    {



      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( this -> rdbuf ( ) && this -> rdbuf ( ) -> pubsync ( ) == - 1 )
     __err |= ios_base :: badbit;
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 214 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    typename basic_ostream < _CharT, _Traits > :: pos_type
    basic_ostream < _CharT, _Traits > ::
    tellp ( )
    {
      pos_type __ret = pos_type ( - 1 );
      try
 {
   if ( ! this -> fail ( ) )
     __ret = this -> rdbuf ( ) -> pubseekoff ( 0, ios_base :: cur, ios_base :: out );
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      return __ret;
    }
# 230 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    seekp ( pos_type __pos )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {


       const pos_type __p = this -> rdbuf ( ) -> pubseekpos ( __pos,
            ios_base :: out );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 257 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    basic_ostream < _CharT, _Traits > ::
    seekp ( off_type __off, ios_base :: seekdir __dir )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {


       const pos_type __p = this -> rdbuf ( ) -> pubseekoff ( __off, __dir,
            ios_base :: out );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 284 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_ostream < _CharT, _Traits > &
    operator << ( basic_ostream < _CharT, _Traits > & __out, const char * __s )
    {
      if ( ! __s )
 __out . setstate ( ios_base :: badbit );
      else
 {


   const size_t __clen = char_traits < char > :: length ( __s );
   _CharT * __ws = 0;
   try
     {
       __ws = new _CharT [ __clen ];
       for ( size_t __i = 0; __i < __clen; ++ __i )
  __ws [ __i ] = __out . widen ( __s [ __i ] );
     }
   catch ( ... )
     {
       delete [ ] __ws;
       __out . _M_setstate ( ios_base :: badbit );
       return __out;
     }

   try
     {
       __ostream_insert ( __out, __ws, __clen );
       delete [ ] __ws;
     }
   catch ( ... )
     {
       delete [ ] __ws;
       throw;
     }
 }
      return __out;
    }
# 327 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template class basic_ostream< char, char_traits< char> > ;
# 328 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &endl(basic_ostream< char, char_traits< char> > &);
# 329 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &ends(basic_ostream< char, char_traits< char> > &);
# 330 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &flush(basic_ostream< char, char_traits< char> > &);
# 331 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, char);
# 332 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, unsigned char);
# 333 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, signed char);
# 334 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, const char *);
# 335 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, const unsigned char *);
# 336 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > &operator<<(basic_ostream< char, char_traits< char> > &, const signed char *);
# 338 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long);
# 339 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(unsigned long);
# 340 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(bool);
# 342 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long long);
# 343 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(unsigned long long);
# 345 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(double);
# 346 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long double);
# 347 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(const void *);
# 350 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template class basic_ostream< wchar_t, char_traits< wchar_t> > ;
# 351 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &endl(basic_ostream< wchar_t, char_traits< wchar_t> > &);
# 352 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &ends(basic_ostream< wchar_t, char_traits< wchar_t> > &);
# 353 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &flush(basic_ostream< wchar_t, char_traits< wchar_t> > &);
# 354 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, wchar_t);
# 355 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, char);
# 356 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, const wchar_t *);
# 357 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> > &, const char *);
# 359 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long);
# 360 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(unsigned long);
# 361 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(bool);
# 363 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long long);
# 364 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(unsigned long long);
# 366 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(double);
# 367 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long double);
# 368 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(const void *);
# 372 "/usr/include/c++/4.2.1/bits/ostream.tcc" 3
}
# 47 "/usr/include/c++/4.2.1/istream" 3
namespace std {
# 57 "/usr/include/c++/4.2.1/istream" 3
template < typename _CharT, typename _Traits >
    class basic_istream : virtual public basic_ios < _CharT, _Traits >
    {
    public :

      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef basic_ios < _CharT, _Traits > __ios_type;
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef num_get < _CharT, istreambuf_iterator < _CharT, _Traits > >
        __num_get_type;
      typedef ctype < _CharT > __ctype_type;

      template < typename _CharT2, typename _Traits2 >
        friend basic_istream < _CharT2, _Traits2 > &
        operator >> ( basic_istream < _CharT2, _Traits2 > &, _CharT2 & );

      template < typename _CharT2, typename _Traits2 >
        friend basic_istream < _CharT2, _Traits2 > &
        operator >> ( basic_istream < _CharT2, _Traits2 > &, _CharT2 * );

    protected :







      streamsize _M_gcount;

    public :
# 103 "/usr/include/c++/4.2.1/istream" 3
      explicit
      basic_istream ( __streambuf_type * __sb ) : _M_gcount ( streamsize ( 0 ) )
      { this -> init ( __sb ); }






      virtual
      ~ basic_istream ( )
      { _M_gcount = streamsize ( 0 ); }


      class sentry;
      friend class sentry;
# 130 "/usr/include/c++/4.2.1/istream" 3
      __istream_type &
      operator >> ( __istream_type & ( * __pf ) ( __istream_type & ) )
      { return __pf ( * this ); }

      __istream_type &
      operator >> ( __ios_type & ( * __pf ) ( __ios_type & ) )
      {
 __pf ( * this );
 return * this;
      }

      __istream_type &
      operator >> ( ios_base & ( * __pf ) ( ios_base & ) )
      {
 __pf ( * this );
 return * this;
      }
# 177 "/usr/include/c++/4.2.1/istream" 3
      __istream_type &
      operator >> ( bool & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( short & __n );

      __istream_type &
      operator >> ( unsigned short & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( int & __n );

      __istream_type &
      operator >> ( unsigned int & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( long & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( unsigned long & __n )
      { return _M_extract ( __n ); }


      __istream_type &
      operator >> ( long long & __n )
      { return _M_extract ( __n ); }

      __istream_type &
      operator >> ( unsigned long long & __n )
      { return _M_extract ( __n ); }


      __istream_type &
      operator >> ( float & __f )
      { return _M_extract ( __f ); }

      __istream_type &
      operator >> ( double & __f )
      { return _M_extract ( __f ); }

      __istream_type &
      operator >> ( long double & __f )
      { return _M_extract ( __f ); }

      __istream_type &
      operator >> ( void * & __p )
      { return _M_extract ( __p ); }
# 249 "/usr/include/c++/4.2.1/istream" 3
      __istream_type &
      operator >> ( __streambuf_type * __sb );
# 259 "/usr/include/c++/4.2.1/istream" 3
      streamsize
      gcount ( ) const
      { return _M_gcount; }
# 291 "/usr/include/c++/4.2.1/istream" 3
      int_type
      get ( );
# 305 "/usr/include/c++/4.2.1/istream" 3
      __istream_type &
      get ( char_type & __c );
# 332 "/usr/include/c++/4.2.1/istream" 3
      __istream_type &
      get ( char_type * __s, streamsize __n, char_type __delim );
# 343 "/usr/include/c++/4.2.1/istream" 3
      __istream_type &
      get ( char_type * __s, streamsize __n )
      { return this -> get ( __s, __n, this -> widen ( '\n' ) ); }
# 366 "/usr/include/c++/4.2.1/istream" 3
      __istream_type &
      get ( __streambuf_type & __sb, char_type __delim );
# 376 "/usr/include/c++/4.2.1/istream" 3
      __istream_type &
      get ( __streambuf_type & __sb )
      { return this -> get ( __sb, this -> widen ( '\n' ) ); }
# 405 "/usr/include/c++/4.2.1/istream" 3
      __istream_type &
      getline ( char_type * __s, streamsize __n, char_type __delim );
# 416 "/usr/include/c++/4.2.1/istream" 3
      __istream_type &
      getline ( char_type * __s, streamsize __n )
      { return this -> getline ( __s, __n, this -> widen ( '\n' ) ); }
# 440 "/usr/include/c++/4.2.1/istream" 3
      __istream_type &
      ignore ( );

      __istream_type &
      ignore ( streamsize __n );

      __istream_type &
      ignore ( streamsize __n, int_type __delim );
# 457 "/usr/include/c++/4.2.1/istream" 3
      int_type
      peek ( );
# 475 "/usr/include/c++/4.2.1/istream" 3
      __istream_type &
      read ( char_type * __s, streamsize __n );
# 494 "/usr/include/c++/4.2.1/istream" 3
      streamsize
      readsome ( char_type * __s, streamsize __n );
# 510 "/usr/include/c++/4.2.1/istream" 3
      __istream_type &
      putback ( char_type __c );
# 525 "/usr/include/c++/4.2.1/istream" 3
      __istream_type &
      unget ( );
# 543 "/usr/include/c++/4.2.1/istream" 3
      int
      sync ( );
# 557 "/usr/include/c++/4.2.1/istream" 3
      pos_type
      tellg ( );
# 572 "/usr/include/c++/4.2.1/istream" 3
      __istream_type &
      seekg ( pos_type );
# 588 "/usr/include/c++/4.2.1/istream" 3
      __istream_type &
      seekg ( off_type, ios_base :: seekdir );


    protected :
      explicit
      basic_istream ( ) : _M_gcount ( streamsize ( 0 ) ) { }

      template < typename _ValueT >
        __istream_type &
        _M_extract ( _ValueT & __v );
    };
# 605 "/usr/include/c++/4.2.1/istream" 3
template<> basic_istream< char, char_traits< char> > &basic_istream< char, char_traits< char> > ::getline(char_type *, streamsize, char_type);
# 610 "/usr/include/c++/4.2.1/istream" 3
template<> basic_istream< char, char_traits< char> > &basic_istream< char, char_traits< char> > ::ignore(streamsize);
# 615 "/usr/include/c++/4.2.1/istream" 3
template<> basic_istream< char, char_traits< char> > &basic_istream< char, char_traits< char> > ::ignore(streamsize, int_type);
# 621 "/usr/include/c++/4.2.1/istream" 3
template<> basic_istream< wchar_t, char_traits< wchar_t> > &basic_istream< wchar_t, char_traits< wchar_t> > ::getline(char_type *, streamsize, char_type);
# 626 "/usr/include/c++/4.2.1/istream" 3
template<> basic_istream< wchar_t, char_traits< wchar_t> > &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize);
# 631 "/usr/include/c++/4.2.1/istream" 3
template<> basic_istream< wchar_t, char_traits< wchar_t> > &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize, int_type);
# 645 "/usr/include/c++/4.2.1/istream" 3
template < typename _CharT, typename _Traits >
    class basic_istream < _CharT, _Traits > :: sentry
    {
    public :

      typedef _Traits traits_type;
      typedef basic_streambuf < _CharT, _Traits > __streambuf_type;
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef typename __istream_type :: __ctype_type __ctype_type;
      typedef typename _Traits :: int_type __int_type;
# 677 "/usr/include/c++/4.2.1/istream" 3
      explicit
      sentry ( basic_istream < _CharT, _Traits > & __is, bool __noskipws = false );
# 687 "/usr/include/c++/4.2.1/istream" 3
      operator bool ( ) const
      { return _M_ok; }

    private :
      bool _M_ok;
    };
# 707 "/usr/include/c++/4.2.1/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits> &operator>>(basic_istream< _CharT, _Traits> &, _CharT &);
# 711 "/usr/include/c++/4.2.1/istream" 3
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, unsigned char & __c )
    { return ( __in >> reinterpret_cast < char & > ( __c ) ); }
# 716 "/usr/include/c++/4.2.1/istream" 3
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, signed char & __c )
    { return ( __in >> reinterpret_cast < char & > ( __c ) ); }
# 748 "/usr/include/c++/4.2.1/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits> &operator>>(basic_istream< _CharT, _Traits> &, _CharT *);
# 755 "/usr/include/c++/4.2.1/istream" 3
template<> basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, char *);
# 757 "/usr/include/c++/4.2.1/istream" 3
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, unsigned char * __s )
    { return ( __in >> reinterpret_cast < char * > ( __s ) ); }
# 762 "/usr/include/c++/4.2.1/istream" 3
template < class _Traits >
    inline basic_istream < char, _Traits > &
    operator >> ( basic_istream < char, _Traits > & __in, signed char * __s )
    { return ( __in >> reinterpret_cast < char * > ( __s ) ); }
# 775 "/usr/include/c++/4.2.1/istream" 3
template < typename _CharT, typename _Traits >
    class basic_iostream
    : public basic_istream < _CharT, _Traits >,
      public basic_ostream < _CharT, _Traits >
    {
    public :



      typedef _CharT char_type;
      typedef typename _Traits :: int_type int_type;
      typedef typename _Traits :: pos_type pos_type;
      typedef typename _Traits :: off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef basic_ostream < _CharT, _Traits > __ostream_type;







      explicit
      basic_iostream ( basic_streambuf < _CharT, _Traits > * __sb )
      : __istream_type ( ), __ostream_type ( )
      { this -> init ( __sb ); }




      virtual
      ~ basic_iostream ( ) { }

    protected :
      explicit
      basic_iostream ( ) : __istream_type ( ), __ostream_type ( )
      { }
    };
# 838 "/usr/include/c++/4.2.1/istream" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    ws ( basic_istream < _CharT, _Traits > & __is );
# 842 "/usr/include/c++/4.2.1/istream" 3
}
# 49 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
namespace std {
# 51 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > :: sentry ::
    sentry ( basic_istream < _CharT, _Traits > & __in, bool __noskip ) : _M_ok ( false )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      if ( __in . good ( ) )
 {
   if ( __in . tie ( ) )
     __in . tie ( ) -> flush ( );
   if ( ! __noskip && ( __in . flags ( ) & ios_base :: skipws ) )
     {
       const __int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = __in . rdbuf ( );
       __int_type __c = __sb -> sgetc ( );

       const __ctype_type & __ct = __check_facet ( __in . _M_ctype );
       while ( ! traits_type :: eq_int_type ( __c, __eof )
       && __ct . is ( ctype_base :: space,
    traits_type :: to_char_type ( __c ) ) )
  __c = __sb -> snextc ( );




       if ( traits_type :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
     }
 }

      if ( __in . good ( ) && __err == ios_base :: goodbit )
 _M_ok = true;
      else
 {
   __err |= ios_base :: failbit;
   __in . setstate ( __err );
 }
    }
# 89 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    template < typename _ValueT >
      basic_istream < _CharT, _Traits > &
      basic_istream < _CharT, _Traits > ::
      _M_extract ( _ValueT & __v )
      {
 sentry __cerb ( * this, false );
 if ( __cerb )
   {
     ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
     try
       {
  const __num_get_type & __ng = __check_facet ( this -> _M_num_get );
  __ng . get ( * this, 0, * this, __err, __v );
       }
     catch ( ... )
       { this -> _M_setstate ( ios_base :: badbit ); }
     if ( __err )
       this -> setstate ( __err );
   }
 return * this;
      }
# 112 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    operator >> ( short & __n )
    {


      long __l;
      _M_extract ( __l );
      if ( ! this -> fail ( ) )
 {
   if ( numeric_limits < short > :: min ( ) <= __l
       && __l <= numeric_limits < short > :: max ( ) )
     __n = __l;
   else
     this -> setstate ( ios_base :: failbit );
 }
      return * this;
    }
# 132 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    operator >> ( int & __n )
    {


      long __l;
      _M_extract ( __l );
      if ( ! this -> fail ( ) )
 {
   if ( numeric_limits < int > :: min ( ) <= __l
       && __l <= numeric_limits < int > :: max ( ) )
     __n = __l;
   else
     this -> setstate ( ios_base :: failbit );
 }
      return * this;
    }
# 152 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    operator >> ( __streambuf_type * __sbout )
    {
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, false );
      if ( __cerb && __sbout )
 {
   try
     {
       bool __ineof;
       if ( ! __copy_streambufs_eof ( this -> rdbuf ( ), __sbout, __ineof ) )
  __err |= ios_base :: failbit;
       if ( __ineof )
  __err |= ios_base :: eofbit;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: failbit ); }
 }
      else if ( ! __sbout )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 179 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    typename basic_istream < _CharT, _Traits > :: int_type
    basic_istream < _CharT, _Traits > ::
    get ( void )
    {
      const int_type __eof = traits_type :: eof ( );
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       __c = this -> rdbuf ( ) -> sbumpc ( );

       if ( ! traits_type :: eq_int_type ( __c, __eof ) )
  _M_gcount = 1;
       else
  __err |= ios_base :: eofbit;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return __c;
    }
# 210 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    get ( char_type & __c )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       const int_type __cb = this -> rdbuf ( ) -> sbumpc ( );

       if ( ! traits_type :: eq_int_type ( __cb, traits_type :: eof ( ) ) )
  {
    _M_gcount = 1;
    __c = traits_type :: to_char_type ( __cb );
  }
       else
  __err |= ios_base :: eofbit;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 242 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    get ( char_type * __s, streamsize __n, char_type __delim )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       const int_type __idelim = traits_type :: to_int_type ( __delim );
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );
       int_type __c = __sb -> sgetc ( );

       while ( _M_gcount + 1 < __n
       && ! traits_type :: eq_int_type ( __c, __eof )
       && ! traits_type :: eq_int_type ( __c, __idelim ) )
  {
    * __s ++ = traits_type :: to_char_type ( __c );
    ++ _M_gcount;
    __c = __sb -> snextc ( );
  }
       if ( traits_type :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }


      if ( __n > 0 )
 * __s = char_type ( );
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 284 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    get ( __streambuf_type & __sb, char_type __delim )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   try
     {
       const int_type __idelim = traits_type :: to_int_type ( __delim );
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __this_sb = this -> rdbuf ( );
       int_type __c = __this_sb -> sgetc ( );
       char_type __c2 = traits_type :: to_char_type ( __c );

       while ( ! traits_type :: eq_int_type ( __c, __eof )
       && ! traits_type :: eq_int_type ( __c, __idelim )
       && ! traits_type :: eq_int_type ( __sb . sputc ( __c2 ), __eof ) )
  {
    ++ _M_gcount;
    __c = __this_sb -> snextc ( );
    __c2 = traits_type :: to_char_type ( __c );
  }
       if ( traits_type :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! _M_gcount )
 __err |= ios_base :: failbit;
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 323 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    getline ( char_type * __s, streamsize __n, char_type __delim )
    {
      _M_gcount = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      sentry __cerb ( * this, true );
      if ( __cerb )
        {
          try
            {
              const int_type __idelim = traits_type :: to_int_type ( __delim );
              const int_type __eof = traits_type :: eof ( );
              __streambuf_type * __sb = this -> rdbuf ( );
              int_type __c = __sb -> sgetc ( );

              while ( _M_gcount + 1 < __n
                     && ! traits_type :: eq_int_type ( __c, __eof )
                     && ! traits_type :: eq_int_type ( __c, __idelim ) )
                {
                  * __s ++ = traits_type :: to_char_type ( __c );
                  __c = __sb -> snextc ( );
                  ++ _M_gcount;
                }
              if ( traits_type :: eq_int_type ( __c, __eof ) )
                __err |= ios_base :: eofbit;
              else
                {
                  if ( traits_type :: eq_int_type ( __c, __idelim ) )
                    {
                      __sb -> sbumpc ( );
                      ++ _M_gcount;
                    }
                  else
                    __err |= ios_base :: failbit;
                }
            }
          catch ( ... )
            { this -> _M_setstate ( ios_base :: badbit ); }
        }


      if ( __n > 0 )
 * __s = char_type ( );
      if ( ! _M_gcount )
        __err |= ios_base :: failbit;
      if ( __err )
        this -> setstate ( __err );
      return * this;
    }
# 378 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    ignore ( void )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );

       if ( traits_type :: eq_int_type ( __sb -> sbumpc ( ), __eof ) )
  __err |= ios_base :: eofbit;
       else
  _M_gcount = 1;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 406 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    ignore ( streamsize __n )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb && __n > 0 )
        {
          ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
          try
            {
              const int_type __eof = traits_type :: eof ( );
              __streambuf_type * __sb = this -> rdbuf ( );
              int_type __c = __sb -> sgetc ( );
# 429 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
       bool __large_ignore = false;
       while ( true )
  {
    while ( _M_gcount < __n
    && ! traits_type :: eq_int_type ( __c, __eof ) )
      {
        ++ _M_gcount;
        __c = __sb -> snextc ( );
      }
    if ( __n == numeric_limits < streamsize > :: max ( )
        && ! traits_type :: eq_int_type ( __c, __eof ) )
      {
        _M_gcount = numeric_limits < streamsize > :: min ( );
        __large_ignore = true;
      }
    else
      break;
  }

       if ( __large_ignore )
  _M_gcount = numeric_limits < streamsize > :: max ( );

       if ( traits_type :: eq_int_type ( __c, __eof ) )
                __err |= ios_base :: eofbit;
            }
          catch ( ... )
            { this -> _M_setstate ( ios_base :: badbit ); }
          if ( __err )
            this -> setstate ( __err );
        }
      return * this;
    }
# 462 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    ignore ( streamsize __n, int_type __delim )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb && __n > 0 )
        {
          ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
          try
            {
              const int_type __eof = traits_type :: eof ( );
              __streambuf_type * __sb = this -> rdbuf ( );
              int_type __c = __sb -> sgetc ( );


       bool __large_ignore = false;
       while ( true )
  {
    while ( _M_gcount < __n
    && ! traits_type :: eq_int_type ( __c, __eof )
    && ! traits_type :: eq_int_type ( __c, __delim ) )
      {
        ++ _M_gcount;
        __c = __sb -> snextc ( );
      }
    if ( __n == numeric_limits < streamsize > :: max ( )
        && ! traits_type :: eq_int_type ( __c, __eof )
        && ! traits_type :: eq_int_type ( __c, __delim ) )
      {
        _M_gcount = numeric_limits < streamsize > :: min ( );
        __large_ignore = true;
      }
    else
      break;
  }

       if ( __large_ignore )
  _M_gcount = numeric_limits < streamsize > :: max ( );

              if ( traits_type :: eq_int_type ( __c, __eof ) )
                __err |= ios_base :: eofbit;
       else if ( traits_type :: eq_int_type ( __c, __delim ) )
  {
    if ( _M_gcount < numeric_limits < streamsize > :: max ( ) )
      ++ _M_gcount;
    __sb -> sbumpc ( );
  }
            }
          catch ( ... )
            { this -> _M_setstate ( ios_base :: badbit ); }
          if ( __err )
            this -> setstate ( __err );
        }
      return * this;
    }
# 520 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    typename basic_istream < _CharT, _Traits > :: int_type
    basic_istream < _CharT, _Traits > ::
    peek ( void )
    {
      int_type __c = traits_type :: eof ( );
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       __c = this -> rdbuf ( ) -> sgetc ( );
       if ( traits_type :: eq_int_type ( __c, traits_type :: eof ( ) ) )
  __err |= ios_base :: eofbit;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return __c;
    }
# 545 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    read ( char_type * __s, streamsize __n )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       _M_gcount = this -> rdbuf ( ) -> sgetn ( __s, __n );
       if ( _M_gcount != __n )
  __err |= ( ios_base :: eofbit | ios_base :: failbit );
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 569 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    streamsize
    basic_istream < _CharT, _Traits > ::
    readsome ( char_type * __s, streamsize __n )
    {
      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {

       const streamsize __num = this -> rdbuf ( ) -> in_avail ( );
       if ( __num > 0 )
  _M_gcount = this -> rdbuf ( ) -> sgetn ( __s, std :: min ( __num, __n ) );
       else if ( __num == - 1 )
  __err |= ios_base :: eofbit;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return _M_gcount;
    }
# 596 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    putback ( char_type __c )
    {


      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );
       if ( ! __sb
    || traits_type :: eq_int_type ( __sb -> sputbackc ( __c ), __eof ) )
  __err |= ios_base :: badbit;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 624 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    unget ( void )
    {


      _M_gcount = 0;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const int_type __eof = traits_type :: eof ( );
       __streambuf_type * __sb = this -> rdbuf ( );
       if ( ! __sb
    || traits_type :: eq_int_type ( __sb -> sungetc ( ), __eof ) )
  __err |= ios_base :: badbit;
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return * this;
    }
# 652 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    int
    basic_istream < _CharT, _Traits > ::
    sync ( void )
    {


      int __ret = - 1;
      sentry __cerb ( * this, true );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       __streambuf_type * __sb = this -> rdbuf ( );
       if ( __sb )
  {
    if ( __sb -> pubsync ( ) == - 1 )
      __err |= ios_base :: badbit;
    else
      __ret = 0;
  }
     }
   catch ( ... )
     { this -> _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     this -> setstate ( __err );
 }
      return __ret;
    }
# 683 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    typename basic_istream < _CharT, _Traits > :: pos_type
    basic_istream < _CharT, _Traits > ::
    tellg ( void )
    {


      pos_type __ret = pos_type ( - 1 );
      try
 {
   if ( ! this -> fail ( ) )
     __ret = this -> rdbuf ( ) -> pubseekoff ( 0, ios_base :: cur,
           ios_base :: in );
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      return __ret;
    }
# 702 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    seekg ( pos_type __pos )
    {


      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {

       const pos_type __p = this -> rdbuf ( ) -> pubseekpos ( __pos,
            ios_base :: in );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 730 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    basic_istream < _CharT, _Traits > ::
    seekg ( off_type __off, ios_base :: seekdir __dir )
    {


      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      try
 {
   if ( ! this -> fail ( ) )
     {

       const pos_type __p = this -> rdbuf ( ) -> pubseekoff ( __off, __dir,
            ios_base :: in );


       if ( __p == pos_type ( off_type ( - 1 ) ) )
  __err |= ios_base :: failbit;
     }
 }
      catch ( ... )
 { this -> _M_setstate ( ios_base :: badbit ); }
      if ( __err )
 this -> setstate ( __err );
      return * this;
    }
# 759 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in, _CharT & __c )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef typename __istream_type :: int_type __int_type;

      typename __istream_type :: sentry __cerb ( __in, false );
      if ( __cerb )
 {
   ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
   try
     {
       const __int_type __cb = __in . rdbuf ( ) -> sbumpc ( );
       if ( ! _Traits :: eq_int_type ( __cb, _Traits :: eof ( ) ) )
  __c = _Traits :: to_char_type ( __cb );
       else
  __err |= ( ios_base :: eofbit | ios_base :: failbit );
     }
   catch ( ... )
     { __in . _M_setstate ( ios_base :: badbit ); }
   if ( __err )
     __in . setstate ( __err );
 }
      return __in;
    }
# 786 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in, _CharT * __s )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef typename __istream_type :: __streambuf_type __streambuf_type;
      typedef typename _Traits :: int_type int_type;
      typedef _CharT char_type;
      typedef ctype < _CharT > __ctype_type;

      streamsize __extracted = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      typename __istream_type :: sentry __cerb ( __in, false );
      if ( __cerb )
 {
   try
     {

       streamsize __num = __in . width ( );
       if ( __num <= 0 )
  __num = numeric_limits < streamsize > :: max ( );

       const __ctype_type & __ct = use_facet < __ctype_type > ( __in . getloc ( ) );

       const int_type __eof = _Traits :: eof ( );
       __streambuf_type * __sb = __in . rdbuf ( );
       int_type __c = __sb -> sgetc ( );

       while ( __extracted < __num - 1
       && ! _Traits :: eq_int_type ( __c, __eof )
       && ! __ct . is ( ctype_base :: space,
     _Traits :: to_char_type ( __c ) ) )
  {
    * __s ++ = _Traits :: to_char_type ( __c );
    ++ __extracted;
    __c = __sb -> snextc ( );
  }
       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;



       * __s = char_type ( );
       __in . width ( 0 );
     }
   catch ( ... )
     { __in . _M_setstate ( ios_base :: badbit ); }
 }
      if ( ! __extracted )
 __err |= ios_base :: failbit;
      if ( __err )
 __in . setstate ( __err );
      return __in;
    }
# 842 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits >
    basic_istream < _CharT, _Traits > &
    ws ( basic_istream < _CharT, _Traits > & __in )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef typename __istream_type :: __streambuf_type __streambuf_type;
      typedef typename __istream_type :: __ctype_type __ctype_type;
      typedef typename __istream_type :: int_type __int_type;

      const __ctype_type & __ct = use_facet < __ctype_type > ( __in . getloc ( ) );
      const __int_type __eof = _Traits :: eof ( );
      __streambuf_type * __sb = __in . rdbuf ( );
      __int_type __c = __sb -> sgetc ( );

      while ( ! _Traits :: eq_int_type ( __c, __eof )
      && __ct . is ( ctype_base :: space, _Traits :: to_char_type ( __c ) ) )
 __c = __sb -> snextc ( );

       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __in . setstate ( ios_base :: eofbit );
      return __in;
    }
# 866 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    operator >> ( basic_istream < _CharT, _Traits > & __in,
        basic_string < _CharT, _Traits, _Alloc > & __str )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef typename __istream_type :: int_type __int_type;
      typedef typename __istream_type :: __streambuf_type __streambuf_type;
      typedef typename __istream_type :: __ctype_type __ctype_type;
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;

      __size_type __extracted = 0;
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      typename __istream_type :: sentry __cerb ( __in, false );
      if ( __cerb )
 {
   try
     {

       __str . erase ( );
       _CharT __buf [ 128 ];
       __size_type __len = 0;
       const streamsize __w = __in . width ( );
       const __size_type __n = __w > 0 ? static_cast < __size_type > ( __w )
                                : __str . max_size ( );
       const __ctype_type & __ct = use_facet < __ctype_type > ( __in . getloc ( ) );
       const __int_type __eof = _Traits :: eof ( );
       __streambuf_type * __sb = __in . rdbuf ( );
       __int_type __c = __sb -> sgetc ( );

       while ( __extracted < __n
       && ! _Traits :: eq_int_type ( __c, __eof )
       && ! __ct . is ( ctype_base :: space, _Traits :: to_char_type ( __c ) ) )
  {
    if ( __len == sizeof ( __buf ) / sizeof ( _CharT ) )
      {
        __str . append ( __buf, sizeof ( __buf ) / sizeof ( _CharT ) );
        __len = 0;
      }
    __buf [ __len ++ ] = _Traits :: to_char_type ( __c );
    ++ __extracted;
    __c = __sb -> snextc ( );
  }
       __str . append ( __buf, __len );

       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
       __in . width ( 0 );
     }
   catch ( ... )
     {



       __in . _M_setstate ( ios_base :: badbit );
     }
 }

      if ( ! __extracted )
 __err |= ios_base :: failbit;
      if ( __err )
 __in . setstate ( __err );
      return __in;
    }
# 932 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
template < typename _CharT, typename _Traits, typename _Alloc >
    basic_istream < _CharT, _Traits > &
    getline ( basic_istream < _CharT, _Traits > & __in,
     basic_string < _CharT, _Traits, _Alloc > & __str, _CharT __delim )
    {
      typedef basic_istream < _CharT, _Traits > __istream_type;
      typedef typename __istream_type :: int_type __int_type;
      typedef typename __istream_type :: __streambuf_type __streambuf_type;
      typedef typename __istream_type :: __ctype_type __ctype_type;
      typedef basic_string < _CharT, _Traits, _Alloc > __string_type;
      typedef typename __string_type :: size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str . max_size ( );
      ios_base :: iostate __err = ios_base :: iostate ( ios_base :: goodbit );
      typename __istream_type :: sentry __cerb ( __in, true );
      if ( __cerb )
 {
   try
     {
       __str . erase ( );
       const __int_type __idelim = _Traits :: to_int_type ( __delim );
       const __int_type __eof = _Traits :: eof ( );
       __streambuf_type * __sb = __in . rdbuf ( );
       __int_type __c = __sb -> sgetc ( );

       while ( __extracted < __n
       && ! _Traits :: eq_int_type ( __c, __eof )
       && ! _Traits :: eq_int_type ( __c, __idelim ) )
  {
    __str += _Traits :: to_char_type ( __c );
    ++ __extracted;
    __c = __sb -> snextc ( );
  }

       if ( _Traits :: eq_int_type ( __c, __eof ) )
  __err |= ios_base :: eofbit;
       else if ( _Traits :: eq_int_type ( __c, __idelim ) )
  {
    ++ __extracted;
    __sb -> sbumpc ( );
  }
       else
  __err |= ios_base :: failbit;
     }
   catch ( ... )
     {



       __in . _M_setstate ( ios_base :: badbit );
     }
 }
      if ( ! __extracted )
 __err |= ios_base :: failbit;
      if ( __err )
 __in . setstate ( __err );
      return __in;
    }
# 996 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template class basic_istream< char, char_traits< char> > ;
# 997 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &ws(basic_istream< char, char_traits< char> > &);
# 998 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, char &);
# 999 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, char *);
# 1000 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, unsigned char &);
# 1001 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, signed char &);
# 1002 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, unsigned char *);
# 1003 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > &operator>>(basic_istream< char, char_traits< char> > &, signed char *);
# 1005 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned short &);
# 1006 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned &);
# 1007 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long &);
# 1008 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned long &);
# 1009 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(bool &);
# 1011 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long long &);
# 1012 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned long long &);
# 1014 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(float &);
# 1015 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(double &);
# 1016 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long double &);
# 1017 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(void *&);
# 1019 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template class basic_iostream< char, char_traits< char> > ;
# 1022 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template class basic_istream< wchar_t, char_traits< wchar_t> > ;
# 1023 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &ws(basic_istream< wchar_t, char_traits< wchar_t> > &);
# 1024 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, wchar_t &);
# 1025 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > &operator>>(basic_istream< wchar_t, char_traits< wchar_t> > &, wchar_t *);
# 1027 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned short &);
# 1028 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned &);
# 1029 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long &);
# 1030 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned long &);
# 1031 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(bool &);
# 1033 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long long &);
# 1034 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned long long &);
# 1036 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(float &);
# 1037 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(double &);
# 1038 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long double &);
# 1039 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(void *&);
# 1041 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
extern template class basic_iostream< wchar_t, char_traits< wchar_t> > ;
# 1045 "/usr/include/c++/4.2.1/bits/istream.tcc" 3
}
# 42 "/usr/include/c++/4.2.1/bits/stream_iterator.h" 3
namespace std {
# 45 "/usr/include/c++/4.2.1/bits/stream_iterator.h" 3
template < typename _Tp, typename _CharT = char,
           typename _Traits = char_traits < _CharT >, typename _Dist = ptrdiff_t >
    class istream_iterator
    : public iterator < input_iterator_tag, _Tp, _Dist, const _Tp *, const _Tp & >
    {
    public :
      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_istream < _CharT, _Traits > istream_type;

    private :
      istream_type * _M_stream;
      _Tp _M_value;
      bool _M_ok;

    public :

      istream_iterator ( )
      : _M_stream ( 0 ), _M_value ( ), _M_ok ( false ) { }


      istream_iterator ( istream_type & __s )
      : _M_stream ( & __s )
      { _M_read ( ); }

      istream_iterator ( const istream_iterator & __obj )
      : _M_stream ( __obj . _M_stream ), _M_value ( __obj . _M_value ),
        _M_ok ( __obj . _M_ok )
      { }

      const _Tp &
      operator * ( ) const
      {
 ;


 return _M_value;
      }

      const _Tp *
      operator -> ( ) const { return & ( operator * ( ) ); }

      istream_iterator &
      operator ++ ( )
      {
 ;


 _M_read ( );
 return * this;
      }

      istream_iterator
      operator ++ ( int )
      {
 ;


 istream_iterator __tmp = * this;
 _M_read ( );
 return __tmp;
      }

      bool
      _M_equal ( const istream_iterator & __x ) const
      { return ( _M_ok == __x . _M_ok ) && ( ! _M_ok || _M_stream == __x . _M_stream ); }

    private :
      void
      _M_read ( )
      {
 _M_ok = ( _M_stream && * _M_stream ) ? true : false;
 if ( _M_ok )
   {
     * _M_stream >> _M_value;
     _M_ok = * _M_stream ? true : false;
   }
      }
    };
# 126 "/usr/include/c++/4.2.1/bits/stream_iterator.h" 3
template < typename _Tp, typename _CharT, typename _Traits, typename _Dist >
    inline bool
    operator == ( const istream_iterator < _Tp, _CharT, _Traits, _Dist > & __x,
        const istream_iterator < _Tp, _CharT, _Traits, _Dist > & __y )
    { return __x . _M_equal ( __y ); }
# 133 "/usr/include/c++/4.2.1/bits/stream_iterator.h" 3
template < class _Tp, class _CharT, class _Traits, class _Dist >
    inline bool
    operator != ( const istream_iterator < _Tp, _CharT, _Traits, _Dist > & __x,
        const istream_iterator < _Tp, _CharT, _Traits, _Dist > & __y )
    { return ! __x . _M_equal ( __y ); }
# 150 "/usr/include/c++/4.2.1/bits/stream_iterator.h" 3
template < typename _Tp, typename _CharT = char,
           typename _Traits = char_traits < _CharT > >
    class ostream_iterator
    : public iterator < output_iterator_tag, void, void, void, void >
    {
    public :


      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_ostream < _CharT, _Traits > ostream_type;


    private :
      ostream_type * _M_stream;
      const _CharT * _M_string;

    public :

      ostream_iterator ( ostream_type & __s ) : _M_stream ( & __s ), _M_string ( 0 ) { }
# 181 "/usr/include/c++/4.2.1/bits/stream_iterator.h" 3
      ostream_iterator ( ostream_type & __s, const _CharT * __c )
      : _M_stream ( & __s ), _M_string ( __c ) { }


      ostream_iterator ( const ostream_iterator & __obj )
      : _M_stream ( __obj . _M_stream ), _M_string ( __obj . _M_string ) { }



      ostream_iterator &
      operator = ( const _Tp & __value )
      {
 ;


 * _M_stream << __value;
 if ( _M_string ) * _M_stream << _M_string;
 return * this;
      }

      ostream_iterator &
      operator * ( )
      { return * this; }

      ostream_iterator &
      operator ++ ( )
      { return * this; }

      ostream_iterator &
      operator ++ ( int )
      { return * this; }
    };
# 214 "/usr/include/c++/4.2.1/bits/stream_iterator.h" 3
}
# 21 "/Users/jopasserat/programming/boost_1_44_0/boost/iterator.hpp"
namespace boost {
# 39 "/Users/jopasserat/programming/boost_1_44_0/boost/iterator.hpp"
namespace detail {
# 40 "/Users/jopasserat/programming/boost_1_44_0/boost/iterator.hpp"
template< class Category, class T, class Distance, class Pointer, class Reference>
# 42 "/Users/jopasserat/programming/boost_1_44_0/boost/iterator.hpp"
struct iterator_base : public std::iterator< Category, T, Distance, Pointer, Reference> { };
# 51 "/Users/jopasserat/programming/boost_1_44_0/boost/iterator.hpp"
}
# 53 "/Users/jopasserat/programming/boost_1_44_0/boost/iterator.hpp"
template< class Category, class T, class Distance = ptrdiff_t, class
# 54 "/Users/jopasserat/programming/boost_1_44_0/boost/iterator.hpp"
Pointer = T *, class Reference = T &>
# 55 "/Users/jopasserat/programming/boost_1_44_0/boost/iterator.hpp"
struct iterator : public detail::iterator_base< Category, T, Distance, Pointer, Reference> { };
# 57 "/Users/jopasserat/programming/boost_1_44_0/boost/iterator.hpp"
}
# 14 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/yes_no_type.hpp"
namespace boost {
# 15 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/yes_no_type.hpp"
namespace type_traits {
# 17 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/yes_no_type.hpp"
typedef char yes_type;
# 18 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/yes_no_type.hpp"
struct no_type {
# 20 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/yes_no_type.hpp"
char padding[8];
# 21 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/yes_no_type.hpp"
};
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/yes_no_type.hpp"
}
# 24 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/yes_no_type.hpp"
}
# 20 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c_fwd.hpp"
namespace mpl_ {
# 26 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c_fwd.hpp"
template< class T, T N> struct integral_c;
# 29 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c_fwd.hpp"
}
# 30 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c_fwd.hpp"
namespace boost { namespace mpl { using mpl_::integral_c;}}
# 40 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
namespace mpl_ {
# 42 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
template< class T, T N>
# 43 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
struct integral_c {
# 45 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
enum { value = N};
# 51 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
typedef mpl_::integral_c< T, N> type;
# 53 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
typedef T value_type;
# 54 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
typedef integral_c_tag tag;
# 72 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
typedef mpl_::integral_c< T, (T)(value + 1)> next;
# 73 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
typedef mpl_::integral_c< T, (T)(value - 1)> prior;
# 80 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
operator T() const { return static_cast< T>((this->value)); }
# 81 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
};
# 88 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/integral_wrapper.hpp"
}
# 37 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c.hpp"
namespace mpl_ {
# 39 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c.hpp"
template< bool C>
# 40 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c.hpp"
struct integral_c< bool, C> {
# 42 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c.hpp"
enum { value = C};
# 43 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c.hpp"
typedef integral_c_tag tag;
# 44 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c.hpp"
typedef integral_c< bool, C> type;
# 45 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c.hpp"
typedef bool value_type;
# 46 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c.hpp"
operator bool() const { return this->value; }
# 47 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c.hpp"
};
# 48 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/integral_c.hpp"
}
# 13 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/integral_constant.hpp"
namespace boost {
# 18 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/integral_constant.hpp"
template< class T, T val>
# 20 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/integral_constant.hpp"
struct integral_constant : public mpl_::integral_c< T, val> {
# 22 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/integral_constant.hpp"
typedef boost::integral_constant< T, val> type;
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/integral_constant.hpp"
};
# 25 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/integral_constant.hpp"
template<> struct integral_constant< bool, true> : public mpl_::true_ {
# 34 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/integral_constant.hpp"
typedef boost::integral_constant< bool, true> type;
# 35 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/integral_constant.hpp"
};
# 36 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/integral_constant.hpp"
template<> struct integral_constant< bool, false> : public mpl_::false_ {
# 45 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/integral_constant.hpp"
typedef boost::integral_constant< bool, false> type;
# 46 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/integral_constant.hpp"
};
# 48 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/integral_constant.hpp"
typedef integral_constant< bool, true> true_type;
# 49 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/integral_constant.hpp"
typedef integral_constant< bool, false> false_type;
# 51 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/integral_constant.hpp"
}
# 29 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_array.hpp"
namespace boost {
# 34 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_array.hpp"
template< class T> struct is_array : public integral_constant< bool, false> { };
# 36 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_array.hpp"
template< class T, size_t N> struct is_array< T [N]> : public integral_constant< bool, true> { };
# 37 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_array.hpp"
template< class T, size_t N> struct is_array< const T [N]> : public integral_constant< bool, true> { };
# 38 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_array.hpp"
template< class T, size_t N> struct is_array< volatile T [N]> : public integral_constant< bool, true> { };
# 39 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_array.hpp"
template< class T, size_t N> struct is_array< const volatile T [N]> : public integral_constant< bool, true> { };
# 41 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_array.hpp"
template< class T> struct is_array< T []> : public integral_constant< bool, true> { };
# 42 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_array.hpp"
template< class T> struct is_array< const T []> : public integral_constant< bool, true> { };
# 43 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_array.hpp"
template< class T> struct is_array< volatile T []> : public integral_constant< bool, true> { };
# 44 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_array.hpp"
template< class T> struct is_array< const volatile T []> : public integral_constant< bool, true> { };
# 87 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_array.hpp"
}
# 34 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_lvalue_reference.hpp"
namespace boost {
# 40 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_lvalue_reference.hpp"
template< class T> struct is_lvalue_reference : public integral_constant< bool, false> { };
# 41 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_lvalue_reference.hpp"
template< class T> struct is_lvalue_reference< T &> : public integral_constant< bool, true> { };
# 113 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_lvalue_reference.hpp"
}
# 17 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_rvalue_reference.hpp"
namespace boost {
# 19 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_rvalue_reference.hpp"
template< class T> struct is_rvalue_reference : public integral_constant< bool, false> { };
# 24 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_rvalue_reference.hpp"
}
# 13 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_or.hpp"
namespace boost {
# 14 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_or.hpp"
namespace type_traits {
# 16 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_or.hpp"
template< bool b1, bool b2, bool b3 = false, bool b4 = false, bool b5 = false, bool b6 = false, bool b7 = false> struct ice_or;
# 19 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_or.hpp"
template< bool b1, bool b2, bool b3, bool b4, bool b5, bool b6, bool b7>
# 20 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_or.hpp"
struct ice_or {
# 22 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_or.hpp"
enum { value = true};
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_or.hpp"
};
# 26 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_or.hpp"
template<> struct ice_or< false, false, false, false, false, false, false> {
# 28 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_or.hpp"
enum { value};
# 29 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_or.hpp"
};
# 31 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_or.hpp"
}
# 32 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_or.hpp"
}
# 14 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_and.hpp"
namespace boost {
# 15 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_and.hpp"
namespace type_traits {
# 17 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_and.hpp"
template< bool b1, bool b2, bool b3 = true, bool b4 = true, bool b5 = true, bool b6 = true, bool b7 = true> struct ice_and;
# 20 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_and.hpp"
template< bool b1, bool b2, bool b3, bool b4, bool b5, bool b6, bool b7>
# 21 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_and.hpp"
struct ice_and {
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_and.hpp"
enum { value};
# 24 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_and.hpp"
};
# 27 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_and.hpp"
template<> struct ice_and< true, true, true, true, true, true, true> {
# 29 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_and.hpp"
enum { value = 1};
# 30 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_and.hpp"
};
# 32 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_and.hpp"
}
# 33 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_and.hpp"
}
# 13 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_not.hpp"
namespace boost {
# 14 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_not.hpp"
namespace type_traits {
# 16 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_not.hpp"
template< bool b>
# 17 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_not.hpp"
struct ice_not {
# 19 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_not.hpp"
enum { value = true};
# 20 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_not.hpp"
};
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_not.hpp"
template<> struct ice_not< true> {
# 25 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_not.hpp"
enum { value};
# 26 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_not.hpp"
};
# 28 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_not.hpp"
}
# 29 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_not.hpp"
}
# 13 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_eq.hpp"
namespace boost {
# 14 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_eq.hpp"
namespace type_traits {
# 16 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_eq.hpp"
template< int b1, int b2>
# 17 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_eq.hpp"
struct ice_eq {
# 19 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_eq.hpp"
enum { value = (b1 == b2)};
# 20 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_eq.hpp"
};
# 22 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_eq.hpp"
template< int b1, int b2>
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_eq.hpp"
struct ice_ne {
# 25 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_eq.hpp"
enum { value = (b1 != b2)};
# 26 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_eq.hpp"
};
# 33 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_eq.hpp"
}
# 34 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/ice_eq.hpp"
}
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_reference.hpp"
namespace boost {
# 25 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_reference.hpp"
namespace detail {
# 27 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_reference.hpp"
template< class T>
# 28 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_reference.hpp"
struct is_reference_impl {
# 30 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_reference.hpp"
enum { value = type_traits::ice_or< is_lvalue_reference< T> ::value, is_rvalue_reference< T> ::value, false, false, false, false, false> ::value};
# 34 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_reference.hpp"
};
# 36 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_reference.hpp"
}
# 38 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_reference.hpp"
template< class T> struct is_reference : public integral_constant< bool, detail::is_reference_impl< T> ::value> { };
# 40 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_reference.hpp"
}
# 19 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
namespace boost {
# 21 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
namespace detail {
# 59 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
template< class T>
# 60 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
struct add_reference_rvalue_layer {
# 62 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
typedef T &type;
# 63 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
};
# 73 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
template< class T>
# 74 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
struct add_reference_impl {
# 76 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
typedef typename add_reference_rvalue_layer< T> ::type type;
# 77 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
};
# 80 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
template< class T> struct add_reference_impl< T &> { typedef T &type; };
# 86 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
template<> struct add_reference_impl< void> { typedef void type; };
# 88 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
template<> struct add_reference_impl< const void> { typedef const void type; };
# 89 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
template<> struct add_reference_impl< volatile void> { typedef volatile void type; };
# 90 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
template<> struct add_reference_impl< const volatile void> { typedef const volatile void type; };
# 93 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
}
# 95 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
template< class T> struct add_reference { typedef typename detail::add_reference_impl< T> ::type type; };
# 103 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/add_reference.hpp"
}
# 17 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_integral.hpp"
namespace boost {
# 25 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_integral.hpp"
template< class T> struct is_integral : public integral_constant< bool, false> { };
# 27 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_integral.hpp"
template<> struct is_integral< unsigned char> : public integral_constant< bool, true> { }; template<> struct is_integral< const unsigned char> : public integral_constant< bool, true> { }; template<> struct is_integral< volatile unsigned char> : public integral_constant< bool, true> { }; template<> struct is_integral< const volatile unsigned char> : public integral_constant< bool, true> { };
# 28 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_integral.hpp"
template<> struct is_integral< unsigned short> : public integral_constant< bool, true> { }; template<> struct is_integral< const unsigned short> : public integral_constant< bool, true> { }; template<> struct is_integral< volatile unsigned short> : public integral_constant< bool, true> { }; template<> struct is_integral< const volatile unsigned short> : public integral_constant< bool, true> { };
# 29 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_integral.hpp"
template<> struct is_integral< unsigned> : public integral_constant< bool, true> { }; template<> struct is_integral< const unsigned> : public integral_constant< bool, true> { }; template<> struct is_integral< volatile unsigned> : public integral_constant< bool, true> { }; template<> struct is_integral< const volatile unsigned> : public integral_constant< bool, true> { };
# 30 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_integral.hpp"
template<> struct is_integral< unsigned long> : public integral_constant< bool, true> { }; template<> struct is_integral< const unsigned long> : public integral_constant< bool, true> { }; template<> struct is_integral< volatile unsigned long> : public integral_constant< bool, true> { }; template<> struct is_integral< const volatile unsigned long> : public integral_constant< bool, true> { };
# 32 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_integral.hpp"
template<> struct is_integral< signed char> : public integral_constant< bool, true> { }; template<> struct is_integral< const signed char> : public integral_constant< bool, true> { }; template<> struct is_integral< volatile signed char> : public integral_constant< bool, true> { }; template<> struct is_integral< const volatile signed char> : public integral_constant< bool, true> { };
# 33 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_integral.hpp"
template<> struct is_integral< signed short> : public integral_constant< bool, true> { }; template<> struct is_integral< const signed short> : public integral_constant< bool, true> { }; template<> struct is_integral< volatile signed short> : public integral_constant< bool, true> { }; template<> struct is_integral< const volatile signed short> : public integral_constant< bool, true> { };
# 34 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_integral.hpp"
template<> struct is_integral< signed int> : public integral_constant< bool, true> { }; template<> struct is_integral< const signed int> : public integral_constant< bool, true> { }; template<> struct is_integral< volatile signed int> : public integral_constant< bool, true> { }; template<> struct is_integral< const volatile signed int> : public integral_constant< bool, true> { };
# 35 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_integral.hpp"
template<> struct is_integral< signed long> : public integral_constant< bool, true> { }; template<> struct is_integral< const signed long> : public integral_constant< bool, true> { }; template<> struct is_integral< volatile signed long> : public integral_constant< bool, true> { }; template<> struct is_integral< const volatile signed long> : public integral_constant< bool, true> { };
# 37 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_integral.hpp"
template<> struct is_integral< bool> : public integral_constant< bool, true> { }; template<> struct is_integral< const bool> : public integral_constant< bool, true> { }; template<> struct is_integral< volatile bool> : public integral_constant< bool, true> { }; template<> struct is_integral< const volatile bool> : public integral_constant< bool, true> { };
# 38 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_integral.hpp"
template<> struct is_integral< char> : public integral_constant< bool, true> { }; template<> struct is_integral< const char> : public integral_constant< bool, true> { }; template<> struct is_integral< volatile char> : public integral_constant< bool, true> { }; template<> struct is_integral< const volatile char> : public integral_constant< bool, true> { };
# 44 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_integral.hpp"
template<> struct is_integral< wchar_t> : public integral_constant< bool, true> { }; template<> struct is_integral< const wchar_t> : public integral_constant< bool, true> { }; template<> struct is_integral< volatile wchar_t> : public integral_constant< bool, true> { }; template<> struct is_integral< const volatile wchar_t> : public integral_constant< bool, true> { };
# 65 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_integral.hpp"
template<> struct is_integral< unsigned long long> : public integral_constant< bool, true> { }; template<> struct is_integral< const unsigned long long> : public integral_constant< bool, true> { }; template<> struct is_integral< volatile unsigned long long> : public integral_constant< bool, true> { }; template<> struct is_integral< const volatile unsigned long long> : public integral_constant< bool, true> { };
# 66 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_integral.hpp"
template<> struct is_integral< long long> : public integral_constant< bool, true> { }; template<> struct is_integral< const long long> : public integral_constant< bool, true> { }; template<> struct is_integral< volatile long long> : public integral_constant< bool, true> { }; template<> struct is_integral< const volatile long long> : public integral_constant< bool, true> { };
# 74 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_integral.hpp"
}
# 15 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_float.hpp"
namespace boost {
# 18 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_float.hpp"
template< class T> struct is_float : public integral_constant< bool, false> { };
# 19 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_float.hpp"
template<> struct is_float< float> : public integral_constant< bool, true> { }; template<> struct is_float< const float> : public integral_constant< bool, true> { }; template<> struct is_float< volatile float> : public integral_constant< bool, true> { }; template<> struct is_float< const volatile float> : public integral_constant< bool, true> { };
# 20 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_float.hpp"
template<> struct is_float< double> : public integral_constant< bool, true> { }; template<> struct is_float< const double> : public integral_constant< bool, true> { }; template<> struct is_float< volatile double> : public integral_constant< bool, true> { }; template<> struct is_float< const volatile double> : public integral_constant< bool, true> { };
# 21 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_float.hpp"
template<> struct is_float< long double> : public integral_constant< bool, true> { }; template<> struct is_float< const long double> : public integral_constant< bool, true> { }; template<> struct is_float< volatile long double> : public integral_constant< bool, true> { }; template<> struct is_float< const volatile long double> : public integral_constant< bool, true> { };
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_float.hpp"
}
# 22 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_arithmetic.hpp"
namespace boost {
# 25 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_arithmetic.hpp"
namespace detail {
# 27 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_arithmetic.hpp"
template< class T>
# 28 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_arithmetic.hpp"
struct is_arithmetic_impl {
# 30 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_arithmetic.hpp"
enum { value = type_traits::ice_or< is_integral< T> ::value, is_float< T> ::value, false, false, false, false, false> ::value};
# 35 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_arithmetic.hpp"
};
# 37 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_arithmetic.hpp"
}
# 44 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_arithmetic.hpp"
template< class T> struct is_arithmetic : public integral_constant< bool, detail::is_arithmetic_impl< T> ::value> { };
# 47 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_arithmetic.hpp"
}
# 17 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_void.hpp"
namespace boost {
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_void.hpp"
template< class T> struct is_void : public integral_constant< bool, false> { };
# 24 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_void.hpp"
template<> struct is_void< void> : public integral_constant< bool, true> { };
# 27 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_void.hpp"
template<> struct is_void< const void> : public integral_constant< bool, true> { };
# 28 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_void.hpp"
template<> struct is_void< volatile void> : public integral_constant< bool, true> { };
# 29 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_void.hpp"
template<> struct is_void< const volatile void> : public integral_constant< bool, true> { };
# 34 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_void.hpp"
}
# 45 "/Users/jopasserat/programming/boost_1_44_0/boost/static_assert.hpp"
namespace boost {
# 48 "/Users/jopasserat/programming/boost_1_44_0/boost/static_assert.hpp"
template< bool x> struct STATIC_ASSERTION_FAILURE;
# 50 "/Users/jopasserat/programming/boost_1_44_0/boost/static_assert.hpp"
template<> struct STATIC_ASSERTION_FAILURE< true> { enum { value = 1}; };
# 53 "/Users/jopasserat/programming/boost_1_44_0/boost/static_assert.hpp"
template< int x> struct static_assert_test { };
# 55 "/Users/jopasserat/programming/boost_1_44_0/boost/static_assert.hpp"
}
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
namespace boost {
# 24 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
namespace detail {
# 32 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
template< class T> struct cv_traits_imp { };
# 34 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
template< class T>
# 35 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
struct cv_traits_imp< T *> {
# 37 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
enum { is_const};
# 38 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
enum { is_volatile};
# 39 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
typedef T unqualified_type;
# 40 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
};
# 42 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
template< class T>
# 43 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
struct cv_traits_imp< const T *> {
# 45 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
enum { is_const = true};
# 46 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
enum { is_volatile};
# 47 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
typedef T unqualified_type;
# 48 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
};
# 50 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
template< class T>
# 51 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
struct cv_traits_imp< volatile T *> {
# 53 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
enum { is_const};
# 54 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
enum { is_volatile = true};
# 55 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
typedef T unqualified_type;
# 56 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
};
# 58 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
template< class T>
# 59 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
struct cv_traits_imp< const volatile T *> {
# 61 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
enum { is_const = true};
# 62 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
enum { is_volatile = true};
# 63 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
typedef T unqualified_type;
# 64 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
};
# 92 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
}
# 93 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/detail/cv_traits_impl.hpp"
}
# 28 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/remove_cv.hpp"
namespace boost {
# 30 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/remove_cv.hpp"
namespace detail {
# 32 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/remove_cv.hpp"
template< class T>
# 33 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/remove_cv.hpp"
struct rvalue_ref_filter_rem_cv {
# 35 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/remove_cv.hpp"
typedef typename cv_traits_imp< T *> ::unqualified_type type;
# 36 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/remove_cv.hpp"
};
# 50 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/remove_cv.hpp"
}
# 55 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/remove_cv.hpp"
template< class T> struct remove_cv { typedef typename detail::rvalue_ref_filter_rem_cv< T> ::type type; };
# 56 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/remove_cv.hpp"
template< class T> struct remove_cv< T &> { typedef T &type; };
# 58 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/remove_cv.hpp"
template< class T, size_t N> struct remove_cv< const T [N]> { typedef T type[N]; };
# 59 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/remove_cv.hpp"
template< class T, size_t N> struct remove_cv< volatile T [N]> { typedef T type[N]; };
# 60 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/remove_cv.hpp"
template< class T, size_t N> struct remove_cv< const volatile T [N]> { typedef T type[N]; };
# 79 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/remove_cv.hpp"
}
# 21 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_union.hpp"
namespace boost {
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_union.hpp"
namespace detail {
# 36 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_union.hpp"
template< class T> struct is_union_impl {
# 38 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_union.hpp"
enum { value};
# 39 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_union.hpp"
};
# 41 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_union.hpp"
}
# 43 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_union.hpp"
template< class T> struct is_union : public integral_constant< bool, detail::is_union_impl< T> ::value> { };
# 45 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_union.hpp"
}
# 39 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_class.hpp"
namespace boost {
# 41 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_class.hpp"
namespace detail {
# 58 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_class.hpp"
template< class U> type_traits::yes_type is_class_tester(void (U::*)(void));
# 59 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_class.hpp"
template< class U> type_traits::no_type is_class_tester(...);
# 61 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_class.hpp"
template< class T>
# 62 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_class.hpp"
struct is_class_impl {
# 65 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_class.hpp"
enum { value = type_traits::ice_and< (sizeof(is_class_tester< T> (0)) == sizeof(char)), type_traits::ice_not< is_union< T> ::value> ::value, true, true, true, true, true> ::value};
# 71 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_class.hpp"
};
# 127 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_class.hpp"
}
# 133 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_class.hpp"
template< class T> struct is_class : public integral_constant< bool, detail::is_class_impl< T> ::value> { };
# 136 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_class.hpp"
}
# 65 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
namespace boost {
# 66 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
namespace detail {
# 75 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
template< class T>
# 76 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
struct is_abstract_imp2 {
# 82 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
template< class U> static type_traits::no_type check_sig(U (*)[1]);
# 84 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
template< class U> static type_traits::yes_type check_sig(...);
# 90 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
typedef static_assert_test< sizeof(STATIC_ASSERTION_FAILURE< (((sizeof(T) != 0UL) == 0) ? false : true)> )> boost_static_assert_typedef_90;
# 95 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
enum { s1 = sizeof(detail::is_abstract_imp2< T> ::template check_sig< T> (0))};
# 107 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
enum { value = (sizeof(detail::is_abstract_imp2< T> ::template check_sig< T> (0)) == sizeof(type_traits::yes_type))};
# 109 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
};
# 111 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
template< bool v>
# 112 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
struct is_abstract_select {
# 114 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
template< class T>
# 115 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
struct rebind {
# 117 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
typedef is_abstract_imp2< T> type;
# 118 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
};
# 119 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
};
# 121 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
template<> struct is_abstract_select< false> {
# 123 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
template< class T>
# 124 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
struct rebind {
# 126 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
typedef false_type type;
# 127 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
};
# 128 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
};
# 130 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
template< class T>
# 131 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
struct is_abstract_imp {
# 133 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
typedef is_abstract_select< is_class< T> ::value> selector;
# 134 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
typedef typename is_abstract_select< is_class< T> ::value> ::template rebind< T> binder;
# 135 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
typedef typename is_abstract_select< is_class< T> ::value> ::template rebind< T> ::type type;
# 137 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
enum { value = is_abstract_select< is_class< T> ::value> ::template rebind< T> ::type::value};
# 138 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
};
# 141 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
}
# 144 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
template< class T> struct is_abstract : public integral_constant< bool, detail::is_abstract_imp< T> ::value> { };
# 149 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_abstract.hpp"
}
# 38 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
namespace boost {
# 52 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
namespace detail {
# 119 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
struct any_conversion {
# 121 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class T> any_conversion(const volatile T &);
# 122 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class T> any_conversion(T &);
# 123 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
};
# 125 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class T> struct checker {
# 127 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
static type_traits::no_type _m_check(any_conversion, ...);
# 128 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
static type_traits::yes_type _m_check(T, int);
# 129 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
};
# 131 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class From, class To>
# 132 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
struct is_convertible_basic_impl {
# 134 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
static From _m_from;
# 135 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
static const bool value = (sizeof(boost::detail::checker< To> ::_m_check(_m_from, 0)) == sizeof(type_traits::yes_type));
# 137 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
};
# 291 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class From, class To>
# 292 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
struct is_convertible_impl {
# 294 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
typedef typename add_reference< From> ::type ref_type;
# 295 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
enum { value = type_traits::ice_and< type_traits::ice_or< is_convertible_basic_impl< typename add_reference< From> ::type, To> ::value, is_void< To> ::value, false, false, false, false, false> ::value, type_traits::ice_not< is_array< To> ::value> ::value, true, true, true, true, true> ::value};
# 306 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
};
# 309 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< bool trivial1, bool trivial2, bool abstract_target>
# 310 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
struct is_convertible_impl_select {
# 312 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class From, class To>
# 313 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
struct rebind {
# 315 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
typedef is_convertible_impl< From, To> type;
# 316 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
};
# 317 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
};
# 320 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template<> struct is_convertible_impl_select< true, true, false> {
# 322 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class From, class To>
# 323 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
struct rebind {
# 325 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
typedef true_type type;
# 326 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
};
# 327 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
};
# 330 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template<> struct is_convertible_impl_select< false, false, true> {
# 332 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class From, class To>
# 333 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
struct rebind {
# 335 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
typedef false_type type;
# 336 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
};
# 337 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
};
# 340 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template<> struct is_convertible_impl_select< true, false, true> {
# 342 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class From, class To>
# 343 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
struct rebind {
# 345 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
typedef false_type type;
# 346 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
};
# 347 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
};
# 349 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class From, class To>
# 350 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
struct is_convertible_impl_dispatch_base {
# 361 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
typedef is_convertible_impl_select< is_arithmetic< From> ::value, is_arithmetic< To> ::value, is_abstract< To> ::value> selector;
# 365 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
typedef typename is_convertible_impl_select< is_arithmetic< From> ::value, is_arithmetic< To> ::value, is_abstract< To> ::value> ::template rebind< From, To> isc_binder;
# 366 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
typedef typename is_convertible_impl_select< is_arithmetic< From> ::value, is_arithmetic< To> ::value, is_abstract< To> ::value> ::template rebind< From, To> ::type type;
# 367 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
};
# 369 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class From, class To>
# 370 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
struct is_convertible_impl_dispatch : public is_convertible_impl_dispatch_base< From, To> ::type {
# 372 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
};
# 394 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template<> struct is_convertible_impl< void, void> { enum { value = 1}; }; template<> struct is_convertible_impl< void, const void> { enum { value = 1}; }; template<> struct is_convertible_impl< void, volatile void> { enum { value = 1}; }; template<> struct is_convertible_impl< void, const volatile void> { enum { value = 1}; }; template<> struct is_convertible_impl< const void, void> { enum { value = 1}; }; template<> struct is_convertible_impl< const void, const void> { enum { value = 1}; }; template<> struct is_convertible_impl< const void, volatile void> { enum { value = 1}; }; template<> struct is_convertible_impl< const void, const volatile void> { enum { value = 1}; }; template<> struct is_convertible_impl< volatile void, void> { enum { value = 1}; }; template<> struct is_convertible_impl< volatile void, const void> { enum { value = 1}; }; template<> struct is_convertible_impl< volatile void, volatile void> { enum { value = 1}; }; template<> struct is_convertible_impl< volatile void, const volatile void> { enum { value = 1}; }; template<> struct is_convertible_impl< const volatile void, void> { enum { value = 1}; }; template<> struct is_convertible_impl< const volatile void, const void> { enum { value = 1}; }; template<> struct is_convertible_impl< const volatile void, volatile void> { enum { value = 1}; }; template<> struct is_convertible_impl< const volatile void, const volatile void> { enum { value = 1}; };
# 404 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class To> struct is_convertible_impl< void, To> { enum { value}; };
# 405 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class From> struct is_convertible_impl< From, void> { enum { value = true}; };
# 407 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class To> struct is_convertible_impl< const void, To> { enum { value}; };
# 408 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class To> struct is_convertible_impl< volatile void, To> { enum { value}; };
# 409 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class To> struct is_convertible_impl< const volatile void, To> { enum { value}; };
# 410 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class From> struct is_convertible_impl< From, const void> { enum { value = true}; };
# 411 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class From> struct is_convertible_impl< From, volatile void> { enum { value = true}; };
# 412 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class From> struct is_convertible_impl< From, const volatile void> { enum { value = true}; };
# 416 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
}
# 418 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
template< class From, class To> struct is_convertible : public integral_constant< bool, detail::is_convertible_impl_dispatch< From, To> ::value> { };
# 426 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_convertible.hpp"
}
# 33 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_same.hpp"
namespace boost {
# 37 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_same.hpp"
template< class T, class U> struct is_same : public integral_constant< bool, false> { };
# 38 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_same.hpp"
template< class T> struct is_same< T, T> : public integral_constant< bool, true> { };
# 98 "/Users/jopasserat/programming/boost_1_44_0/boost/type_traits/is_same.hpp"
}
# 25 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/nested_type_wknd.hpp"
namespace boost { namespace mpl { namespace aux {
# 26 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/nested_type_wknd.hpp"
template< class T> struct nested_type_wknd : public T::type {
# 29 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/nested_type_wknd.hpp"
};
# 30 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/nested_type_wknd.hpp"
}}}
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/not.hpp"
namespace boost { namespace mpl {
# 25 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/not.hpp"
namespace aux {
# 27 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/not.hpp"
template< long C_>
# 28 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/not.hpp"
struct not_impl : public mpl_::bool_< (!C_)> {
# 31 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/not.hpp"
};
# 33 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/not.hpp"
}
# 36 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/not.hpp"
template< class
# 37 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/not.hpp"
T = mpl_::na>
# 39 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/not.hpp"
struct not_ : public aux::not_impl< aux::nested_type_wknd< T> ::value> {
# 45 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/not.hpp"
};
# 47 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/not.hpp"
template<> struct not_< mpl_::na> { template< class T1, class T2 = mpl_::na, class T3 = mpl_::na, class T4 = mpl_::na, class T5 = mpl_::na> struct apply : public mpl::not_< T1> { }; }; template< class Tag> struct lambda< not_< mpl_::na> , Tag, mpl_::int_< (-1)> > { typedef mpl_::false_ is_le; typedef not_< mpl_::na> result_; typedef not_< mpl_::na> type; }; namespace aux { template< class T1> struct template_arity< not_< T1> > : public mpl_::int_< 1> { }; template<> struct template_arity< not_< mpl_::na> > : public mpl_::int_< (-1)> { }; }
# 49 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/not.hpp"
}}
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/yes_no.hpp"
namespace boost { namespace mpl { namespace aux {
# 25 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/yes_no.hpp"
typedef char (&no_tag)[1];
# 26 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/yes_no.hpp"
typedef char (&yes_tag)[2];
# 28 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/yes_no.hpp"
template< bool C_> struct yes_no_tag {
# 30 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/yes_no.hpp"
typedef no_tag type;
# 31 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/yes_no.hpp"
};
# 33 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/yes_no.hpp"
template<> struct yes_no_tag< true> {
# 35 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/yes_no.hpp"
typedef yes_tag type;
# 36 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/yes_no.hpp"
};
# 39 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/yes_no.hpp"
template< long n> struct weighted_tag {
# 42 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/yes_no.hpp"
typedef char (&type)[n];
# 47 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/yes_no.hpp"
};
# 56 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/aux_/yes_no.hpp"
}}}
# 62 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
namespace mpl_ {
# 64 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
struct failed { };
# 75 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
template< bool C> struct assert { typedef void *type; };
# 76 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
template<> struct assert< false> { typedef mpl_::assert< false> type; };
# 78 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
template< bool C> int assertion_failed(typename assert< C> ::type);
# 81 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
template< bool C>
# 82 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
struct assertion {
# 84 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
static int failed(assert< false> );
# 85 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
};
# 88 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
template<> struct assertion< true> {
# 90 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
static int failed(void *);
# 91 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
};
# 93 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
struct assert_ {
# 96 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
template< class T1, class T2 = na, class T3 = na, class T4 = na> struct types { };
# 98 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
static const assert_ arg;
# 99 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
enum relations { equal = 1, not_equal, greater, greater_equal, less, less_equal};
# 100 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
};
# 123 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
boost::mpl::aux::weighted_tag< 1L> ::type operator==(assert_, assert_);
# 124 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
boost::mpl::aux::weighted_tag< 2L> ::type operator!=(assert_, assert_);
# 125 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
boost::mpl::aux::weighted_tag< 3L> ::type operator>(assert_, assert_);
# 126 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
boost::mpl::aux::weighted_tag< 4L> ::type operator>=(assert_, assert_);
# 127 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
boost::mpl::aux::weighted_tag< 5L> ::type operator<(assert_, assert_);
# 128 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
boost::mpl::aux::weighted_tag< 6L> ::type operator<=(assert_, assert_);
# 130 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
template< assert_::relations r, long x, long y> struct assert_relation { };
# 137 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
template< bool __T12> struct assert_arg_pred_impl { typedef int type; };
# 138 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
template<> struct assert_arg_pred_impl< true> { typedef void *type; };
# 140 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
template< class P> struct assert_arg_pred {
# 142 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
typedef typename P::type p_type;
# 143 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
typedef typename assert_arg_pred_impl< P::type::value> ::type type;
# 144 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
};
# 146 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
template< class P> struct assert_arg_pred_not {
# 148 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
typedef typename P::type p_type;
# 149 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
enum { p = (!p_type::value)};
# 150 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
typedef typename assert_arg_pred_impl< p> ::type type;
# 151 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
};
# 153 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
template< class Pred> failed ************Pred::************assert_arg(void (*)(Pred), typename assert_arg_pred< Pred> ::type);
# 158 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
template< class Pred> failed ************boost::mpl::not_< Pred> ::************assert_not_arg(void (*)(Pred), typename assert_arg_pred_not< Pred> ::type);
# 163 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
template< class Pred> assert< false> assert_arg(void (*)(Pred), typename assert_arg_pred_not< Pred> ::type);
# 167 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
template< class Pred> assert< false> assert_not_arg(void (*)(Pred), typename assert_arg_pred< Pred> ::type);
# 212 "/Users/jopasserat/programming/boost_1_44_0/boost/mpl/assert.hpp"
}
# 77 "/Users/jopasserat/programming/boost_1_44_0/boost/detail/iterator.hpp"
namespace boost { namespace detail {
# 80 "/Users/jopasserat/programming/boost_1_44_0/boost/detail/iterator.hpp"
template< class Iterator>
# 81 "/Users/jopasserat/programming/boost_1_44_0/boost/detail/iterator.hpp"
struct iterator_traits : public std::iterator_traits< Iterator> {
# 83 "/Users/jopasserat/programming/boost_1_44_0/boost/detail/iterator.hpp"
};
# 84 "/Users/jopasserat/programming/boost_1_44_0/boost/detail/iterator.hpp"
using std::distance;
# 86 "/Users/jopasserat/programming/boost_1_44_0/boost/detail/iterator.hpp"
}}
# 11 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/usage.hpp"
namespace boost { namespace concepts {
# 19 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/usage.hpp"
template< class Model>
# 20 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/usage.hpp"
struct usage_requirements {
# 22 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/usage.hpp"
~usage_requirements() { (((Model *)0)->~Model()); }
# 23 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/usage.hpp"
};
# 42 "/Users/jopasserat/programming/boost_1_44_0/boost/concept/usage.hpp"
}}
# 33 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
namespace boost {
# 40 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Model> inline void
# 41 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
function_requires(Model * = (0))
# 42 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 43 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Model)> ::failed> boost_concept_check43;
# 44 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 45 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class T> inline void ignore_unused_variable_warning(const T &) { }
# 63 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class T> struct Integer; template< class T> struct IntegerConcept : public Integer< T> { }; template< class T> struct Integer {
# 65 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::Integer< T> > )> ::failed> boost_concept_check65; ~Integer()
# 66 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 67 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
((x).error_type_must_be_an_integer_type());
# 68 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 70 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: T x;
# 71 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 73 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct Integer< signed char> { };
# 74 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct Integer< unsigned char> { };
# 75 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct Integer< short> { };
# 76 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct Integer< unsigned short> { };
# 77 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct Integer< int> { };
# 78 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct Integer< unsigned> { };
# 79 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct Integer< long> { };
# 80 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct Integer< unsigned long> { };
# 82 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct Integer< long long> { };
# 83 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct Integer< unsigned long long> { };
# 89 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class T> struct SignedInteger; template< class T> struct SignedIntegerConcept : public SignedInteger< T> { }; template< class T> struct SignedInteger {
# 90 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::SignedInteger< T> > )> ::failed> boost_concept_check90; ~SignedInteger() {
# 91 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
((x).error_type_must_be_a_signed_integer_type());
# 92 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 94 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: T x;
# 95 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 96 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct SignedInteger< signed char> { };
# 97 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct SignedInteger< short> { };
# 98 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct SignedInteger< int> { };
# 99 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct SignedInteger< long> { };
# 101 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct SignedInteger< long long> { };
# 106 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class T> struct UnsignedInteger; template< class T> struct UnsignedIntegerConcept : public UnsignedInteger< T> { }; template< class T> struct UnsignedInteger {
# 107 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::UnsignedInteger< T> > )> ::failed> boost_concept_check107; ~UnsignedInteger() {
# 108 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
((x).error_type_must_be_an_unsigned_integer_type());
# 109 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 111 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: T x;
# 112 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 114 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct UnsignedInteger< unsigned char> { };
# 115 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct UnsignedInteger< unsigned short> { };
# 116 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct UnsignedInteger< unsigned> { };
# 117 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct UnsignedInteger< unsigned long> { };
# 119 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template<> struct UnsignedInteger< unsigned long long> { };
# 127 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class TT> struct DefaultConstructible; template< class TT> struct DefaultConstructibleConcept : public DefaultConstructible< TT> { }; template< class TT> struct DefaultConstructible {
# 129 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::DefaultConstructible< TT> > )> ::failed> boost_concept_check129; ~DefaultConstructible() {
# 130 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
TT a;
# 131 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(a);
# 132 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 133 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 135 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class TT> struct Assignable; template< class TT> struct AssignableConcept : public Assignable< TT> { }; template< class TT> struct Assignable {
# 137 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::Assignable< TT> > )> ::failed> boost_concept_check137; ~Assignable() {
# 139 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(a) = (a);
# 141 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
this->const_constraints(a);
# 142 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 144 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: void const_constraints(const TT &b) {
# 146 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(a) = b;
# 150 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 152 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
TT a;
# 153 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 156 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class TT> struct CopyConstructible; template< class TT> struct CopyConstructibleConcept : public CopyConstructible< TT> { }; template< class TT> struct CopyConstructible {
# 158 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::CopyConstructible< TT> > )> ::failed> boost_concept_check158; ~CopyConstructible() {
# 159 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
TT a(b);
# 160 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
TT *ptr = (&a);
# 161 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
this->const_constraints(a);
# 162 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(ptr);
# 163 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 165 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: void const_constraints(const TT &a) {
# 166 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
TT c(a);
# 167 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
const TT *ptr = (&a);
# 168 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(c);
# 169 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(ptr);
# 170 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 171 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
TT b;
# 172 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 180 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class TT> struct SGIAssignable; template< class TT> struct SGIAssignableConcept : public SGIAssignable< TT> { }; template< class TT> struct SGIAssignable {
# 182 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::SGIAssignable< TT> > )> ::failed> boost_concept_check182; ~SGIAssignable() {
# 183 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
TT b(a);
# 185 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(a) = (a);
# 187 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
this->const_constraints(a);
# 188 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(b);
# 189 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 191 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: void const_constraints(const TT &b) {
# 192 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
TT c(b);
# 194 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(a) = b;
# 196 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(c);
# 197 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 198 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
TT a;
# 199 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 204 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class X, class Y> struct Convertible; template< class X, class Y> struct ConvertibleConcept : public Convertible< X, Y> { }; template< class X, class Y> struct Convertible {
# 206 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::Convertible< X, Y> > )> ::failed> boost_concept_check206; ~Convertible() {
# 207 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
Y y = (x);
# 208 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(y);
# 209 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 211 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: X x;
# 212 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 223 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class TT> void
# 224 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
require_boolean_expr(const TT &t) {
# 225 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
bool x = (t);
# 226 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(x);
# 227 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 229 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class TT> struct EqualityComparable; template< class TT> struct EqualityComparableConcept : public EqualityComparable< TT> { }; template< class TT> struct EqualityComparable {
# 231 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::EqualityComparable< TT> > )> ::failed> boost_concept_check231; ~EqualityComparable() {
# 232 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
require_boolean_expr((a) == (b));
# 233 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
require_boolean_expr((a) != (b));
# 234 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 236 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: TT a, b;
# 237 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 239 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class TT> struct LessThanComparable; template< class TT> struct LessThanComparableConcept : public LessThanComparable< TT> { }; template< class TT> struct LessThanComparable {
# 241 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::LessThanComparable< TT> > )> ::failed> boost_concept_check241; ~LessThanComparable() {
# 242 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
require_boolean_expr((a) < (b));
# 243 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 245 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: TT a, b;
# 246 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 249 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class TT> struct Comparable; template< class TT> struct ComparableConcept : public Comparable< TT> { }; template< class TT> struct Comparable {
# 251 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::Comparable< TT> > )> ::failed> boost_concept_check251; ~Comparable() {
# 252 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
require_boolean_expr((a) < (b));
# 253 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
require_boolean_expr((a) > (b));
# 254 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
require_boolean_expr((a) <= (b));
# 255 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
require_boolean_expr((a) >= (b));
# 256 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 258 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: TT a, b;
# 259 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 281 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class First, class Second> struct EqualOp; template< class First, class Second> struct EqualOpConcept : public EqualOp< First, Second> { }; template< class First, class Second> struct EqualOp { typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::EqualOp< First, Second> > )> ::failed> boost_concept_check281; ~EqualOp() { (void)this->constraints_(); } private: bool constraints_() { return (a) == (b); } First a; Second b; };
# 282 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class First, class Second> struct NotEqualOp; template< class First, class Second> struct NotEqualOpConcept : public NotEqualOp< First, Second> { }; template< class First, class Second> struct NotEqualOp { typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::NotEqualOp< First, Second> > )> ::failed> boost_concept_check282; ~NotEqualOp() { (void)this->constraints_(); } private: bool constraints_() { return (a) != (b); } First a; Second b; };
# 283 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class First, class Second> struct LessThanOp; template< class First, class Second> struct LessThanOpConcept : public LessThanOp< First, Second> { }; template< class First, class Second> struct LessThanOp { typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::LessThanOp< First, Second> > )> ::failed> boost_concept_check283; ~LessThanOp() { (void)this->constraints_(); } private: bool constraints_() { return (a) < (b); } First a; Second b; };
# 284 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class First, class Second> struct LessEqualOp; template< class First, class Second> struct LessEqualOpConcept : public LessEqualOp< First, Second> { }; template< class First, class Second> struct LessEqualOp { typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::LessEqualOp< First, Second> > )> ::failed> boost_concept_check284; ~LessEqualOp() { (void)this->constraints_(); } private: bool constraints_() { return (a) <= (b); } First a; Second b; };
# 285 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class First, class Second> struct GreaterThanOp; template< class First, class Second> struct GreaterThanOpConcept : public GreaterThanOp< First, Second> { }; template< class First, class Second> struct GreaterThanOp { typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::GreaterThanOp< First, Second> > )> ::failed> boost_concept_check285; ~GreaterThanOp() { (void)this->constraints_(); } private: bool constraints_() { return (a) > (b); } First a; Second b; };
# 286 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class First, class Second> struct GreaterEqualOp; template< class First, class Second> struct GreaterEqualOpConcept : public GreaterEqualOp< First, Second> { }; template< class First, class Second> struct GreaterEqualOp { typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::GreaterEqualOp< First, Second> > )> ::failed> boost_concept_check286; ~GreaterEqualOp() { (void)this->constraints_(); } private: bool constraints_() { return (a) >= (b); } First a; Second b; };
# 288 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Ret, class First, class Second> struct PlusOp; template< class Ret, class First, class Second> struct PlusOpConcept : public PlusOp< Ret, First, Second> { }; template< class Ret, class First, class Second> struct PlusOp { typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::PlusOp< Ret, First, Second> > )> ::failed> boost_concept_check288; ~PlusOp() { (void)this->constraints_(); } private: Ret constraints_() { return (a) + (b); } First a; Second b; };
# 289 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Ret, class First, class Second> struct TimesOp; template< class Ret, class First, class Second> struct TimesOpConcept : public TimesOp< Ret, First, Second> { }; template< class Ret, class First, class Second> struct TimesOp { typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::TimesOp< Ret, First, Second> > )> ::failed> boost_concept_check289; ~TimesOp() { (void)this->constraints_(); } private: Ret constraints_() { return (a) * (b); } First a; Second b; };
# 290 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Ret, class First, class Second> struct DivideOp; template< class Ret, class First, class Second> struct DivideOpConcept : public DivideOp< Ret, First, Second> { }; template< class Ret, class First, class Second> struct DivideOp { typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::DivideOp< Ret, First, Second> > )> ::failed> boost_concept_check290; ~DivideOp() { (void)this->constraints_(); } private: Ret constraints_() { return (a) / (b); } First a; Second b; };
# 291 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Ret, class First, class Second> struct SubtractOp; template< class Ret, class First, class Second> struct SubtractOpConcept : public SubtractOp< Ret, First, Second> { }; template< class Ret, class First, class Second> struct SubtractOp { typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::SubtractOp< Ret, First, Second> > )> ::failed> boost_concept_check291; ~SubtractOp() { (void)this->constraints_(); } private: Ret constraints_() { return (a) - (b); } First a; Second b; };
# 292 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Ret, class First, class Second> struct ModOp; template< class Ret, class First, class Second> struct ModOpConcept : public ModOp< Ret, First, Second> { }; template< class Ret, class First, class Second> struct ModOp { typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::ModOp< Ret, First, Second> > )> ::failed> boost_concept_check292; ~ModOp() { (void)this->constraints_(); } private: Ret constraints_() { return (a) % (b); } First a; Second b; };
# 297 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Func, class Return> struct Generator; template< class Func, class Return> struct GeneratorConcept : public Generator< Func, Return> { }; template< class Func, class Return> struct Generator {
# 299 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::Generator< Func, Return> > )> ::failed> boost_concept_check299; ~Generator() { test(is_void< Return> ()); }
# 302 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: void test(mpl_::false_)
# 303 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 305 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
const Return &r = ((f)());
# 306 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(r);
# 307 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 309 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
void test(mpl_::true_)
# 310 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 311 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(f)();
# 312 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 314 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
Func f;
# 315 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 317 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Func, class Return, class Arg> struct UnaryFunction; template< class Func, class Return, class Arg> struct UnaryFunctionConcept : public UnaryFunction< Func, Return, Arg> { }; template< class Func, class Return, class Arg> struct UnaryFunction {
# 319 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::UnaryFunction< Func, Return, Arg> > )> ::failed> boost_concept_check319; ~UnaryFunction() { test(is_void< Return> ()); }
# 322 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: void test(mpl_::false_)
# 323 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 324 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(f)(arg);
# 325 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
Return r = ((f)(arg));
# 326 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(r);
# 327 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 329 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
void test(mpl_::true_)
# 330 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 331 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(f)(arg);
# 332 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 340 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
UnaryFunction();
# 343 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
Func f;
# 344 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
Arg arg;
# 345 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 347 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Func, class Return, class First, class Second> struct BinaryFunction; template< class Func, class Return, class First, class Second> struct BinaryFunctionConcept : public BinaryFunction< Func, Return, First, Second> { }; template< class Func, class Return, class First, class Second> struct BinaryFunction {
# 349 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::BinaryFunction< Func, Return, First, Second> > )> ::failed> boost_concept_check349; ~BinaryFunction() { test(is_void< Return> ()); }
# 351 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: void test(mpl_::false_)
# 352 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 353 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(f)(first, second);
# 354 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
Return r = ((f)(first, second));
# 355 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(void)r;
# 356 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 358 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
void test(mpl_::true_)
# 359 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 360 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(f)(first, second);
# 361 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 363 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
Func f;
# 364 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
First first;
# 365 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
Second second;
# 366 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 368 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Func, class Arg> struct UnaryPredicate; template< class Func, class Arg> struct UnaryPredicateConcept : public UnaryPredicate< Func, Arg> { }; template< class Func, class Arg> struct UnaryPredicate {
# 370 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::UnaryPredicate< Func, Arg> > )> ::failed> boost_concept_check370; ~UnaryPredicate() {
# 371 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
require_boolean_expr((f)(arg));
# 372 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 374 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: Func f;
# 375 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
Arg arg;
# 376 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 378 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Func, class First, class Second> struct BinaryPredicate; template< class Func, class First, class Second> struct BinaryPredicateConcept : public BinaryPredicate< Func, First, Second> { }; template< class Func, class First, class Second> struct BinaryPredicate {
# 380 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::BinaryPredicate< Func, First, Second> > )> ::failed> boost_concept_check380; ~BinaryPredicate() {
# 381 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
require_boolean_expr((f)(a, b));
# 382 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 384 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: Func f;
# 385 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
First a;
# 386 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
Second b;
# 387 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 390 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Func, class First, class Second> struct Const_BinaryPredicate; template< class Func, class First, class Second> struct Const_BinaryPredicateConcept : public Const_BinaryPredicate< Func, First, Second> { }; template< class Func, class First, class Second> struct Const_BinaryPredicate : public BinaryPredicate< Func, First, Second> {
# 393 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::Const_BinaryPredicate< Func, First, Second> > )> ::failed> boost_concept_check393; ~Const_BinaryPredicate() {
# 394 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
this->const_constraints(f);
# 395 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 397 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: void const_constraints(const Func &fun) {
# 399 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
require_boolean_expr(fun(a, b));
# 400 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 401 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
Func f;
# 402 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
First a;
# 403 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
Second b;
# 404 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 406 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Func, class Return> struct AdaptableGenerator; template< class Func, class Return> struct AdaptableGeneratorConcept : public AdaptableGenerator< Func, Return> { }; template< class Func, class Return> struct AdaptableGenerator : public Generator< Func, typename Func::result_type> {
# 409 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename Func::result_type result_type;
# 411 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::AdaptableGenerator< Func, Return> > )> ::failed> boost_concept_check411; ~AdaptableGenerator()
# 412 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 413 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Convertible< typename Func::result_type, Return> )> ::failed> boost_concept_check413;
# 414 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 415 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 417 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Func, class Return, class Arg> struct AdaptableUnaryFunction; template< class Func, class Return, class Arg> struct AdaptableUnaryFunctionConcept : public AdaptableUnaryFunction< Func, Return, Arg> { }; template< class Func, class Return, class Arg> struct AdaptableUnaryFunction : public UnaryFunction< Func, typename Func::result_type, typename Func::argument_type> {
# 420 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename Func::argument_type argument_type;
# 421 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename Func::result_type result_type;
# 423 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
~AdaptableUnaryFunction()
# 424 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 425 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Convertible< typename Func::result_type, Return> )> ::failed> boost_concept_check425;
# 426 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Convertible< Arg, typename Func::argument_type> )> ::failed> boost_concept_check426;
# 427 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 428 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 430 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Func, class Return, class First, class Second> struct AdaptableBinaryFunction; template< class Func, class Return, class First, class Second> struct AdaptableBinaryFunctionConcept : public AdaptableBinaryFunction< Func, Return, First, Second> { }; template< class Func, class Return, class First, class Second> struct AdaptableBinaryFunction : public BinaryFunction< Func, typename Func::result_type, typename Func::first_argument_type, typename Func::second_argument_type> {
# 438 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename Func::first_argument_type first_argument_type;
# 439 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename Func::second_argument_type second_argument_type;
# 440 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename Func::result_type result_type;
# 442 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
~AdaptableBinaryFunction()
# 443 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 444 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Convertible< typename Func::result_type, Return> )> ::failed> boost_concept_check444;
# 445 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Convertible< First, typename Func::first_argument_type> )> ::failed> boost_concept_check445;
# 446 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Convertible< Second, typename Func::second_argument_type> )> ::failed> boost_concept_check446;
# 447 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 448 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 450 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Func, class Arg> struct AdaptablePredicate; template< class Func, class Arg> struct AdaptablePredicateConcept : public AdaptablePredicate< Func, Arg> { }; template< class Func, class Arg> struct AdaptablePredicate : public UnaryPredicate< Func, Arg> , public AdaptableUnaryFunction< Func, bool, Arg> {
# 454 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 456 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class Func, class First, class Second> struct AdaptableBinaryPredicate; template< class Func, class First, class Second> struct AdaptableBinaryPredicateConcept : public AdaptableBinaryPredicate< Func, First, Second> { }; template< class Func, class First, class Second> struct AdaptableBinaryPredicate : public BinaryPredicate< Func, First, Second> , public AdaptableBinaryFunction< Func, bool, First, Second> {
# 460 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 465 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class TT> struct InputIterator; template< class TT> struct InputIteratorConcept : public InputIterator< TT> { }; template< class TT> struct InputIterator : public Assignable< TT> , public EqualityComparable< TT> {
# 469 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename detail::iterator_traits< TT> ::value_type value_type;
# 470 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename detail::iterator_traits< TT> ::difference_type difference_type;
# 471 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename detail::iterator_traits< TT> ::reference reference;
# 472 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename detail::iterator_traits< TT> ::pointer pointer;
# 473 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename detail::iterator_traits< TT> ::iterator_category iterator_category;
# 475 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::InputIterator< TT> > )> ::failed> boost_concept_check475; ~InputIterator()
# 476 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 477 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(SignedInteger< typename detail::iterator_traits< TT> ::difference_type> )> ::failed> boost_concept_check477;
# 478 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Convertible< typename detail::iterator_traits< TT> ::iterator_category, std::input_iterator_tag> )> ::failed> boost_concept_check478;
# 480 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
TT j(i);
# 481 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(void)(*(i));
# 482 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
++j;
# 483 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(i)++;
# 484 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 486 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: TT i;
# 487 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 489 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class TT, class ValueT> struct OutputIterator; template< class TT, class ValueT> struct OutputIteratorConcept : public OutputIterator< TT, ValueT> { }; template< class TT, class ValueT> struct OutputIterator : public Assignable< TT> {
# 492 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::OutputIterator< TT, ValueT> > )> ::failed> boost_concept_check492; ~OutputIterator() {
# 494 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
++(i);
# 495 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(i)++;
# 496 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(*((i)++)) = (t);
# 497 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 499 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: TT i, j;
# 500 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ValueT t;
# 501 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 503 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class TT> struct ForwardIterator; template< class TT> struct ForwardIteratorConcept : public ForwardIterator< TT> { }; template< class TT> struct ForwardIterator : public InputIterator< TT> {
# 506 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::ForwardIterator< TT> > )> ::failed> boost_concept_check506; ~ForwardIterator()
# 507 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 508 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Convertible< typename ForwardIterator::iterator_category, std::forward_iterator_tag> )> ::failed> boost_concept_check511;
# 513 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename InputIterator< TT> ::reference r = (*(i));
# 514 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(r);
# 515 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 518 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: TT i;
# 519 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 521 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class TT> struct Mutable_ForwardIterator; template< class TT> struct Mutable_ForwardIteratorConcept : public Mutable_ForwardIterator< TT> { }; template< class TT> struct Mutable_ForwardIterator : public ForwardIterator< TT> {
# 524 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::Mutable_ForwardIterator< TT> > )> ::failed> boost_concept_check524; ~Mutable_ForwardIterator() {
# 525 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(*((i)++)) = (*(i));
# 526 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 528 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: TT i;
# 529 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 531 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class TT> struct BidirectionalIterator; template< class TT> struct BidirectionalIteratorConcept : public BidirectionalIterator< TT> { }; template< class TT> struct BidirectionalIterator : public ForwardIterator< TT> {
# 534 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::BidirectionalIterator< TT> > )> ::failed> boost_concept_check534; ~BidirectionalIterator()
# 535 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 536 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Convertible< typename BidirectionalIterator::iterator_category, std::bidirectional_iterator_tag> )> ::failed> boost_concept_check539;
# 541 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
--(i);
# 542 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(i)--;
# 543 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 545 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: TT i;
# 546 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 548 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class TT> struct Mutable_BidirectionalIterator; template< class TT> struct Mutable_BidirectionalIteratorConcept : public Mutable_BidirectionalIterator< TT> { }; template< class TT> struct Mutable_BidirectionalIterator : public BidirectionalIterator< TT> , public Mutable_ForwardIterator< TT> {
# 552 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::Mutable_BidirectionalIterator< TT> > )> ::failed> boost_concept_check552; ~Mutable_BidirectionalIterator()
# 553 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 554 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(*((i)--)) = (*(i));
# 555 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 557 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: TT i;
# 558 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 560 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class TT> struct RandomAccessIterator; template< class TT> struct RandomAccessIteratorConcept : public RandomAccessIterator< TT> { }; template< class TT> struct RandomAccessIterator : public BidirectionalIterator< TT> , public Comparable< TT> {
# 564 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::RandomAccessIterator< TT> > )> ::failed> boost_concept_check564; ~RandomAccessIterator()
# 565 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 566 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Convertible< typename BidirectionalIterator< TT> ::iterator_category, std::random_access_iterator_tag> )> ::failed> boost_concept_check569;
# 571 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(i) += (n);
# 572 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(i) = ((i) + (n)); (i) = ((n) + (i));
# 573 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(i) -= (n);
# 574 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(i) = ((i) - (n));
# 575 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(n) = ((i) - (j));
# 576 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(void)((i)[n]);
# 577 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 580 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: TT a, b;
# 581 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
TT i, j;
# 582 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename detail::iterator_traits< TT> ::difference_type n;
# 583 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 585 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class TT> struct Mutable_RandomAccessIterator; template< class TT> struct Mutable_RandomAccessIteratorConcept : public Mutable_RandomAccessIterator< TT> { }; template< class TT> struct Mutable_RandomAccessIterator : public RandomAccessIterator< TT> , public Mutable_BidirectionalIterator< TT> {
# 589 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::Mutable_RandomAccessIterator< TT> > )> ::failed> boost_concept_check589; ~Mutable_RandomAccessIterator()
# 590 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 591 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
((i)[n]) = (*(i));
# 592 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 594 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: TT i;
# 595 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename detail::iterator_traits< TT> ::difference_type n;
# 596 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 601 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class C> struct Container; template< class C> struct ContainerConcept : public Container< C> { }; template< class C> struct Container : public Assignable< C> {
# 604 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::value_type value_type;
# 605 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::difference_type difference_type;
# 606 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::size_type size_type;
# 607 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::const_reference const_reference;
# 608 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::const_pointer const_pointer;
# 609 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::const_iterator const_iterator;
# 611 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::Container< C> > )> ::failed> boost_concept_check611; ~Container()
# 612 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 613 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(InputIterator< typename C::const_iterator> )> ::failed> boost_concept_check613;
# 614 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
this->const_constraints(c);
# 615 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 618 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: void const_constraints(const C &cc) {
# 619 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(i) = (cc.begin());
# 620 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(i) = (cc.end());
# 621 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(n) = (cc.size());
# 622 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(n) = (cc.max_size());
# 623 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(b) = (cc.empty());
# 624 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 625 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
C c;
# 626 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
bool b;
# 627 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
const_iterator i;
# 628 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
size_type n;
# 629 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 631 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class C> struct Mutable_Container; template< class C> struct Mutable_ContainerConcept : public Mutable_Container< C> { }; template< class C> struct Mutable_Container : public Container< C> {
# 634 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::reference reference;
# 635 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::iterator iterator;
# 636 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::pointer pointer;
# 638 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::Mutable_Container< C> > )> ::failed> boost_concept_check638; ~Mutable_Container()
# 639 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 640 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Assignable< typename Mutable_Container::value_type> )> ::failed> boost_concept_check641;
# 643 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(InputIterator< typename C::iterator> )> ::failed> boost_concept_check643;
# 645 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(i) = ((c).begin());
# 646 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(i) = ((c).end());
# 647 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
((c).swap(c2));
# 648 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 651 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: iterator i;
# 652 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
C c, c2;
# 653 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 655 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class C> struct ForwardContainer; template< class C> struct ForwardContainerConcept : public ForwardContainer< C> { }; template< class C> struct ForwardContainer : public Container< C> {
# 658 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::ForwardContainer< C> > )> ::failed> boost_concept_check658; ~ForwardContainer()
# 659 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 660 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(ForwardIterator< typename ForwardContainer::const_iterator> )> ::failed> boost_concept_check663;
# 664 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 665 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 667 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class C> struct Mutable_ForwardContainer; template< class C> struct Mutable_ForwardContainerConcept : public Mutable_ForwardContainer< C> { }; template< class C> struct Mutable_ForwardContainer : public ForwardContainer< C> , public Mutable_Container< C> {
# 671 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::Mutable_ForwardContainer< C> > )> ::failed> boost_concept_check671; ~Mutable_ForwardContainer()
# 672 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 673 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Mutable_ForwardIterator< typename Mutable_ForwardContainer::iterator> )> ::failed> boost_concept_check676;
# 677 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 678 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 680 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class C> struct ReversibleContainer; template< class C> struct ReversibleContainerConcept : public ReversibleContainer< C> { }; template< class C> struct ReversibleContainer : public ForwardContainer< C> {
# 685 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::const_reverse_iterator const_reverse_iterator;
# 687 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::ReversibleContainer< C> > )> ::failed> boost_concept_check687; ~ReversibleContainer()
# 688 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 689 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(BidirectionalIterator< typename ReversibleContainer::const_iterator> )> ::failed> boost_concept_check691;
# 693 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(BidirectionalIterator< typename C::const_reverse_iterator> )> ::failed> boost_concept_check693;
# 695 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
this->const_constraints(c);
# 696 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 698 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: void const_constraints(const C &cc)
# 699 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 700 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
const_reverse_iterator i = ((cc.rbegin()));
# 701 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
i = (cc.rend());
# 702 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 703 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
C c;
# 704 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 706 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class C> struct Mutable_ReversibleContainer; template< class C> struct Mutable_ReversibleContainerConcept : public Mutable_ReversibleContainer< C> { }; template< class C> struct Mutable_ReversibleContainer : public Mutable_ForwardContainer< C> , public ReversibleContainer< C> {
# 710 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::reverse_iterator reverse_iterator;
# 712 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::Mutable_ReversibleContainer< C> > )> ::failed> boost_concept_check712; ~Mutable_ReversibleContainer()
# 713 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 714 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename Mutable_ForwardContainer< C> ::iterator iterator;
# 715 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Mutable_BidirectionalIterator< typename Mutable_ForwardContainer< C> ::iterator> )> ::failed> boost_concept_check715;
# 716 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Mutable_BidirectionalIterator< typename C::reverse_iterator> )> ::failed> boost_concept_check716;
# 718 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
reverse_iterator i = (((c).rbegin()));
# 719 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
i = ((c).rend());
# 720 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 722 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: C c;
# 723 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 725 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class C> struct RandomAccessContainer; template< class C> struct RandomAccessContainerConcept : public RandomAccessContainer< C> { }; template< class C> struct RandomAccessContainer : public ReversibleContainer< C> {
# 728 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::size_type size_type;
# 729 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::const_reference const_reference;
# 731 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::RandomAccessContainer< C> > )> ::failed> boost_concept_check731; ~RandomAccessContainer()
# 732 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 733 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(RandomAccessIterator< typename RandomAccessContainer::const_iterator> )> ::failed> boost_concept_check736;
# 738 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
this->const_constraints(c);
# 739 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 741 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: void const_constraints(const C &cc)
# 742 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 743 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
const_reference r = (cc[n]);
# 744 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(r);
# 745 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 747 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
C c;
# 748 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
size_type n;
# 749 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 751 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class C> struct Mutable_RandomAccessContainer; template< class C> struct Mutable_RandomAccessContainerConcept : public Mutable_RandomAccessContainer< C> { }; template< class C> struct Mutable_RandomAccessContainer : public Mutable_ReversibleContainer< C> , public RandomAccessContainer< C> {
# 756 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: typedef boost::Mutable_RandomAccessContainer< C> self;
# 758 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
public: typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::Mutable_RandomAccessContainer< C> > )> ::failed> boost_concept_check758; ~Mutable_RandomAccessContainer()
# 759 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 760 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Mutable_RandomAccessIterator< typename Mutable_RandomAccessContainer::iterator> )> ::failed> boost_concept_check760;
# 761 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(Mutable_RandomAccessIterator< typename Mutable_RandomAccessContainer::reverse_iterator> )> ::failed> boost_concept_check761;
# 763 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename Mutable_RandomAccessContainer::reference r = ((c)[i]);
# 764 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(r);
# 765 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 768 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: typename Mutable_ReversibleContainer< C> ::size_type i;
# 769 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
C c;
# 770 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 773 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class S> struct Sequence; template< class S> struct SequenceConcept : public Sequence< S> { }; template< class S> struct Sequence : public Mutable_ForwardContainer< S> , public DefaultConstructible< S> {
# 780 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::Sequence< S> > )> ::failed> boost_concept_check780; ~Sequence()
# 781 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 783 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
S c(n),
# 784 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
c2(n, t),
# 785 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
c3(first, last);
# 787 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(c.insert(p, t));
# 788 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(c.insert(p, n, t));
# 789 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(c.insert(p, first, last));
# 791 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(c.erase(p));
# 792 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(c.erase(p, q));
# 794 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename Sequence::reference r = ((c.front()));
# 796 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(c);
# 797 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(c2);
# 798 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(c3);
# 799 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(r);
# 800 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
this->const_constraints(c);
# 801 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 803 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: void const_constraints(const S &c) {
# 804 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename Sequence::const_reference r = ((c.front()));
# 805 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(r);
# 806 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 808 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename S::value_type t;
# 809 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename S::size_type n;
# 810 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename S::value_type *first, *last;
# 811 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename S::iterator p, q;
# 812 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 814 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class S> struct FrontInsertionSequence; template< class S> struct FrontInsertionSequenceConcept : public FrontInsertionSequence< S> { }; template< class S> struct FrontInsertionSequence : public Sequence< S> {
# 817 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::FrontInsertionSequence< S> > )> ::failed> boost_concept_check817; ~FrontInsertionSequence()
# 818 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 819 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
((c).push_front(t));
# 820 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
((c).pop_front());
# 821 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 823 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: S c;
# 824 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename S::value_type t;
# 825 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 827 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class S> struct BackInsertionSequence; template< class S> struct BackInsertionSequenceConcept : public BackInsertionSequence< S> { }; template< class S> struct BackInsertionSequence : public Sequence< S> {
# 830 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::BackInsertionSequence< S> > )> ::failed> boost_concept_check830; ~BackInsertionSequence()
# 831 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 832 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
((c).push_back(t));
# 833 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
((c).pop_back());
# 834 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename BackInsertionSequence::reference r = (((c).back()));
# 835 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(r);
# 836 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
this->const_constraints(c);
# 837 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 839 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: void const_constraints(const S &cc) {
# 841 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename BackInsertionSequence::const_reference r = ((cc.back()));
# 842 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(r);
# 843 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 844 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
S c;
# 845 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename S::value_type t;
# 846 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 848 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class C> struct AssociativeContainer; template< class C> struct AssociativeContainerConcept : public AssociativeContainer< C> { }; template< class C> struct AssociativeContainer : public ForwardContainer< C> , public DefaultConstructible< C> {
# 852 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::key_type key_type;
# 853 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::key_compare key_compare;
# 854 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::value_compare value_compare;
# 855 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::iterator iterator;
# 857 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::AssociativeContainer< C> > )> ::failed> boost_concept_check857; ~AssociativeContainer()
# 858 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 859 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(i) = ((c).find(k));
# 860 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(r) = ((c).equal_range(k));
# 861 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
((c).erase(k));
# 862 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
((c).erase(i));
# 863 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
((c).erase(((r).first), ((r).second)));
# 864 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
this->const_constraints(c);
# 865 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(BinaryPredicate< typename C::key_compare, typename C::key_type, typename C::key_type> )> ::failed> boost_concept_check865;
# 867 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename AssociativeContainer::value_type value_type_;
# 868 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(BinaryPredicate< typename C::value_compare, typename AssociativeContainer::value_type, typename AssociativeContainer::value_type> )> ::failed> boost_concept_check868;
# 869 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 872 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::const_iterator const_iterator;
# 874 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: void const_constraints(const C &cc)
# 875 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 876 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(ci) = (cc.find(k));
# 877 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(n) = (cc.count(k));
# 878 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(cr) = (cc.equal_range(k));
# 879 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 881 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
C c;
# 882 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
iterator i;
# 883 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
std::pair< typename C::iterator, typename C::iterator> r;
# 884 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
const_iterator ci;
# 885 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
std::pair< typename C::const_iterator, typename C::const_iterator> cr;
# 886 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename C::key_type k;
# 887 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename C::size_type n;
# 888 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 890 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class C> struct UniqueAssociativeContainer; template< class C> struct UniqueAssociativeContainerConcept : public UniqueAssociativeContainer< C> { }; template< class C> struct UniqueAssociativeContainer : public AssociativeContainer< C> {
# 893 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::UniqueAssociativeContainer< C> > )> ::failed> boost_concept_check893; ~UniqueAssociativeContainer()
# 894 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 895 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
C c(first, last);
# 897 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(pos_flag) = (c.insert(t));
# 898 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(c.insert(first, last));
# 900 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(c);
# 901 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 903 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: std::pair< typename C::iterator, bool> pos_flag;
# 904 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename C::value_type t;
# 905 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename C::value_type *first, *last;
# 906 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 908 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class C> struct MultipleAssociativeContainer; template< class C> struct MultipleAssociativeContainerConcept : public MultipleAssociativeContainer< C> { }; template< class C> struct MultipleAssociativeContainer : public AssociativeContainer< C> {
# 911 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::MultipleAssociativeContainer< C> > )> ::failed> boost_concept_check911; ~MultipleAssociativeContainer()
# 912 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 913 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
C c(first, last);
# 915 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(pos) = (c.insert(t));
# 916 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(c.insert(first, last));
# 918 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(c);
# 919 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(pos);
# 920 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 922 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: typename C::iterator pos;
# 923 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename C::value_type t;
# 924 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename C::value_type *first, *last;
# 925 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 927 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class C> struct SimpleAssociativeContainer; template< class C> struct SimpleAssociativeContainerConcept : public SimpleAssociativeContainer< C> { }; template< class C> struct SimpleAssociativeContainer : public AssociativeContainer< C> {
# 930 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::SimpleAssociativeContainer< C> > )> ::failed> boost_concept_check930; ~SimpleAssociativeContainer()
# 931 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 932 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::key_type key_type;
# 933 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::value_type value_type;
# 934 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
enum { mpl_assertion_in_line_934 = sizeof(mpl::assertion_failed< false> (mpl::assert_arg((void (*)(is_same< typename C::key_type, typename C::value_type> ))0, 1)))};
# 935 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 936 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 938 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class C> struct PairAssociativeContainer; template< class C> struct PairAssociativeContainerConcept : public PairAssociativeContainer< C> { }; template< class C> struct PairAssociativeContainer : public AssociativeContainer< C> {
# 941 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::PairAssociativeContainer< C> > )> ::failed> boost_concept_check941; ~PairAssociativeContainer()
# 942 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 943 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::key_type key_type;
# 944 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::value_type value_type;
# 945 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::mapped_type mapped_type;
# 946 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef std::pair< const typename C::key_type, typename C::mapped_type> required_value_type;
# 947 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
enum { mpl_assertion_in_line_947 = sizeof(mpl::assertion_failed< false> (mpl::assert_arg((void (*)(is_same< typename C::value_type, std::pair< const typename C::key_type, typename C::mapped_type> > ))0, 1)))};
# 948 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 949 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 951 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
template< class C> struct SortedAssociativeContainer; template< class C> struct SortedAssociativeContainerConcept : public SortedAssociativeContainer< C> { }; template< class C> struct SortedAssociativeContainer : public AssociativeContainer< C> , public ReversibleContainer< C> {
# 955 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef concepts::detail::instantiate< &concepts::requirement_< void (*)(concepts::usage_requirements< boost::SortedAssociativeContainer< C> > )> ::failed> boost_concept_check955; ~SortedAssociativeContainer()
# 956 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 958 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
C c(kc),
# 959 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
c2(first, last),
# 960 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
c3(first, last, kc);
# 962 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(p) = (c.upper_bound(k));
# 963 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(p) = (c.lower_bound(k));
# 964 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(r) = (c.equal_range(k));
# 966 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(c.insert(p, t));
# 968 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(c);
# 969 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(c2);
# 970 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
ignore_unused_variable_warning(c3);
# 971 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
this->const_constraints(c);
# 972 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 974 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
void const_constraints(const C &c)
# 975 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
{
# 976 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(kc) = (c.key_comp());
# 977 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(vc) = (c.value_comp());
# 979 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(cp) = (c.upper_bound(k));
# 980 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(cp) = (c.lower_bound(k));
# 981 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
(cr) = (c.equal_range(k));
# 982 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 985 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
private: typename C::key_compare kc;
# 986 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename C::value_compare vc;
# 987 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename C::value_type t;
# 988 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename C::key_type k;
# 989 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::iterator iterator;
# 990 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef typename C::const_iterator const_iterator;
# 992 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typedef boost::SortedAssociativeContainer< C> self;
# 993 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
iterator p;
# 994 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
const_iterator cp;
# 995 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
std::pair< typename C::iterator, typename C::iterator> r;
# 996 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
std::pair< typename C::const_iterator, typename C::const_iterator> cr;
# 997 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
typename C::value_type *first, *last;
# 998 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
};
# 1002 "/Users/jopasserat/programming/boost_1_44_0/boost/concept_check.hpp"
}
# 14 "../../core/SeedStatus.hxx"
template< template< class > class Algo>
# 15 "../../core/SeedStatus.hxx"
class SeedStatus {
# 18 "../../core/SeedStatus.hxx"
};
# 14 "../../core/ParameterizedStatus.hxx"
template< template< class > class Algo>
# 15 "../../core/ParameterizedStatus.hxx"
class ParameterizedStatus {
# 18 "../../core/ParameterizedStatus.hxx"
};
# 19 "../../core/RNGAlgorithm.hxx"
template< class
# 20 "../../core/RNGAlgorithm.hxx"
T,
# 21 "../../core/RNGAlgorithm.hxx"
template< class > class Algo>
# 23 "../../core/RNGAlgorithm.hxx"
class RNGAlgorithm {
# 26 "../../core/RNGAlgorithm.hxx"
Algo< T> al_;
# 27 "../../core/RNGAlgorithm.hxx"
T value_;
# 28 "../../core/RNGAlgorithm.hxx"
SeedStatus< Algo> ss_;
# 29 "../../core/RNGAlgorithm.hxx"
ParameterizedStatus< Algo> ps_;
# 33 "../../core/RNGAlgorithm.hxx"
template< class U> void same_type(const U &, const U &);
# 40 "../../core/RNGAlgorithm.hxx"
public: typedef boost::concepts::detail::instantiate< &boost::concepts::requirement_< void (*)(boost::concepts::usage_requirements< ::RNGAlgorithm< T, Algo> > )> ::failed> boost_concept_check40; ~RNGAlgorithm() {
# 41 "../../core/RNGAlgorithm.hxx"
((al_).init());
# 42 "../../core/RNGAlgorithm.hxx"
(value_) = ((al_).next(1));
# 43 "../../core/RNGAlgorithm.hxx"
same_type(ss_, ((al_).ss_));
# 44 "../../core/RNGAlgorithm.hxx"
same_type(ps_, ((al_).ps_));
# 45 "../../core/RNGAlgorithm.hxx"
}
# 47 "../../core/RNGAlgorithm.hxx"
};
# 16 "../../core/RNG.hxx"
template< class
# 17 "../../core/RNG.hxx"
T,
# 18 "../../core/RNG.hxx"
template< class > class Algo>
# 20 "../../core/RNG.hxx"
class RNG : public Algo< T> {
# 25 "../../core/RNG.hxx"
public: typedef boost::concepts::detail::instantiate< &boost::concepts::requirement_< void (*)(RNGAlgorithm< T, Algo> )> ::failed> boost_concept_check25;
# 27 "../../core/RNG.hxx"
};
# 76 "/usr/include/assert.h" 3
extern "C" void __assert_rtn(const char *, const char *, int, const char *) __attribute__((__noreturn__));
# 77 "/usr/include/assert.h" 3
extern "C" void __eprintf(const char *, const char *, unsigned, const char *) __attribute__((__noreturn__));
# 54 "./mtgp32-fast.h"
extern "C" { typedef
# 43 "./mtgp32-fast.h"
struct MTGP32_PARAMS_FAST_T {
# 44 "./mtgp32-fast.h"
int mexp;
# 45 "./mtgp32-fast.h"
int pos;
# 46 "./mtgp32-fast.h"
int sh1;
# 47 "./mtgp32-fast.h"
int sh2;
# 48 "./mtgp32-fast.h"
uint32_t tbl[16];
# 49 "./mtgp32-fast.h"
uint32_t tmp_tbl[16];
# 50 "./mtgp32-fast.h"
uint32_t flt_tmp_tbl[16];
# 52 "./mtgp32-fast.h"
uint32_t mask;
# 53 "./mtgp32-fast.h"
unsigned char poly_sha1[21];
# 54 "./mtgp32-fast.h"
} mtgp32_params_fast_t; }
# 77 "./mtgp32-fast.h"
extern "C" { typedef
# 71 "./mtgp32-fast.h"
struct MTGP32_STATUS_FAST_T {
# 72 "./mtgp32-fast.h"
int idx;
# 73 "./mtgp32-fast.h"
int size;
# 74 "./mtgp32-fast.h"
int large_size;
# 75 "./mtgp32-fast.h"
int large_mask;
# 76 "./mtgp32-fast.h"
uint32_t array[0];
# 77 "./mtgp32-fast.h"
} mtgp32_status_fast_t; }
# 86 "./mtgp32-fast.h"
extern "C" { typedef
# 83 "./mtgp32-fast.h"
struct MTGP32_FAST_T {
# 84 "./mtgp32-fast.h"
mtgp32_params_fast_t params;
# 85 "./mtgp32-fast.h"
mtgp32_status_fast_t *status;
# 86 "./mtgp32-fast.h"
} mtgp32_fast_t; }
# 92 "./mtgp32-fast.h"
extern "C" { extern mtgp32_params_fast_t mtgp32_params_fast_11213[128]; }
# 97 "./mtgp32-fast.h"
extern "C" { extern mtgp32_params_fast_t mtgp32_params_fast_23209[128]; }
# 102 "./mtgp32-fast.h"
extern "C" { extern mtgp32_params_fast_t mtgp32_params_fast_44497[128]; }
# 104 "./mtgp32-fast.h"
extern "C" int mtgp32_init(mtgp32_fast_t *, const mtgp32_params_fast_t *, uint32_t);
# 106 "./mtgp32-fast.h"
extern "C" void mtgp32_init_state(uint32_t [], const mtgp32_params_fast_t *, uint32_t);
# 108 "./mtgp32-fast.h"
extern "C" int mtgp32_init_by_array(mtgp32_fast_t *, const mtgp32_params_fast_t *, uint32_t *, int);
# 111 "./mtgp32-fast.h"
extern "C" int mtgp32_init_by_str(mtgp32_fast_t *, const mtgp32_params_fast_t *, char *);
# 114 "./mtgp32-fast.h"
extern "C" void mtgp32_free(mtgp32_fast_t *);
# 115 "./mtgp32-fast.h"
extern "C" void mtgp32_print_idstring(const mtgp32_fast_t *, FILE *);
# 117 "./mtgp32-fast.h"
extern "C" { static inline void mtgp32_do_recursion(uint32_t *, uint32_t, uint32_t, uint32_t, int, int, uint32_t, uint32_t [16]); }
# 121 "./mtgp32-fast.h"
extern "C" { static inline void mtgp32_next_state(mtgp32_fast_t *); }
# 122 "./mtgp32-fast.h"
extern "C" { static inline uint32_t mtgp32_genrand_uint32(mtgp32_fast_t *); }
# 123 "./mtgp32-fast.h"
extern "C" { static inline float mtgp32_genrand_close1_open2(mtgp32_fast_t *); }
# 124 "./mtgp32-fast.h"
extern "C" { static inline float mtgp32_genrand_close_open(mtgp32_fast_t *); }
# 125 "./mtgp32-fast.h"
extern "C" { static inline float mtgp32_genrand_open_close(mtgp32_fast_t *); }
# 126 "./mtgp32-fast.h"
extern "C" { static inline float mtgp32_genrand_open_open(mtgp32_fast_t *); }
# 145 "./mtgp32-fast.h"
extern "C" { static inline void mtgp32_do_recursion(uint32_t *r, uint32_t x1, uint32_t
# 146 "./mtgp32-fast.h"
x2, uint32_t y, int
# 147 "./mtgp32-fast.h"
sh1, int sh2, uint32_t
# 148 "./mtgp32-fast.h"
mask, uint32_t tbl[16]) {
# 149 "./mtgp32-fast.h"
uint32_t x;
# 151 "./mtgp32-fast.h"
x = ((x1 & mask) ^ x2);
# 152 "./mtgp32-fast.h"
x ^= (x << sh1);
# 153 "./mtgp32-fast.h"
y = (x ^ (y >> sh2));
# 154 "./mtgp32-fast.h"
(*r) = (y ^ (tbl[y & (15)]));
# 155 "./mtgp32-fast.h"
} }
# 161 "./mtgp32-fast.h"
extern "C" { static inline void mtgp32_next_state(mtgp32_fast_t *mtgp32) {
# 162 "./mtgp32-fast.h"
uint32_t *array = ((mtgp32->status)->array);
# 163 "./mtgp32-fast.h"
int idx;
# 164 "./mtgp32-fast.h"
int pos = ((mtgp32->params).pos);
# 165 "./mtgp32-fast.h"
int large_size = ((mtgp32->status)->large_size);
# 166 "./mtgp32-fast.h"
uint32_t large_mask = ((mtgp32->status)->large_mask);
# 167 "./mtgp32-fast.h"
int size = ((mtgp32->status)->size);
# 169 "./mtgp32-fast.h"
((mtgp32->status)->idx) = ((((mtgp32->status)->idx) + 1) & large_mask);
# 170 "./mtgp32-fast.h"
idx = ((mtgp32->status)->idx);
# 171 "./mtgp32-fast.h"
mtgp32_do_recursion(&(array[idx]), array[((idx - size) + large_size) & large_mask], array[(((idx - size) + large_size) + 1) & large_mask], array[(((idx + pos) - size) + large_size) & large_mask], (mtgp32->params).sh1, (mtgp32->params).sh2, (mtgp32->params).mask, (mtgp32->params).tbl);
# 179 "./mtgp32-fast.h"
} }
# 188 "./mtgp32-fast.h"
extern "C" { static inline uint32_t mtgp32_temper(const uint32_t tmp_tbl[16], uint32_t
# 189 "./mtgp32-fast.h"
r, uint32_t t) {
# 190 "./mtgp32-fast.h"
t ^= (t >> 16);
# 191 "./mtgp32-fast.h"
t ^= (t >> 8);
# 192 "./mtgp32-fast.h"
r ^= (tmp_tbl[t & (15)]);
# 193 "./mtgp32-fast.h"
return r;
# 194 "./mtgp32-fast.h"
} }
# 203 "./mtgp32-fast.h"
extern "C" { static inline float mtgp32_temper_float(const uint32_t flt_tmp_tbl[16], uint32_t
# 204 "./mtgp32-fast.h"
r, uint32_t t) {
# 205 "./mtgp32-fast.h"
union {
# 206 "./mtgp32-fast.h"
uint32_t u;
# 207 "./mtgp32-fast.h"
float f;
# 208 "./mtgp32-fast.h"
} x;
# 209 "./mtgp32-fast.h"
t ^= (t >> 16);
# 210 "./mtgp32-fast.h"
t ^= (t >> 8);
# 211 "./mtgp32-fast.h"
r = (r >> 9);
# 212 "./mtgp32-fast.h"
(x.u) = (r ^ (flt_tmp_tbl[t & (15)]));
# 213 "./mtgp32-fast.h"
return x.f;
# 214 "./mtgp32-fast.h"
} }
# 224 "./mtgp32-fast.h"
extern "C" { static inline float mtgp32_temper_float_open(const uint32_t flt_tmp_tbl[16], uint32_t
# 225 "./mtgp32-fast.h"
r, uint32_t t) {
# 226 "./mtgp32-fast.h"
union {
# 227 "./mtgp32-fast.h"
uint32_t u;
# 228 "./mtgp32-fast.h"
float f;
# 229 "./mtgp32-fast.h"
} x;
# 230 "./mtgp32-fast.h"
t ^= (t >> 16);
# 231 "./mtgp32-fast.h"
t ^= (t >> 8);
# 232 "./mtgp32-fast.h"
r = (r >> 9);
# 233 "./mtgp32-fast.h"
(x.u) = ((r ^ (flt_tmp_tbl[t & (15)])) | (1));
# 234 "./mtgp32-fast.h"
return x.f;
# 235 "./mtgp32-fast.h"
} }
# 248 "./mtgp32-fast.h"
extern "C" { static inline uint32_t mtgp32_genrand_uint32(mtgp32_fast_t *mtgp32) {
# 249 "./mtgp32-fast.h"
int idx;
# 250 "./mtgp32-fast.h"
uint32_t *tmp_tbl = ((mtgp32->params).tmp_tbl);
# 251 "./mtgp32-fast.h"
uint32_t *array = ((mtgp32->status)->array);
# 252 "./mtgp32-fast.h"
int pos = ((mtgp32->params).pos);
# 253 "./mtgp32-fast.h"
int large_size = ((mtgp32->status)->large_size);
# 254 "./mtgp32-fast.h"
int size = ((mtgp32->status)->size);
# 255 "./mtgp32-fast.h"
uint32_t large_mask = ((mtgp32->status)->large_mask);
# 257 "./mtgp32-fast.h"
mtgp32_next_state(mtgp32);
# 258 "./mtgp32-fast.h"
idx = ((mtgp32->status)->idx);
# 259 "./mtgp32-fast.h"
return mtgp32_temper(tmp_tbl, array[idx], array[((((idx + pos) - 1) - size) + large_size) & large_mask]);
# 263 "./mtgp32-fast.h"
} }
# 274 "./mtgp32-fast.h"
extern "C" { static inline float mtgp32_genrand_close1_open2(mtgp32_fast_t *mtgp32) {
# 275 "./mtgp32-fast.h"
int idx;
# 276 "./mtgp32-fast.h"
uint32_t *flt_tmp_tbl = ((mtgp32->params).flt_tmp_tbl);
# 277 "./mtgp32-fast.h"
uint32_t *array = ((mtgp32->status)->array);
# 278 "./mtgp32-fast.h"
int pos = ((mtgp32->params).pos);
# 279 "./mtgp32-fast.h"
int large_size = ((mtgp32->status)->large_size);
# 280 "./mtgp32-fast.h"
int size = ((mtgp32->status)->size);
# 281 "./mtgp32-fast.h"
uint32_t large_mask = ((mtgp32->status)->large_mask);
# 283 "./mtgp32-fast.h"
mtgp32_next_state(mtgp32);
# 284 "./mtgp32-fast.h"
idx = ((mtgp32->status)->idx);
# 285 "./mtgp32-fast.h"
return mtgp32_temper_float(flt_tmp_tbl, array[idx], array[((((idx + pos) - 1) - size) + large_size) & large_mask]);
# 289 "./mtgp32-fast.h"
} }
# 300 "./mtgp32-fast.h"
extern "C" { static inline float mtgp32_genrand_close_open(mtgp32_fast_t *mtgp32) {
# 301 "./mtgp32-fast.h"
return mtgp32_genrand_close1_open2(mtgp32) - (1.0F);
# 302 "./mtgp32-fast.h"
} }
# 313 "./mtgp32-fast.h"
extern "C" { static inline float mtgp32_genrand_open_close(mtgp32_fast_t *mtgp32) {
# 314 "./mtgp32-fast.h"
return (2.0F) - mtgp32_genrand_close1_open2(mtgp32);
# 315 "./mtgp32-fast.h"
} }
# 326 "./mtgp32-fast.h"
extern "C" { static inline float mtgp32_genrand_open_open(mtgp32_fast_t *mtgp32) {
# 327 "./mtgp32-fast.h"
float r;
# 328 "./mtgp32-fast.h"
int idx;
# 329 "./mtgp32-fast.h"
uint32_t *flt_tmp_tbl = ((mtgp32->params).flt_tmp_tbl);
# 330 "./mtgp32-fast.h"
uint32_t *array = ((mtgp32->status)->array);
# 331 "./mtgp32-fast.h"
int pos = ((mtgp32->params).pos);
# 332 "./mtgp32-fast.h"
int large_size = ((mtgp32->status)->large_size);
# 333 "./mtgp32-fast.h"
int size = ((mtgp32->status)->size);
# 334 "./mtgp32-fast.h"
uint32_t large_mask = ((mtgp32->status)->large_mask);
# 335 "./mtgp32-fast.h"
mtgp32_next_state(mtgp32);
# 336 "./mtgp32-fast.h"
idx = ((mtgp32->status)->idx);
# 337 "./mtgp32-fast.h"
r = mtgp32_temper_float_open(flt_tmp_tbl, array[idx], array[((((idx + pos) - 1) - size) + large_size) & large_mask]);
# 341 "./mtgp32-fast.h"
return r - (1.0F);
# 342 "./mtgp32-fast.h"
} }
# 37 "./mtgp-cuda-common.h"
extern mtgp32_params_fast_t mtgp32dc_params_fast_11213[];
# 45 "./mtgp-cuda-common.h"
struct mtgp32_kernel_status_t {
# 46 "./mtgp-cuda-common.h"
uint32_t status[351];
# 47 "./mtgp-cuda-common.h"
};
# 54 "./mtgp-cuda-common.h"
void make_constant_param(const mtgp32_params_fast_t [], int);
# 63 "./mtgp-cuda-common.h"
void make_texture(const mtgp32_params_fast_t [], uint32_t *[3], int);
# 68 "./mtgp-cuda-common.h"
int get_suitable_block_num(int, int, int);
# 76 "./mtgp-cuda-common.h"
void make_kernel_data(mtgp32_kernel_status_t *, mtgp32_params_fast_t [], int);
# 60 "/Developer/GPU Computing/C/common/inc/cutil.h"
enum CUTBoolean {
# 62 "/Developer/GPU Computing/C/common/inc/cutil.h"
CUTFalse,
# 63 "/Developer/GPU Computing/C/common/inc/cutil.h"
CUTTrue
# 64 "/Developer/GPU Computing/C/common/inc/cutil.h"
};
# 72 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" void cutFree(void *);
# 90 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" void cutCheckBankAccess(unsigned, unsigned, unsigned, unsigned, unsigned, unsigned, const char *, const int, const char *, const int);
# 103 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" char *cutFindFilePath(const char *, const char *);
# 118 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutReadFilef(const char *, float **, unsigned *, bool = false);
# 134 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutReadFiled(const char *, double **, unsigned *, bool = false);
# 150 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutReadFilei(const char *, int **, unsigned *, bool = false);
# 165 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutReadFileui(const char *, unsigned **, unsigned *, bool = false);
# 181 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutReadFileb(const char *, char **, unsigned *, bool = false);
# 197 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutReadFileub(const char *, unsigned char **, unsigned *, bool = false);
# 211 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutWriteFilef(const char *, const float *, unsigned, const float, bool = false);
# 225 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutWriteFiled(const char *, const float *, unsigned, const double, bool = false);
# 237 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutWriteFilei(const char *, const int *, unsigned, bool = false);
# 249 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutWriteFileui(const char *, const unsigned *, unsigned, bool = false);
# 261 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutWriteFileb(const char *, const char *, unsigned, bool = false);
# 273 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutWriteFileub(const char *, const unsigned char *, unsigned, bool = false);
# 289 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutLoadPGMub(const char *, unsigned char **, unsigned *, unsigned *);
# 302 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutLoadPPMub(const char *, unsigned char **, unsigned *, unsigned *);
# 316 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutLoadPPM4ub(const char *, unsigned char **, unsigned *, unsigned *);
# 332 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutLoadPGMi(const char *, unsigned **, unsigned *, unsigned *);
# 348 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutLoadPGMs(const char *, unsigned short **, unsigned *, unsigned *);
# 363 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutLoadPGMf(const char *, float **, unsigned *, unsigned *);
# 375 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutSavePGMub(const char *, unsigned char *, unsigned, unsigned);
# 387 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutSavePPMub(const char *, unsigned char *, unsigned, unsigned);
# 400 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutSavePPM4ub(const char *, unsigned char *, unsigned, unsigned);
# 412 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutSavePGMi(const char *, unsigned *, unsigned, unsigned);
# 424 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutSavePGMs(const char *, unsigned short *, unsigned, unsigned);
# 436 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutSavePGMf(const char *, float *, unsigned, unsigned);
# 457 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutCheckCmdLineFlag(const int, const char **, const char *);
# 471 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutGetCmdLineArgumenti(const int, const char **, const char *, int *);
# 485 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutGetCmdLineArgumentf(const int, const char **, const char *, float *);
# 499 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutGetCmdLineArgumentstr(const int, const char **, const char *, char **);
# 514 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutGetCmdLineArgumentListstr(const int, const char **, const char *, char **, unsigned *);
# 528 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutCheckCondition(int, const char *, const int);
# 540 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutComparef(const float *, const float *, const unsigned);
# 553 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutComparei(const int *, const int *, const unsigned);
# 567 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutCompareuit(const unsigned *, const unsigned *, const unsigned, const float, const float);
# 580 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutCompareub(const unsigned char *, const unsigned char *, const unsigned);
# 595 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutCompareubt(const unsigned char *, const unsigned char *, const unsigned, const float, const float);
# 609 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutCompareube(const unsigned char *, const unsigned char *, const unsigned, const float);
# 623 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutComparefe(const float *, const float *, const unsigned, const float);
# 638 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutComparefet(const float *, const float *, const unsigned, const float, const float);
# 653 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutCompareL2fe(const float *, const float *, const unsigned, const float);
# 668 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutComparePPM(const char *, const char *, const float, const float, bool = false);
# 681 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutCreateTimer(unsigned *);
# 690 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutDeleteTimer(unsigned);
# 698 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutStartTimer(const unsigned);
# 706 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutStopTimer(const unsigned);
# 714 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" CUTBoolean cutResetTimer(const unsigned);
# 723 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" float cutGetTimerValue(const unsigned);
# 734 "/Developer/GPU Computing/C/common/inc/cutil.h"
extern "C" float cutGetAverageTimerValue(const unsigned);
# 27 "./MTGP.hxx"
template< class T> class MTGP;
# 33 "./MTGP.hxx"
template<> class SeedStatus< MTGP> { };
# 37 "./MTGP.hxx"
template<> class ParameterizedStatus< MTGP> { };
# 39 "./MTGP.hxx"
typedef SeedStatus< MTGP> SeedStatusMTGP;
# 40 "./MTGP.hxx"
typedef ParameterizedStatus< MTGP> ParameterizedStatusMTGP;
# 43 "./MTGP.hxx"
template< class T>
# 44 "./MTGP.hxx"
class MTGP {
# 48 "./MTGP.hxx"
SeedStatusMTGP ss_;
# 49 "./MTGP.hxx"
ParameterizedStatusMTGP ps_;
# 50 "./MTGP.hxx"
int toto;
# 56 "./MTGP.hxx"
public: void init() {
# 59 "./MTGP.hxx"
}
# 63 "./MTGP.hxx"
T next(int);
# 65 "./MTGP.hxx"
T foo();
# 69 "./MTGP.hxx"
template< class U, template< class > class Algo> friend class RNGAlgorithm;
# 75 "./MTGP.hxx"
};
# 78 "./MTGP.hxx"
template< class T> T
# 79 "./MTGP.hxx"
MTGP< T> ::next(int tid) {
# 80 "./MTGP.hxx"
(toto) = ((tid * sqrtf((1.0))) * (2));
# 81 "./MTGP.hxx"
return tid;
# 82 "./MTGP.hxx"
}
# 84 "./MTGP.hxx"
template< class T> T
# 85 "./MTGP.hxx"
MTGP< T> ::foo() {int volatile ___ = 1;
# 87 "./MTGP.hxx"
exit(___);}
# 74 "/usr/include/sys/errno.h" 3
extern "C" int *__error();
# 26 "mtgp32-cuda-hostCalled.h"
__attribute__((unused)) inline void status_read(uint32_t status[(256 * 3)], const mtgp32_kernel_status_t *
# 27 "mtgp32-cuda-hostCalled.h"
d_status, int
# 28 "mtgp32-cuda-hostCalled.h"
bid, int
# 29 "mtgp32-cuda-hostCalled.h"
tid) {int volatile ___ = 1;
# 36 "mtgp32-cuda-hostCalled.h"
exit(___);}
# 47 "mtgp32-cuda-hostCalled.h"
__attribute__((unused)) inline void status_write(mtgp32_kernel_status_t *d_status, const uint32_t
# 48 "mtgp32-cuda-hostCalled.h"
status[(256 * 3)], int
# 49 "mtgp32-cuda-hostCalled.h"
bid, int
# 50 "mtgp32-cuda-hostCalled.h"
tid) {int volatile ___ = 1;
# 58 "mtgp32-cuda-hostCalled.h"
exit(___);}
# 19 "mtgp32-cuda-cuterandAPI.h"
static uint32_t param_tbl[200][16];
# 20 "mtgp32-cuda-cuterandAPI.h"
static uint32_t temper_tbl[200][16];
# 21 "mtgp32-cuda-cuterandAPI.h"
static uint32_t single_temper_tbl[200][16];
# 22 "mtgp32-cuda-cuterandAPI.h"
static uint32_t pos_tbl[200];
# 23 "mtgp32-cuda-cuterandAPI.h"
static uint32_t sh1_tbl[200];
# 24 "mtgp32-cuda-cuterandAPI.h"
static uint32_t sh2_tbl[200];
# 31 "mtgp32-cuda-cuterandAPI.h"
static uint32_t mask;
# 37 "mtgp32-cuda-cuterandAPI.h"
__attribute__((unused)) static uint32_t status[(256 * 3)];
# 43 "mtgp32-cuda-cuterandAPI.h"
__attribute__((unused)) static uint32_t step[1024];
# 52 "mtgp32-cuda-cuterandAPI.h"
void make_constant(const mtgp32_params_fast_t [], int);
# 64 "mtgp32-cuda-cuterandAPI.h"
__attribute__((unused)) inline uint32_t para_rec(uint32_t X1, uint32_t X2, uint32_t Y, int bid) {int volatile ___ = 1;
# 72 "mtgp32-cuda-cuterandAPI.h"
exit(___);}
# 82 "mtgp32-cuda-cuterandAPI.h"
__attribute__((unused)) inline uint32_t temper(uint32_t V, uint32_t T, int bid) {int volatile ___ = 1;
# 89 "mtgp32-cuda-cuterandAPI.h"
exit(___);}
# 102 "mtgp32-cuda-cuterandAPI.h"
__attribute__((unused)) inline void mtgp32_init_shared_memory(mtgp32_kernel_status_t *d_status) {int volatile ___ = 1;
# 123 "mtgp32-cuda-cuterandAPI.h"
exit(___);}
# 134 "mtgp32-cuda-cuterandAPI.h"
__attribute__((unused)) inline uint32_t mtgp32_uint32_device() {int volatile ___ = 1;
# 193 "mtgp32-cuda-cuterandAPI.h"
exit(___);}
# 30 "main.cu"
typedef RNG< int, MTGP> MyRNG;
# 33 "main.cu"
void testShoveRand(uint32_t *ddata, MyRNG *rngTab) ;
# 45 "main.cu"
void testMTGP(uint32_t *ddata, mtgp32_kernel_status_t *dstatus) ;
# 61 "main.cu"
int main(int argc, char *argv[])
# 62 "main.cu"
{
# 64 "main.cu"
int num_data = 10000000;
# 65 "main.cu"
int block_num;
# 66 "main.cu"
int num_unit;
# 67 "main.cu"
int r;
# 68 "main.cu"
mtgp32_kernel_status_t *d_status;
# 69 "main.cu"
uint32_t *d_texture[3];
# 70 "main.cu"
uint32_t *d_data;
# 71 "main.cu"
unsigned timer = (0);
# 72 "main.cu"
uint32_t *h_data;
# 73 "main.cu"
cudaError_t e;
# 74 "main.cu"
float gputime;
# 76 "main.cu"
if (argc >= 2) {
# 77 "main.cu"
(*__error()) = 0;
# 78 "main.cu"
block_num = (strtol(argv[1], __null, 10));
# 79 "main.cu"
if (*__error()) {
# 80 "main.cu"
printf("%s number_of_block number_of_output\n", argv[0]);
# 81 "main.cu"
return 1;
# 82 "main.cu"
}
# 83 "main.cu"
if ((block_num < 1) || (block_num > 200)) {
# 84 "main.cu"
printf("%s block_num should be between 1 and %d\n", argv[0], 200);
# 86 "main.cu"
return 1;
# 87 "main.cu"
}
# 88 "main.cu"
(*__error()) = 0;
# 89 "main.cu"
num_data = (strtol(argv[2], __null, 10));
# 90 "main.cu"
if (*__error()) {
# 91 "main.cu"
printf("%s number_of_block number_of_output\n", argv[0]);
# 92 "main.cu"
return 1;
# 93 "main.cu"
}
# 94 "main.cu"
argc -= 2;
# 95 "main.cu"
argv += 2;
# 96 "main.cu"
} else {
# 97 "main.cu"
{ int deviceCount; { cudaError err = cudaGetDeviceCount(&deviceCount); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 97, cudaGetErrorString(err)); exit(1); } } ; if (deviceCount == 0) { fprintf(__stderrp, "cutil error: no devices supporting CUDA.\n"); exit(1); } int dev = 0; cutGetCmdLineArgumenti(argc, (const char **)argv, "device", &dev); if (dev < 0) { dev = 0; } if (dev > (deviceCount - 1)) { dev = (deviceCount - 1); } cudaDeviceProp deviceProp; { cudaError err = cudaGetDeviceProperties(&deviceProp, dev); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 97, cudaGetErrorString(err)); exit(1); } } ; if ((deviceProp.major) < 1) { fprintf(__stderrp, "cutil error: device does not support CUDA.\n"); exit(1); } if ((cutCheckCmdLineFlag(argc, (const char **)argv, "quiet")) == (CUTFalse)) { fprintf(__stderrp, "Using device %d: %s\n", dev, deviceProp.name); } { cudaError err = cudaSetDevice(dev); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 97, cudaGetErrorString(err)); exit(1); } } ; ; } ;
# 98 "main.cu"
printf("%s number_of_block number_of_output\n", argv[0]);
# 99 "main.cu"
block_num = get_suitable_block_num(sizeof(uint32_t), 256, 256 * 3);
# 102 "main.cu"
if (block_num <= 0) {
# 103 "main.cu"
printf("can\'t calculate suitable number of blocks.\n");
# 104 "main.cu"
return 1;
# 105 "main.cu"
}
# 106 "main.cu"
printf("the suitable number of blocks for device 0 will be multiple of %d\n", block_num);
# 108 "main.cu"
return 1;
# 109 "main.cu"
}
# 110 "main.cu"
{ int deviceCount; { cudaError err = cudaGetDeviceCount(&deviceCount); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 110, cudaGetErrorString(err)); exit(1); } } ; if (deviceCount == 0) { fprintf(__stderrp, "cutil error: no devices supporting CUDA.\n"); exit(1); } int dev = 0; cutGetCmdLineArgumenti(argc, (const char **)argv, "device", &dev); if (dev < 0) { dev = 0; } if (dev > (deviceCount - 1)) { dev = (deviceCount - 1); } cudaDeviceProp deviceProp; { cudaError err = cudaGetDeviceProperties(&deviceProp, dev); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 110, cudaGetErrorString(err)); exit(1); } } ; if ((deviceProp.major) < 1) { fprintf(__stderrp, "cutil error: device does not support CUDA.\n"); exit(1); } if ((cutCheckCmdLineFlag(argc, (const char **)argv, "quiet")) == (CUTFalse)) { fprintf(__stderrp, "Using device %d: %s\n", dev, deviceProp.name); } { cudaError err = cudaSetDevice(dev); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 110, cudaGetErrorString(err)); exit(1); } } ; ; } ;
# 112 "main.cu"
num_unit = ((256 * 3) * block_num);
# 113 "main.cu"
{ cudaError err = cudaMalloc((void **)(&d_status), sizeof(mtgp32_kernel_status_t) * block_num); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 114, cudaGetErrorString(err)); exit(1); } } ; ;
# 115 "main.cu"
{ cudaError err = cudaMalloc((void **)(&((d_texture)[0])), (sizeof(uint32_t) * block_num) * (16)); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 116, cudaGetErrorString(err)); exit(1); } } ; ;
# 117 "main.cu"
{ cudaError err = cudaMalloc((void **)(&((d_texture)[1])), (sizeof(uint32_t) * block_num) * (16)); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 118, cudaGetErrorString(err)); exit(1); } } ; ;
# 119 "main.cu"
{ cudaError err = cudaMalloc((void **)(&((d_texture)[2])), (sizeof(uint32_t) * block_num) * (16)); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 120, cudaGetErrorString(err)); exit(1); } } ; ;
# 121 "main.cu"
r = (num_data % num_unit);
# 122 "main.cu"
if (r != 0) {
# 123 "main.cu"
num_data = ((num_data + num_unit) - r);
# 124 "main.cu"
}
# 125 "main.cu"
make_constant(mtgp32dc_params_fast_11213, block_num);
# 127 "main.cu"
make_kernel_data(d_status, mtgp32dc_params_fast_11213, block_num);
# 130 "main.cu"
printf("size of a status: %lu\n", sizeof(mtgp32_kernel_status_t));
# 131 "main.cu"
printf("arguments passed: \nsize d_status %lu\n block_num %d\n num_data %d\n", sizeof(mtgp32_kernel_status_t) * block_num, block_num, num_data);
# 134 "main.cu"
printf("generating 32-bit unsigned random numbers.\n");
# 135 "main.cu"
{ cudaError err = cudaMalloc((void **)(&d_data), sizeof(uint32_t) * (256 * 3)); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 135, cudaGetErrorString(err)); exit(1); } } ; ;
# 136 "main.cu"
if ((CUTTrue) != (cutCreateTimer(&timer))) { fprintf(__stderrp, "Cut error in file \'%s\' in line %i.\n", "main.cu", 136); exit(1); } ;
# 137 "main.cu"
h_data = ((uint32_t *)malloc(sizeof(uint32_t) * (256 * 3)));
# 138 "main.cu"
if (h_data == (__null)) {
# 139 "main.cu"
printf("failure in allocating host memory for output data.\n");
# 140 "main.cu"
exit(1);
# 141 "main.cu"
}
# 142 "main.cu"
if ((CUTTrue) != (cutStartTimer(timer))) { fprintf(__stderrp, "Cut error in file \'%s\' in line %i.\n", "main.cu", 142); exit(1); } ;
# 143 "main.cu"
if ((cudaGetLastError()) != (cudaSuccess)) {
# 144 "main.cu"
printf("error has been occured before kernel call.\n");
# 145 "main.cu"
exit(1);
# 146 "main.cu"
}
# 148 "main.cu"
MyRNG rng_host;
# 149 "main.cu"
MyRNG *rng_device;
# 151 "main.cu"
rng_host.init();
# 153 "main.cu"
{ cudaError err = cudaMalloc((void **)(&rng_device), sizeof(MyRNG) * (256)); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 153, cudaGetErrorString(err)); exit(1); } } ; ;
# 156 "main.cu"
cudaConfigureCall(block_num, 256) ? ((void)0) : testShoveRand(d_data, rng_device);
# 164 "main.cu"
e = cudaGetLastError();
# 165 "main.cu"
if (e != (cudaSuccess)) {
# 166 "main.cu"
printf("failure in kernel call.\n%s\n", cudaGetErrorString(e));
# 167 "main.cu"
exit(1);
# 168 "main.cu"
}
# 169 "main.cu"
if ((CUTTrue) != (cutStopTimer(timer))) { fprintf(__stderrp, "Cut error in file \'%s\' in line %i.\n", "main.cu", 169); exit(1); } ;
# 170 "main.cu"
{ cudaError err = cudaMemcpy(h_data, d_data, sizeof(uint32_t) * (256 * 3), cudaMemcpyDeviceToHost); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 174, cudaGetErrorString(err)); exit(1); } } ; ;
# 175 "main.cu"
gputime = cutGetTimerValue(timer);
# 178 "main.cu"
for (int i = 0; i < (256 * 3); ++i) {
# 179 "main.cu"
printf("h_data[%d] = %u\n", i, h_data[i]);
# 180 "main.cu"
}
# 183 "main.cu"
printf("generated numbers: %d\n", 256 * block_num);
# 184 "main.cu"
printf("Processing time: %f (ms)\n", gputime);
# 185 "main.cu"
printf("Samples per second: %E \n", (256 * block_num) / (gputime * (0.001000000000000000021)));
# 186 "main.cu"
if ((CUTTrue) != (cutDeleteTimer(timer))) { fprintf(__stderrp, "Cut error in file \'%s\' in line %i.\n", "main.cu", 186); exit(1); } ;
# 188 "main.cu"
free(h_data);
# 189 "main.cu"
{ cudaError err = cudaFree(d_data); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 189, cudaGetErrorString(err)); exit(1); } } ; ;
# 196 "main.cu"
{ cudaError err = cudaFree(d_status); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 196, cudaGetErrorString(err)); exit(1); } } ; ;
# 197 "main.cu"
{ cudaError err = cudaFree((d_texture)[0]); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 197, cudaGetErrorString(err)); exit(1); } } ; ;
# 198 "main.cu"
{ cudaError err = cudaFree((d_texture)[1]); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 198, cudaGetErrorString(err)); exit(1); } } ; ;
# 199 "main.cu"
{ cudaError err = cudaFree((d_texture)[2]); if ((cudaSuccess) != err) { fprintf(__stderrp, "Cuda error in file \'%s\' in line %i : %s.\n", "main.cu", 199, cudaGetErrorString(err)); exit(1); } } ; ; return 0;
# 203 "main.cu"
}
# 1 "/tmp/tmpxft_00000637_00000000-1_main.cudafe1.stub.c"
# 1 "/tmp/tmpxft_00000637_00000000-1_main.cudafe1.stub.c" 1
# 1 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 1
# 91 "/usr/local/cuda/bin/../include/crt/host_runtime.h"
extern "C" {

extern void** __cudaRegisterFatBinary(
  void *fatCubin
);

extern void __cudaUnregisterFatBinary(
  void **fatCubinHandle
);

extern void __cudaRegisterVar(
        void **fatCubinHandle,
        char *hostVar,
        char *deviceAddress,
  const char *deviceName,
        int ext,
        int size,
        int constant,
        int global
);

extern void __cudaRegisterTexture(
        void **fatCubinHandle,
  const struct textureReference *hostVar,
  const void **deviceAddress,
  const char *deviceName,
        int dim,
        int norm,
        int ext
);

extern void __cudaRegisterSurface(
        void **fatCubinHandle,
  const struct surfaceReference *hostVar,
  const void **deviceAddress,
  const char *deviceName,
        int dim,
        int ext
);

extern void __cudaRegisterFunction(
        void **fatCubinHandle,
  const char *hostFun,
        char *deviceFun,
  const char *deviceName,
        int thread_limit,
        uint3 *tid,
        uint3 *bid,
        dim3 *bDim,
        dim3 *gDim,
        int *wSize
);



extern int atexit(void(*)(void)) throw();







}

static void **__cudaFatCubinHandle;

static void __cudaUnregisterBinaryUtil(void)
{
  __cudaUnregisterFatBinary(__cudaFatCubinHandle);
}

# 1 "/usr/local/cuda/bin/../include/common_functions.h" 1
# 90 "/usr/local/cuda/bin/../include/common_functions.h"
# 1 "/usr/local/cuda/bin/../include/math_functions.h" 1 3
# 948 "/usr/local/cuda/bin/../include/math_functions.h" 3
# 1 "/usr/local/cuda/bin/../include/math_constants.h" 1 3
# 949 "/usr/local/cuda/bin/../include/math_functions.h" 2 3
# 2973 "/usr/local/cuda/bin/../include/math_functions.h" 3
# 1 "/usr/local/cuda/bin/../include/crt/func_macro.h" 1 3
# 2974 "/usr/local/cuda/bin/../include/math_functions.h" 2 3
# 2983 "/usr/local/cuda/bin/../include/math_functions.h" 3
extern __attribute__((__weak_import__, __weak__)) double exp10(double a); double exp10(double a)
{
  return pow(10.0, a);
}

extern __attribute__((__weak_import__, __weak__)) float exp10f(float a); float exp10f(float a)
{
    return (float)exp10((double)a);
}

extern __attribute__((__weak_import__, __weak__)) void sincos(double a, double *sptr, double *cptr); void sincos(double a, double *sptr, double *cptr)
{
  *sptr = sin(a);
  *cptr = cos(a);
}

extern __attribute__((__weak_import__, __weak__)) void sincosf(float a, float *sptr, float *cptr); void sincosf(float a, float *sptr, float *cptr)
{
  double s, c;

  sincos((double)a, &s, &c);
  *sptr = (float)s;
  *cptr = (float)c;
}

extern __attribute__((__weak_import__, __weak__)) int __isnan(double a); int __isnan(double a)
{
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  cvt.d = a;

  return cvt.l << 1 > 0xffe0000000000000ull;
}

extern __attribute__((__weak_import__, __weak__)) int __isinf(double a); int __isinf(double a)
{
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  cvt.d = a;

  return cvt.l << 1 == 0xffe0000000000000ull;
}
# 4683 "/usr/local/cuda/bin/../include/math_functions.h" 3
extern __attribute__((__weak_import__, __weak__)) double rsqrt(double a); double rsqrt(double a)
{
  return 1.0 / sqrt(a);
}

extern __attribute__((__weak_import__, __weak__)) double rcbrt(double a); double rcbrt(double a)
{
  double s, t;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return 1.0 / a;
  }
  s = fabs(a);
  t = exp2(-3.3333333333333333e-1 * log2(s));
  t = ((t*t) * (-s*t) + 1.0) * (3.3333333333333333e-1*t) + t;

  if (__signbitd(a))



  {
    t = -t;
  }
  return t;
}

extern __attribute__((__weak_import__, __weak__)) double sinpi(double a); double sinpi(double a)
{
  int n;

  if (__isnan(a)) {
    return a + a;
  }
  if (a == 0.0 || __isinf(a)) {
    return sin (a);
  }
  if (a == floor(a)) {
    return ((a / 1.0e308) / 1.0e308) / 1.0e308;
  }
  a = remquo (a, 0.5, &n);
  a = a * 3.1415926535897931e+0;
  if (n & 1) {
    a = cos (a);
  } else {
    a = sin (a);
  }
  if (n & 2) {
    a = -a;
  }
  return a;
}

extern __attribute__((__weak_import__, __weak__)) double erfinv(double a); double erfinv(double a)
{
  double p, q, t, fa;
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  fa = fabs(a);
  if (fa >= 1.0) {
    cvt.l = 0xfff8000000000000ull;
    t = cvt.d;
    if (fa == 1.0) {
      t = a * exp(1000.0);
    }
  } else if (fa >= 0.9375) {




    t = log1p(-fa);
    t = 1.0 / sqrt(-t);
    p = 2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q = t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
    if (a < 0.0) t = -t;
  } else if (fa >= 0.75) {




    t = a * a - .87890625;
    p = .21489185007307062000e+0;
    p = p * t - .64200071507209448655e+1;
    p = p * t + .29631331505876308123e+2;
    p = p * t - .47644367129787181803e+2;
    p = p * t + .34810057749357500873e+2;
    p = p * t - .12954198980646771502e+2;
    p = p * t + .25349389220714893917e+1;
    p = p * t - .24758242362823355486e+0;
    p = p * t + .94897362808681080020e-2;
    q = t - .12831383833953226499e+2;
    q = q * t + .41409991778428888716e+2;
    q = q * t - .53715373448862143349e+2;
    q = q * t + .33880176779595142685e+2;
    q = q * t - .11315360624238054876e+2;
    q = q * t + .20369295047216351160e+1;
    q = q * t - .18611650627372178511e+0;
    q = q * t + .67544512778850945940e-2;
    p = p / q;
    t = a * p;
  } else {




    t = a * a - .5625;
    p = - .23886240104308755900e+2;
    p = p * t + .45560204272689128170e+3;
    p = p * t - .22977467176607144887e+4;
    p = p * t + .46631433533434331287e+4;
    p = p * t - .43799652308386926161e+4;
    p = p * t + .19007153590528134753e+4;
    p = p * t - .30786872642313695280e+3;
    q = t - .83288327901936570000e+2;
    q = q * t + .92741319160935318800e+3;
    q = q * t - .35088976383877264098e+4;
    q = q * t + .59039348134843665626e+4;
    q = q * t - .48481635430048872102e+4;
    q = q * t + .18997769186453057810e+4;
    q = q * t - .28386514725366621129e+3;
    p = p / q;
    t = a * p;
  }
  return t;
}

extern __attribute__((__weak_import__, __weak__)) double erfcinv(double a); double erfcinv(double a)
{
  double t;
  volatile union {
    double d;
    unsigned long long int l;
  } cvt;

  if (__isnan(a)) {
    return a + a;
  }
  if (a <= 0.0) {
    cvt.l = 0xfff8000000000000ull;
    t = cvt.d;
    if (a == 0.0) {
        t = (1.0 - a) * exp(1000.0);
    }
  }
  else if (a >= 0.0625) {
    t = erfinv (1.0 - a);
  }
  else if (a >= 1e-100) {




    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p = 2.7834010353747001060e-3;
    p = p * t + 8.6030097526280260580e-1;
    p = p * t + 2.1371214997265515515e+0;
    p = p * t + 3.1598519601132090206e+0;
    p = p * t + 3.5780402569085996758e+0;
    p = p * t + 1.5335297523989890804e+0;
    p = p * t + 3.4839207139657522572e-1;
    p = p * t + 5.3644861147153648366e-2;
    p = p * t + 4.3836709877126095665e-3;
    p = p * t + 1.3858518113496718808e-4;
    p = p * t + 1.1738352509991666680e-6;
    q = t + 2.2859981272422905412e+0;
    q = q * t + 4.3859045256449554654e+0;
    q = q * t + 4.6632960348736635331e+0;
    q = q * t + 3.9846608184671757296e+0;
    q = q * t + 1.6068377709719017609e+0;
    q = q * t + 3.5609087305900265560e-1;
    q = q * t + 5.3963550303200816744e-2;
    q = q * t + 4.3873424022706935023e-3;
    q = q * t + 1.3858762165532246059e-4;
    q = q * t + 1.1738313872397777529e-6;
    t = p / (q * t);
  }
  else {




    double p, q;
    t = log(a);
    t = 1.0 / sqrt(-t);
    p = 6.9952990607058154858e-1;
    p = p * t + 1.9507620287580568829e+0;
    p = p * t + 8.2810030904462690216e-1;
    p = p * t + 1.1279046353630280005e-1;
    p = p * t + 6.0537914739162189689e-3;
    p = p * t + 1.3714329569665128933e-4;
    p = p * t + 1.2964481560643197452e-6;
    p = p * t + 4.6156006321345332510e-9;
    p = p * t + 4.5344689563209398450e-12;
    q = t + 1.5771922386662040546e+0;
    q = q * t + 2.1238242087454993542e+0;
    q = q * t + 8.4001814918178042919e-1;
    q = q * t + 1.1311889334355782065e-1;
    q = q * t + 6.0574830550097140404e-3;
    q = q * t + 1.3715891988350205065e-4;
    q = q * t + 1.2964671850944981713e-6;
    q = q * t + 4.6156017600933592558e-9;
    q = q * t + 4.5344687377088206783e-12;
    t = p / (q * t);
  }
  return t;
}

extern __attribute__((__weak_import__, __weak__)) float rsqrtf(float a); float rsqrtf(float a)
{
  return (float)rsqrt((double)a);
}

extern __attribute__((__weak_import__, __weak__)) float rcbrtf(float a); float rcbrtf(float a)
{
  return (float)rcbrt((double)a);
}

extern __attribute__((__weak_import__, __weak__)) float sinpif(float a); float sinpif(float a)
{
  return (float)sinpi((double)a);
}

extern __attribute__((__weak_import__, __weak__)) float erfinvf(float a); float erfinvf(float a)
{
  return (float)erfinv((double)a);
}

extern __attribute__((__weak_import__, __weak__)) float erfcinvf(float a); float erfcinvf(float a)
{
  return (float)erfcinv((double)a);
}







extern __attribute__((__weak_import__, __weak__)) int min(int a, int b); int min(int a, int b)
{
  return a < b ? a : b;
}

extern __attribute__((__weak_import__, __weak__)) unsigned int umin(unsigned int a, unsigned int b); unsigned int umin(unsigned int a, unsigned int b)
{
  return a < b ? a : b;
}

extern __attribute__((__weak_import__, __weak__)) long long int llmin(long long int a, long long int b); long long int llmin(long long int a, long long int b)
{
  return a < b ? a : b;
}

extern __attribute__((__weak_import__, __weak__)) unsigned long long int ullmin(unsigned long long int a, unsigned long long int b); unsigned long long int ullmin(unsigned long long int a, unsigned long long int b)
{
  return a < b ? a : b;
}

extern __attribute__((__weak_import__, __weak__)) int max(int a, int b); int max(int a, int b)
{
  return a > b ? a : b;
}

extern __attribute__((__weak_import__, __weak__)) unsigned int umax(unsigned int a, unsigned int b); unsigned int umax(unsigned int a, unsigned int b)
{
  return a > b ? a : b;
}

extern __attribute__((__weak_import__, __weak__)) long long int llmax(long long int a, long long int b); long long int llmax(long long int a, long long int b)
{
  return a > b ? a : b;
}

extern __attribute__((__weak_import__, __weak__)) unsigned long long int ullmax(unsigned long long int a, unsigned long long int b); unsigned long long int ullmax(unsigned long long int a, unsigned long long int b)
{
  return a > b ? a : b;
}
# 5000 "/usr/local/cuda/bin/../include/math_functions.h" 3
# 1 "/usr/local/cuda/bin/../include/math_functions_dbl_ptx1.h" 1 3
# 5001 "/usr/local/cuda/bin/../include/math_functions.h" 2 3
# 91 "/usr/local/cuda/bin/../include/common_functions.h" 2
# 164 "/usr/local/cuda/bin/../include/crt/host_runtime.h" 2



#pragma options align=natural
# 2 "/tmp/tmpxft_00000637_00000000-1_main.cudafe1.stub.c" 2
# 1 "/tmp/tmpxft_00000637_00000000-3_main.fatbin.c" 1
# 1 "/usr/local/cuda/bin/../include/__cudaFatFormat.h" 1
# 83 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
extern "C" {
# 97 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
typedef struct {
    char* gpuProfileName;
    char* cubin;
} __cudaFatCubinEntry;
# 113 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
typedef struct {
    char* gpuProfileName;
    char* ptx;
} __cudaFatPtxEntry;
# 125 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
typedef struct __cudaFatDebugEntryRec {
    char* gpuProfileName;
    char* debug;
    struct __cudaFatDebugEntryRec *next;
    unsigned int size;
} __cudaFatDebugEntry;

typedef struct __cudaFatElfEntryRec {
    char* gpuProfileName;
    char* elf;
    struct __cudaFatElfEntryRec *next;
    unsigned int size;
} __cudaFatElfEntry;

typedef enum {
      __cudaFatDontSearchFlag = (1 << 0),
      __cudaFatDontCacheFlag = (1 << 1),
      __cudaFatSassDebugFlag = (1 << 2)
} __cudaFatCudaBinaryFlag;
# 152 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
typedef struct {
    char* name;
} __cudaFatSymbol;
# 166 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
typedef struct __cudaFatCudaBinaryRec {
    unsigned long magic;
    unsigned long version;
    unsigned long gpuInfoVersion;
    char* key;
    char* ident;
    char* usageMode;
    __cudaFatPtxEntry *ptx;
    __cudaFatCubinEntry *cubin;
    __cudaFatDebugEntry *debug;
    void* debugInfo;
    unsigned int flags;
    __cudaFatSymbol *exported;
    __cudaFatSymbol *imported;
    struct __cudaFatCudaBinaryRec *dependends;
    unsigned int characteristic;
    __cudaFatElfEntry *elf;
} __cudaFatCudaBinary;
# 203 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
    typedef enum {
        __cudaFatAvoidPTX,
        __cudaFatPreferBestCode,
        __cudaFatForcePTX
    } __cudaFatCompilationPolicy;
# 227 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
void fatGetCubinForGpuWithPolicy( __cudaFatCudaBinary *binary, __cudaFatCompilationPolicy policy, char* gpuName, char* *cubin, char* *dbgInfoFile );
# 240 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
unsigned char fatCheckJitForGpuWithPolicy( __cudaFatCudaBinary *binary, __cudaFatCompilationPolicy policy, char* gpuName, char* *ptx );
# 250 "/usr/local/cuda/bin/../include/__cudaFatFormat.h"
void fatFreeCubin( char* cubin, char* dbgInfoFile );





void __cudaFatFreePTX( char* ptx );


}
# 2 "/tmp/tmpxft_00000637_00000000-3_main.fatbin.c" 2


extern "C" {


static const unsigned long long __deviceText_$compute_11$[] = {
0x6f69737265762e09ull,0x2e090a342e31206eull,0x7320746567726174ull,0x616d202c31315f6dull,
0x6f745f3436665f70ull,0x2f2f090a3233665full,0x656c69706d6f6320ull,0x2f20687469772064ull,
0x61636f6c2f727375ull,0x622f616475632f6cull,0x706f2f2e2e2f6e69ull,0x62696c2f34366e65ull,
0x2f2f090a65622f2full,0x636e65706f766e20ull,0x756220322e332063ull,0x32206e6f20746c69ull,
0x312d30312d303130ull,0x2d2d2f2f090a0a39ull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,
0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,
0x2d2d2d2d2d2d2d2dull,0x6f43202f2f090a2dull,0x20676e696c69706dull,0x706d742f706d742full,
0x303030305f746678ull,0x3030305f37333630ull,0x5f372d3030303030ull,0x7070632e6e69616dull,
0x61762f2820692e33ull,0x7265646c6f662f72ull,0x3541652f41652f73ull,0x5750456873346354ull,
0x5a742d68336c4244ull,0x49542b2b2b556456ull,0x632f2d706d542d2full,0x52545a2e23494263ull,
0x2f2f090a2936307aull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,
0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,
0x2f2f090a0a2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,
0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,
0x202f2f090a2d2d2dull,0x3a736e6f6974704full,0x2d2d2d2d2f2f090aull,0x2d2d2d2d2d2d2d2dull,
0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,
0x2d2d2d2d2d2d2d2dull,0x0a2d2d2d2d2d2d2dull,0x72615420202f2f09ull,0x2c7874703a746567ull,
0x5f6d733a41534920ull,0x69646e45202c3131ull,0x6c7474696c3a6e61ull,0x746e696f50202c65ull,
0x3a657a6953207265ull,0x20202f2f090a3233ull,0x74704f2809334f2dull,0x6f6974617a696d69ull,
0x296c6576656c206eull,0x672d20202f2f090aull,0x6775626544280930ull,0x0a296c6576656c20ull,
0x326d2d20202f2f09ull,0x74726f7065522809ull,0x726f736976646120ull,0x2f2f090a29736569ull,
0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,
0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x2d2d2d2d2d2d2d2dull,0x662e090a0a2d2d2dull,
0x3c22093109656c69ull,0x2d646e616d6d6f63ull,0x090a223e656e696cull,0x093209656c69662eull,
0x6d742f706d742f22ull,0x3030305f74667870ull,0x30305f3733363030ull,0x362d303030303030ull,
0x75632e6e69616d5full,0x70672e3265666164ull,0x6c69662e090a2275ull,0x67746d2209330965ull,
0x632d616475632d70ull,0x22682e6e6f6d6d6full,0x09656c69662e090aull,0x2e5047544d220934ull,
0x662e090a22787868ull,0x2e22093509656c69ull,0x726f632f2e2e2f2eull,0x78682e474e522f65ull,
0x6c69662e090a2278ull,0x73752f2209360965ull,0x63672f62696c2f72ull,0x612d363836692f63ull,
0x7261642d656c7070ull,0x2e342f30316e6977ull,0x6c636e692f312e32ull,0x646474732f656475ull,
0x2e090a22682e6665ull,0x22093709656c6966ull,0x636f6c2f7273752full,0x2f616475632f6c61ull,
0x692f2e2e2f6e6962ull,0x632f6564756c636eull,0x63697665642f7472ull,0x6d69746e75725f65ull,
0x662e090a22682e65ull,0x2f22093809656c69ull,0x61636f6c2f727375ull,0x622f616475632f6cull,
0x6e692f2e2e2f6e69ull,0x6f682f6564756c63ull,0x6e696665645f7473ull,0x2e090a22682e7365ull,
0x22093909656c6966ull,0x636f6c2f7273752full,0x2f616475632f6c61ull,0x692f2e2e2f6e6962ull,
0x622f6564756c636eull,0x745f6e69746c6975ull,0x0a22682e73657079ull,0x3109656c69662e09ull,
0x2f7273752f220930ull,0x75632f6c61636f6cull,0x2e2f6e69622f6164ull,0x64756c636e692f2eull,
0x6563697665642f65ull,0x682e73657079745full,0x656c69662e090a22ull,0x73752f2209313109ull,
0x2f6c61636f6c2f72ull,0x6e69622f61647563ull,0x6c636e692f2e2e2full,0x766972642f656475ull,
0x73657079745f7265ull,0x69662e090a22682eull,0x2f2209323109656cull,0x61636f6c2f727375ull,
0x622f616475632f6cull,0x6e692f2e2e2f6e69ull,0x75732f6564756c63ull,0x79745f6563616672ull,
0x090a22682e736570ull,0x333109656c69662eull,0x6c2f7273752f2209ull,0x6475632f6c61636full,
0x2e2e2f6e69622f61ull,0x6564756c636e692full,0x657275747865742full,0x682e73657079745full,
0x656c69662e090a22ull,0x73752f2209343109ull,0x2f6c61636f6c2f72ull,0x6e69622f61647563ull,
0x6c636e692f2e2e2full,0x746365762f656475ull,0x73657079745f726full,0x69662e090a22682eull,
0x2f2209353109656cull,0x61636f6c2f727375ull,0x622f616475632f6cull,0x6e692f2e2e2f6e69ull,
0x65642f6564756c63ull,0x75616c5f65636976ull,0x617261705f68636eull,0x682e73726574656dull,
0x656c69662e090a22ull,0x73752f2209363109ull,0x2f6c61636f6c2f72ull,0x6e69622f61647563ull,
0x6c636e692f2e2e2full,0x2f7472632f656475ull,0x5f656761726f7473ull,0x22682e7373616c63ull,
0x09656c69662e090aull,0x7273752f22093731ull,0x6564756c636e692full,0x745f2f363833692full,
0x0a22682e73657079ull,0x3109656c69662e09ull,0x2f7273752f220938ull,0x2f6564756c636e69ull,
0x0a22682e656d6974ull,0x3109656c69662e09ull,0x2f7273752f220939ull,0x2f6363672f62696cull,
0x7070612d36383669ull,0x69777261642d656cull,0x2e322e342f30316eull,0x64756c636e692f31ull,
0x746e696474732f65ull,0x69662e090a22682eull,0x6d2209303209656cull,0x0a2275632e6e6961ull,
0x3209656c69662e09ull,0x337067746d220931ull,0x632d616475632d32ull,0x41646e6172657475ull,
0x2e090a22682e4950ull,0x09323209656c6966ull,0x6f6c2f7273752f22ull,0x616475632f6c6163ull,
0x2f2e2e2f6e69622full,0x2f6564756c636e69ull,0x665f6e6f6d6d6f63ull,0x736e6f6974636e75ull,
0x69662e090a22682eull,0x2f2209333209656cull,0x61636f6c2f727375ull,0x622f616475632f6cull,
0x6e692f2e2e2f6e69ull,0x616d2f6564756c63ull,0x74636e75665f6874ull,0x0a22682e736e6f69ull,
0x3209656c69662e09ull,0x2f7273752f220934ull,0x75632f6c61636f6cull,0x2e2f6e69622f6164ull,
0x64756c636e692f2eull,0x635f6874616d2f65ull,0x73746e6174736e6full,0x69662e090a22682eull,
0x2f2209353209656cull,0x61636f6c2f727375ull,0x622f616475632f6cull,0x6e692f2e2e2f6e69ull,
0x65642f6564756c63ull,0x6e75665f65636976ull,0x682e736e6f697463ull,0x656c69662e090a22ull,
0x73752f2209363209ull,0x2f6c61636f6c2f72ull,0x6e69622f61647563ull,0x6c636e692f2e2e2full,
0x315f6d732f656475ull,0x63696d6f74615f31ull,0x6f6974636e75665full,0x2e090a22682e736eull,
0x09373209656c6966ull,0x6f6c2f7273752f22ull,0x616475632f6c6163ull,0x2f2e2e2f6e69622full,
0x2f6564756c636e69ull,0x74615f32315f6d73ull,0x6e75665f63696d6full,0x682e736e6f697463ull,
0x656c69662e090a22ull,0x73752f2209383209ull,0x2f6c61636f6c2f72ull,0x6e69622f61647563ull,
0x6c636e692f2e2e2full,0x315f6d732f656475ull,0x656c62756f645f33ull,0x6f6974636e75665full,
0x2e090a22682e736eull,0x09393209656c6966ull,0x6f6c2f7273752f22ull,0x616475632f6c6163ull,
0x2f2e2e2f6e69622full,0x2f6564756c636e69ull,0x74615f30325f6d73ull,0x6e75665f63696d6full,
0x682e736e6f697463ull,0x656c69662e090a22ull,0x73752f2209303309ull,0x2f6c61636f6c2f72ull,
0x6e69622f61647563ull,0x6c636e692f2e2e2full,0x325f6d732f656475ull,0x6e6972746e695f30ull,
0x0a22682e73636973ull,0x3309656c69662e09ull,0x2f7273752f220931ull,0x75632f6c61636f6cull,
0x2e2f6e69622f6164ull,0x64756c636e692f2eull,0x6361667275732f65ull,0x6974636e75665f65ull,
0x090a22682e736e6full,0x323309656c69662eull,0x6c2f7273752f2209ull,0x6475632f6c61636full,
0x2e2e2f6e69622f61ull,0x6564756c636e692full,0x657275747865742full,0x665f68637465665full,
0x736e6f6974636e75ull,0x69662e090a22682eull,0x2f2209333309656cull,0x61636f6c2f727375ull,
0x622f616475632f6cull,0x6e692f2e2e2f6e69ull,0x616d2f6564756c63ull,0x74636e75665f6874ull,
0x6c62645f736e6f69ull,0x22682e317874705full,0x746e652e090a0a0aull,0x7433315a5f207972ull,
0x65766f6853747365ull,0x33506a50646e6152ull,0x544d346949474e52ull,0x09090a2820455047ull,
0x2e206d617261702eull,0x75635f5f20323375ull,0x5f5f6d7261706164ull,0x537473657433315aull,
0x646e615265766f68ull,0x49474e5233506a50ull,0x5f455047544d3469ull,0x090a2c6174616464ull,
0x206d617261702e09ull,0x635f5f203233752eull,0x5f6d726170616475ull,0x7473657433315a5full,
0x6e615265766f6853ull,0x474e5233506a5064ull,0x455047544d346949ull,0x29626154676e725full,
0x65722e090a7b090aull,0x25203233752e2067ull,0x090a3b3e31313c72ull,0x33662e206765722eull,
0x3b3e343c66252032ull,0x3209636f6c2e090aull,0x240a300933330930ull,0x6e6967656257444cull,
0x73657433315a5f5full,0x615265766f685374ull,0x4e5233506a50646eull,0x5047544d34694947ull,
0x636f6c2e090a3a45ull,0x0a30093038093409ull,0x3233752e74766309ull,0x722509203631752eull,
0x2e64697425202c31ull,0x2e747663090a3b78ull,0x732e3233662e6e72ull,0x2c31662509203233ull,
0x6d090a3b31722520ull,0x2e6f6c2e34326c75ull,0x3272250920323375ull,0x38202c317225202cull,
0x61702e646c090a3bull,0x203233752e6d6172ull,0x5f5b202c33722509ull,0x726170616475635full,
0x657433315a5f5f6dull,0x5265766f68537473ull,0x5233506a50646e61ull,0x47544d346949474eull,
0x6154676e725f4550ull,0x646461090a3b5d62ull,0x722509203233752eull,0x202c337225202c34ull,
0x6461090a3b327225ull,0x2509203233662e64ull,0x2c316625202c3266ull,0x63090a3b31662520ull,
0x732e697a722e7476ull,0x09203233662e3233ull,0x326625202c357225ull,0x6c672e7473090a3bull,
0x3233732e6c61626full,0x342b3472255b0920ull,0x0a3b357225202c5dull,0x093409636f6c2e09ull,
0x646c090a30093638ull,0x2e6c61626f6c672eull,0x3672250920323373ull,0x342b3472255b202cull,
0x636f6c2e090a3b5dull,0x3009383309303209ull,0x7261702e646c090aull,0x09203233752e6d61ull,
0x5f5f5b202c377225ull,0x6d72617061647563ull,0x73657433315a5f5full,0x615265766f685374ull,
0x4e5233506a50646eull,0x5047544d34694947ull,0x5d61746164645f45ull,0x34326c756d090a3bull,
0x203233752e6f6c2eull,0x7225202c38722509ull,0x61090a3b34202c31ull,0x09203233752e6464ull,
0x377225202c397225ull,0x090a3b387225202cull,0x61626f6c672e7473ull,0x5b09203233752e6cull,
0x202c5d302b397225ull,0x6c2e090a3b367225ull,0x323409303209636full,0x74697865090a3009ull,
0x6e6557444c240a3bull,0x657433315a5f5f64ull,0x5265766f68537473ull,0x5233506a50646e61ull,
0x47544d346949474eull,0x2f207d090a3a4550ull,0x657433315a5f202full,0x5265766f68537473ull,
0x5233506a50646e61ull,0x47544d346949474eull,0x6e6f632e090a4550ull,0x67696c612e207473ull,
0x2038622e2034206eull,0x62745f6d61726170ull,0x5d30303832315b6cull,0x736e6f632e090a3bull,
0x6e67696c612e2074ull,0x742038622e203420ull,0x62745f7265706d65ull,0x5d30303832315b6cull,
0x736e6f632e090a3bull,0x6e67696c612e2074ull,0x702038622e203420ull,0x385b6c62745f736full,
0x632e090a3b5d3030ull,0x6c612e2074736e6full,0x622e2034206e6769ull,0x62745f3168732038ull,
0x0a3b5d3030385b6cull,0x2074736e6f632e09ull,0x34206e67696c612eull,0x3268732038622e20ull,
0x3030385b6c62745full,0x6168732e090a3b5dull,0x696c612e20646572ull,0x38622e2034206e67ull,
0x5b73757461747320ull,0x090a3b5d32373033ull,0x206465726168732eull,0x34206e67696c612eull,
0x6574732038622e20ull,0x3b5d363930345b70ull,0x74736e6f632e090aull,0x616d203233752e20ull,
0x33382d203d206b73ull,0x0a0a3b3830363838ull,0x207972746e652e09ull,0x4d74736574385a5full,
0x3232506a50504754ull,0x6b5f32337067746dull,0x74735f6c656e7265ull,0x2820745f73757461ull,
0x617261702e09090aull,0x5f203233752e206dull,0x726170616475635full,0x736574385a5f5f6dull,
0x506a505047544d74ull,0x32337067746d3232ull,0x5f6c656e72656b5full,0x745f737574617473ull,
0x0a2c61746164645full,0x6d617261702e0909ull,0x5f5f203233752e20ull,0x6d72617061647563ull,
0x74736574385a5f5full,0x32506a505047544dull,0x5f32337067746d32ull,0x735f6c656e72656bull,
0x5f745f7375746174ull,0x2973757461747364ull,0x65722e090a7b090aull,0x25203631752e2067ull,
0x090a3b3e333c6872ull,0x33752e206765722eull,0x3639313c72252032ull,0x6765722e090a3b3eull,
0x2520646572702e20ull,0x090a3b3e30313c70ull,0x09303209636f6c2eull,0x444c240a30093534ull,
0x5f5f6e6967656257ull,0x544d74736574385aull,0x6d3232506a505047ull,0x656b5f3233706774ull,
0x6174735f6c656e72ull,0x090a3a745f737574ull,0x203233752e766f6dull,0x7473202c31722509ull,
0x2e090a3b73757461ull,0x3409303209636f6cull,0x747663090a300936ull,0x3631752e3233732eull,
0x25202c3272250920ull,0x090a3b782e646974ull,0x6f6c2e34326c756dull,0x722509203233752eull,
0x202c327225202c33ull,0x2e766f6d090a3b34ull,0x3472250920323375ull,0x0a3b70657473202cull,
0x3233752e64646109ull,0x25202c3572250920ull,0x3b347225202c3372ull,0x33752e766f6d090aull,
0x202c367225092032ull,0x732e7473090a3b30ull,0x33752e6465726168ull,0x2b3572255b092032ull,
0x3b367225202c5d30ull,0x33752e646461090aull,0x202c377225092032ull,0x317225202c337225ull,
0x752e766f6d090a3bull,0x2c38722509203233ull,0x2e7473090a3b3020ull,0x752e646572616873ull,
0x3772255b09203233ull,0x387225202c5d302bull,0x752e747663090a3bull,0x09203631752e3233ull,
0x746e25202c397225ull,0x6d090a3b782e6469ull,0x09203233752e766full,0x3b30202c30317225ull,
0x33752e646461090aull,0x2c31317225092032ull,0x7225202c32722520ull,0x2e6c756d090a3b39ull,
0x09203233752e6f6cull,0x7225202c32317225ull,0x090a3b34202c3131ull,0x203233752e646461ull,
0x25202c3331722509ull,0x32317225202c3172ull,0x68732e7473090a3bull,0x3233752e64657261ull,
0x2b333172255b0920ull,0x30317225202c5d30ull,0x752e766f6d090a3bull,0x3431722509203233ull,
0x756d090a3b30202cull,0x752e6f6c2e34326cull,0x3531722509203233ull,0x32202c397225202cull,
0x752e646461090a3bull,0x3631722509203233ull,0x25202c327225202cull,0x756d090a3b353172ull,
0x3233752e6f6c2e6cull,0x202c373172250920ull,0x3b34202c36317225ull,0x33752e646461090aull,
0x2c38317225092032ull,0x7225202c31722520ull,0x2e7473090a3b3731ull,0x752e646572616873ull,
0x3172255b09203233ull,0x7225202c5d302b38ull,0x747663090a3b3431ull,0x3631752e3233732eull,
0x202c393172250920ull,0x782e646961746325ull,0x752e747663090a3bull,0x09203233752e3631ull,
0x7225202c31687225ull,0x6c756d090a3b3931ull,0x31752e656469772eull,0x2c30327225092036ull,
0x31202c3168722520ull,0x646c090a3b343034ull,0x752e6d617261702eull,0x3132722509203233ull,
0x6475635f5f5b202cull,0x5a5f5f6d72617061ull,0x47544d7473657438ull,0x746d3232506a5050ull,
0x72656b5f32337067ull,0x746174735f6c656eull,0x7473645f745f7375ull,0x090a3b5d73757461ull,
0x203233752e646461ull,0x25202c3232722509ull,0x327225202c313272ull,0x2e646461090a3b30ull,
0x3272250920323375ull,0x202c337225202c33ull,0x6c090a3b32327225ull,0x6c61626f6c672e64ull,
0x722509203233752eull,0x3272255b202c3432ull,0x73090a3b5d302b33ull,0x6465726168732e74ull,
0x255b09203233752eull,0x5d383636312b3772ull,0x0a3b34327225202cull,0x3233752e766f6d09ull,
0x202c353272250920ull,0x746573090a3b3439ull,0x3233732e74672e70ull,0x25202c3170250920ull,
0x35327225202c3272ull,0x2031702540090a3bull,0x744c240920617262ull,0x3b323635325f315full,
0x6f6c672e646c090aull,0x203233752e6c6162ull,0x5b202c3632722509ull,0x3230312b33327225ull,
0x2e7473090a3b5d34ull,0x752e646572616873ull,0x3772255b09203233ull,0x202c5d323936322bull,
0x4c240a3b36327225ull,0x323635325f315f74ull,0x09636f6c2e090a3aull,0x0a30093734093032ull,
0x6e79732e72616209ull,0x2e090a3b30092063ull,0x3109313209636f6cull,0x756d090a30093733ull,
0x752e656469772e6cull,0x3732722509203631ull,0x202c31687225202cull,0x2e766f6d090a3b34ull,
0x3272250920323375ull,0x745f736f70202c38ull,0x646461090a3b6c62ull,0x722509203233752eull,
0x37327225202c3932ull,0x0a3b38327225202cull,0x736e6f632e646c09ull,0x2509203233732e74ull,
0x72255b202c303372ull,0x090a3b5d302b3932ull,0x09313209636f6c2eull,0x6c090a3009353431ull,
0x6465726168732e64ull,0x722509203233752eull,0x3572255b202c3133ull,0x6f6d090a3b5d302bull,
0x2509203233752e76ull,0x0a3b30202c323372ull,0x71652e7074657309ull,0x702509203233752eull,
0x2c31337225202c32ull,0x090a3b3233722520ull,0x6172622032702540ull,0x5f315f744c240920ull,
0x6f6d090a3b383532ull,0x2509203233752e76ull,0x0a3b31202c333372ull,0x726168732e646c09ull,
0x09203233752e6465ull,0x255b202c31337225ull,0x090a3b5d302b3572ull,0x2e71652e70746573ull,
0x3370250920323375ull,0x202c31337225202cull,0x40090a3b33337225ull,0x2061726220337025ull,
0x375f315f744c2409ull,0x766f6d090a3b3037ull,0x722509203233752eull,0x090a3b32202c3433ull,
0x65726168732e646cull,0x2509203233752e64ull,0x72255b202c313372ull,0x73090a3b5d302b35ull,
0x752e71652e707465ull,0x2c34702509203233ull,0x25202c3133722520ull,0x2540090a3b343372ull,
0x0920617262203470ull,0x30315f315f744c24ull,0x766f6d090a3b3632ull,0x722509203233732eull,
0x36337225202c3533ull,0x752e617262090a3bull,0x5f744c240920696eull,0x240a3b3431355f31ull,
0x3835325f315f744cull,0x09636f6c2e090a3aull,0x3009303531093132ull,0x6168732e646c090aull,
0x203233752e646572ull,0x5b202c3733722509ull,0x383636312b377225ull,0x732e646c090a3b5dull,
0x33752e6465726168ull,0x2c38337225092032ull,0x36312b3772255b20ull,0x646c090a3b5d3237ull,
0x752e74736e6f632eull,0x3933722509203233ull,0x5d6b73616d5b202cull,0x622e646e61090a3bull,
0x3034722509203233ull,0x202c39337225202cull,0x61090a3b37337225ull,0x09203233732e6464ull,
0x7225202c31347225ull,0x3b327225202c3033ull,0x33752e766f6d090aull,0x2c32347225092032ull,
0x6c62745f31687320ull,0x752e646461090a3bull,0x3334722509203233ull,0x202c37327225202cull,
0x6d090a3b32347225ull,0x09203233752e766full,0x6873202c34347225ull,0x090a3b6c62745f32ull,
0x203233752e646461ull,0x25202c3534722509ull,0x347225202c373272ull,0x2e726f78090a3b34ull,
0x3472250920323362ull,0x2c30347225202c36ull,0x090a3b3833722520ull,0x752e6f6c2e6c756dull,
0x3734722509203233ull,0x202c31347225202cull,0x632e646c090a3b34ull,0x3233732e74736e6full,
0x202c383472250920ull,0x5d302b333472255bull,0x6f632e646c090a3bull,0x203233732e74736eull,
0x5b202c3934722509ull,0x3b5d302b35347225ull,0x33752e646461090aull,0x2c30357225092032ull,
0x25202c3734722520ull,0x6c6873090a3b3172ull,0x722509203233622eull,0x36347225202c3135ull,
0x0a3b38347225202cull,0x726168732e646c09ull,0x09203233752e6465ull,0x255b202c32357225ull,
0x383636312b303572ull,0x2e726f78090a3b5dull,0x3572250920323362ull,0x2c36347225202c33ull,
0x090a3b3135722520ull,0x203233752e726873ull,0x25202c3435722509ull,0x347225202c323572ull,
0x2e726f78090a3b39ull,0x3572250920323362ull,0x2c33357225202c35ull,0x090a3b3435722520ull,
0x656469772e6c756dull,0x722509203631752eull,0x31687225202c3635ull,0x6d090a3b3631202cull,
0x09203233752e766full,0x6170202c37357225ull,0x3b6c62745f6d6172ull,0x33622e646e61090aull,
0x2c38357225092032ull,0x31202c3535722520ull,0x2e646461090a3b35ull,0x3572250920323375ull,
0x2c36357225202c39ull,0x090a3b3835722520ull,0x752e6f6c2e6c756dull,0x3036722509203233ull,
0x202c39357225202cull,0x2e646461090a3b34ull,0x3672250920323375ull,0x2c37357225202c31ull,
0x090a3b3036722520ull,0x74736e6f632e646cull,0x722509203233752eull,0x3672255b202c3236ull,
0x2e090a3b5d302b31ull,0x3109313209636f6cull,0x6f78090a30093435ull,0x2509203233622e72ull,
0x357225202c333672ull,0x3b32367225202c35ull,0x6168732e7473090aull,0x203233752e646572ull,
0x5d302b3772255b09ull,0x0a3b33367225202cull,0x313209636f6c2e09ull,0x090a300937353109ull,
0x65726168732e646cull,0x2509203233752e64ull,0x72255b202c343672ull,0x5d343636312b3035ull,
0x752e726873090a3bull,0x3536722509203233ull,0x202c34367225202cull,0x726f78090a3b3631ull,
0x722509203233622eull,0x35367225202c3636ull,0x0a3b34367225202cull,0x3233752e766f6d09ull,
0x202c373672250920ull,0x745f7265706d6574ull,0x726873090a3b6c62ull,0x722509203233752eull,
0x36367225202c3836ull,0x6f78090a3b38202cull,0x2509203233622e72ull,0x367225202c393672ull,
0x3b38367225202c36ull,0x33622e646e61090aull,0x2c30377225092032ull,0x31202c3936722520ull,
0x2e646461090a3b35ull,0x3772250920323375ull,0x2c36357225202c31ull,0x090a3b3037722520ull,
0x752e6f6c2e6c756dull,0x3237722509203233ull,0x202c31377225202cull,0x2e646461090a3b34ull,
0x3772250920323375ull,0x2c37367225202c33ull,0x090a3b3237722520ull,0x74736e6f632e646cull,
0x722509203233752eull,0x3772255b202c3437ull,0x78090a3b5d302b33ull,0x09203233622e726full,
0x7225202c35337225ull,0x33367225202c3437ull,0x09636f6c2e090a3bull,0x3009303631093132ull,
0x6e752e617262090aull,0x315f744c24092069ull,0x4c240a3b3431355full,0x3a3037375f315f74ull,
0x3209636f6c2e090aull,0x0a30093436310931ull,0x3233732e64646109ull,0x202c353772250920ull,
0x333736202c327225ull,0x732e766f6d090a3bull,0x3637722509203233ull,0x36313334312d202cull,
0x090a3b3536373535ull,0x203233732e766f6dull,0x30202c3737722509ull,0x2e70746573090a3bull,
0x09203233732e746cull,0x377225202c357025ull,0x3b37377225202c35ull,0x33732e736261090aull,
0x2c38377225092032ull,0x090a3b3537722520ull,0x752e69682e6c756dull,0x3937722509203233ull,
0x202c38377225202cull,0x73090a3b36377225ull,0x09203233732e7268ull,0x7225202c30387225ull,
0x090a3b39202c3937ull,0x6275732035702540ull,0x722509203233732eull,0x37377225202c3038ull,
0x0a3b30387225202cull,0x3233732e766f6d09ull,0x202c313872250920ull,0x6d090a3b30387225ull,
0x33732e6f6c2e6c75ull,0x2c32387225092032ull,0x37202c3138722520ull,0x627573090a3b3836ull,
0x722509203233732eull,0x35377225202c3338ull,0x0a3b32387225202cull,0x2e6f6c2e6c756d09ull,
0x3872250920323375ull,0x2c33387225202c34ull,0x646461090a3b3420ull,0x722509203233752eull,
0x2c317225202c3538ull,0x090a3b3438722520ull,0x65726168732e646cull,0x2509203233752e64ull,
0x72255b202c363872ull,0x090a3b5d302b3538ull,0x203233732e646461ull,0x25202c3738722509ull,
0x3b343736202c3272ull,0x33732e766f6d090aull,0x2c38387225092032ull,0x3536313334312d20ull,
0x6d090a3b35363735ull,0x09203233732e766full,0x3b30202c39387225ull,0x6c2e70746573090aull,
0x2509203233732e74ull,0x37387225202c3670ull,0x0a3b39387225202cull,0x3233732e73626109ull,
0x202c303972250920ull,0x6d090a3b37387225ull,0x33752e69682e6c75ull,0x2c31397225092032ull,
0x25202c3039722520ull,0x6873090a3b383872ull,0x2509203233732e72ull,0x397225202c323972ull,
0x40090a3b39202c31ull,0x2e62757320367025ull,0x3972250920323373ull,0x2c39387225202c32ull,
0x090a3b3239722520ull,0x203233732e766f6dull,0x25202c3339722509ull,0x756d090a3b323972ull,
0x3233732e6f6c2e6cull,0x202c343972250920ull,0x3637202c33397225ull,0x2e627573090a3b38ull,
0x3972250920323373ull,0x2c37387225202c35ull,0x090a3b3439722520ull,0x752e6f6c2e6c756dull,
0x3639722509203233ull,0x202c35397225202cull,0x2e646461090a3b34ull,0x3972250920323375ull,
0x202c317225202c37ull,0x6c090a3b36397225ull,0x6465726168732e64ull,0x722509203233752eull,
0x3972255b202c3839ull,0x61090a3b5d302b37ull,0x09203233732e6464ull,0x7225202c39397225ull,
0x3b327225202c3033ull,0x6e6f632e646c090aull,0x09203233752e7473ull,0x5b202c3030317225ull,
0x090a3b5d6b73616dull,0x203233622e646e61ull,0x202c313031722509ull,0x25202c3030317225ull,
0x6f6d090a3b363872ull,0x2509203233752e76ull,0x6873202c32303172ull,0x090a3b6c62745f31ull,
0x203233752e646461ull,0x202c333031722509ull,0x7225202c37327225ull,0x6f6d090a3b323031ull,
0x2509203233752e76ull,0x6873202c34303172ull,0x090a3b6c62745f32ull,0x203233752e646461ull,
0x202c353031722509ull,0x7225202c37327225ull,0x6461090a3b343031ull,0x2509203233732e64ull,
0x7225202c36303172ull,0x3b333736202c3939ull,0x33622e726f78090aull,0x3730317225092032ull,
0x2c3130317225202cull,0x090a3b3839722520ull,0x74736e6f632e646cull,0x722509203233732eull,
0x72255b202c383031ull,0x0a3b5d302b333031ull,0x736e6f632e646c09ull,0x2509203233732e74ull,
0x255b202c39303172ull,0x3b5d302b35303172ull,0x33732e766f6d090aull,0x3031317225092032ull,
0x36313334312d202cull,0x090a3b3536373535ull,0x203233732e766f6dull,0x202c313131722509ull,
0x70746573090a3b30ull,0x203233732e746c2eull,0x7225202c37702509ull,0x317225202c363031ull,
0x736261090a3b3131ull,0x722509203233732eull,0x317225202c323131ull,0x6c756d090a3b3630ull,
0x203233752e69682eull,0x202c333131722509ull,0x25202c3231317225ull,0x73090a3b30313172ull,
0x09203233732e7268ull,0x25202c3431317225ull,0x3b39202c33313172ull,0x732037702540090aull,
0x09203233732e6275ull,0x25202c3431317225ull,0x7225202c31313172ull,0x6f6d090a3b343131ull,
0x2509203233732e76ull,0x7225202c35313172ull,0x756d090a3b343131ull,0x3233732e6f6c2e6cull,
0x2c36313172250920ull,0x202c353131722520ull,0x7573090a3b383637ull,0x2509203233732e62ull,
0x7225202c37313172ull,0x317225202c363031ull,0x6c6873090a3b3631ull,0x722509203233622eull,
0x317225202c383131ull,0x30317225202c3730ull,0x2e6c756d090a3b38ull,0x09203233752e6f6cull,
0x25202c3931317225ull,0x3b34202c37313172ull,0x33622e726f78090aull,0x3032317225092032ull,
0x2c3730317225202cull,0x0a3b383131722520ull,0x3233752e64646109ull,0x2c31323172250920ull,
0x202c393131722520ull,0x646c090a3b317225ull,0x2e6465726168732eull,0x3172250920323375ull,
0x3172255b202c3232ull,0x090a3b5d302b3132ull,0x203233752e726873ull,0x202c333231722509ull,
0x25202c3232317225ull,0x78090a3b39303172ull,0x09203233622e726full,0x25202c3432317225ull,
0x7225202c30323172ull,0x756d090a3b333231ull,0x752e656469772e6cull,0x3231722509203631ull,
0x2c31687225202c35ull,0x6f6d090a3b363120ull,0x2509203233752e76ull,0x6170202c36323172ull,
0x3b6c62745f6d6172ull,0x33622e646e61090aull,0x3732317225092032ull,0x2c3432317225202cull,
0x6461090a3b353120ull,0x2509203233752e64ull,0x7225202c38323172ull,0x317225202c353231ull,
0x6c756d090a3b3732ull,0x203233752e6f6c2eull,0x202c393231722509ull,0x34202c3832317225ull,
0x752e646461090a3bull,0x3331722509203233ull,0x3632317225202c30ull,0x3b3932317225202cull,
0x6e6f632e646c090aull,0x09203233752e7473ull,0x5b202c3133317225ull,0x5d302b3033317225ull,
0x09636f6c2e090a3bull,0x3009383631093132ull,0x33622e726f78090aull,0x3233317225092032ull,
0x2c3432317225202cull,0x0a3b313331722520ull,0x726168732e747309ull,0x09203233752e6465ull,
0x3230312b3772255bull,0x33317225202c5d34ull,0x636f6c2e090a3b32ull,0x0930373109313209ull,
0x732e646461090a30ull,0x3331722509203233ull,0x2c39397225202c33ull,0x6d090a3b32373620ull,
0x09203233732e766full,0x2d202c3433317225ull,0x3735353631333431ull,0x766f6d090a3b3536ull,
0x722509203233732eull,0x0a3b30202c353331ull,0x746c2e7074657309ull,0x702509203233732eull,
0x3333317225202c38ull,0x3b3533317225202cull,0x33732e736261090aull,0x3633317225092032ull,
0x3b3333317225202cull,0x69682e6c756d090aull,0x722509203233752eull,0x317225202c373331ull,
0x33317225202c3633ull,0x2e726873090a3b34ull,0x3172250920323373ull,0x33317225202c3833ull,
0x40090a3b39202c37ull,0x2e62757320387025ull,0x3172250920323373ull,0x33317225202c3833ull,
0x3833317225202c35ull,0x732e766f6d090a3bull,0x3331722509203233ull,0x3833317225202c39ull,
0x6c2e6c756d090a3bull,0x2509203233732e6full,0x7225202c30343172ull,0x383637202c393331ull,
0x732e627573090a3bull,0x3431722509203233ull,0x3333317225202c31ull,0x3b3034317225202cull,
0x6f6c2e6c756d090aull,0x722509203233752eull,0x317225202c323431ull,0x090a3b34202c3134ull,
0x203233752e646461ull,0x202c333431722509ull,0x317225202c317225ull,0x2e646c090a3b3234ull,
0x752e646572616873ull,0x3431722509203233ull,0x343172255b202c34ull,0x73090a3b5d302b33ull,
0x09203233752e7268ull,0x25202c3534317225ull,0x3631202c34343172ull,0x622e726f78090a3bull,
0x3431722509203233ull,0x3534317225202c36ull,0x3b3434317225202cull,0x33752e766f6d090aull,
0x3734317225092032ull,0x7265706d6574202cull,0x73090a3b6c62745full,0x09203233752e7268ull,
0x25202c3834317225ull,0x3b38202c36343172ull,0x33622e726f78090aull,0x3934317225092032ull,
0x2c3634317225202cull,0x0a3b383431722520ull,0x3233622e646e6109ull,0x2c30353172250920ull,
0x202c393431722520ull,0x646461090a3b3531ull,0x722509203233752eull,0x317225202c313531ull,
0x35317225202c3532ull,0x2e6c756d090a3b30ull,0x09203233752e6f6cull,0x25202c3235317225ull,
0x3b34202c31353172ull,0x33752e646461090aull,0x3335317225092032ull,0x2c3734317225202cull,
0x0a3b323531722520ull,0x736e6f632e646c09ull,0x2509203233752e74ull,0x255b202c34353172ull,
0x3b5d302b33353172ull,0x33622e726f78090aull,0x2c35337225092032ull,0x202c343531722520ull,
0x090a3b3233317225ull,0x09313209636f6c2eull,0x62090a3009353731ull,0x0920696e752e6172ull,
0x31355f315f744c24ull,0x315f744c240a3b34ull,0x090a3a363230315full,0x09313209636f6c2eull,
0x6c090a3009393731ull,0x6465726168732e64ull,0x722509203233752eull,0x72255b202c353531ull,
0x0a3b5d3434362b37ull,0x726168732e646c09ull,0x09203233752e6465ull,0x5b202c3635317225ull,
0x5d3834362b377225ull,0x732e646461090a3bull,0x3531722509203233ull,0x2c30337225202c37ull,
0x6c090a3b32722520ull,0x2e74736e6f632e64ull,0x3172250920323375ull,0x73616d5b202c3835ull,
0x646e61090a3b5d6bull,0x722509203233622eull,0x317225202c393531ull,0x35317225202c3835ull,
0x2e766f6d090a3b35ull,0x3172250920323375ull,0x5f316873202c3036ull,0x6461090a3b6c6274ull,
0x2509203233752e64ull,0x7225202c31363172ull,0x36317225202c3732ull,0x2e766f6d090a3b30ull,
0x3172250920323375ull,0x5f326873202c3236ull,0x6461090a3b6c6274ull,0x2509203233752e64ull,
0x7225202c33363172ull,0x36317225202c3732ull,0x2e6c756d090a3b32ull,0x09203233752e6f6cull,
0x25202c3436317225ull,0x3b34202c37353172ull,0x33622e726f78090aull,0x3536317225092032ull,
0x2c3935317225202cull,0x0a3b363531722520ull,0x736e6f632e646c09ull,0x2509203233732e74ull,
0x255b202c36363172ull,0x3b5d302b31363172ull,0x6e6f632e646c090aull,0x09203233732e7473ull,
0x5b202c3736317225ull,0x5d302b3336317225ull,0x752e646461090a3bull,0x3631722509203233ull,
0x3436317225202c38ull,0x090a3b317225202cull,0x203233622e6c6873ull,0x202c393631722509ull,
0x25202c3536317225ull,0x6c090a3b36363172ull,0x6465726168732e64ull,0x722509203233752eull,
0x72255b202c303731ull,0x5d3434362b383631ull,0x622e726f78090a3bull,0x3731722509203233ull,
0x3536317225202c31ull,0x3b3936317225202cull,0x33752e726873090aull,0x3237317225092032ull,
0x2c3037317225202cull,0x0a3b373631722520ull,0x3233622e726f7809ull,0x2c33373172250920ull,
0x202c313731722520ull,0x090a3b3237317225ull,0x656469772e6c756dull,0x722509203631752eull,
0x687225202c343731ull,0x090a3b3631202c31ull,0x203233752e766f6dull,0x202c353731722509ull,
0x62745f6d61726170ull,0x2e646e61090a3b6cull,0x3172250920323362ull,0x37317225202c3637ull,
0x090a3b3531202c33ull,0x203233752e646461ull,0x202c373731722509ull,0x25202c3437317225ull,
0x6d090a3b36373172ull,0x33752e6f6c2e6c75ull,0x3837317225092032ull,0x2c3737317225202cull,
0x646461090a3b3420ull,0x722509203233752eull,0x317225202c393731ull,0x37317225202c3537ull,
0x632e646c090a3b38ull,0x3233752e74736e6full,0x2c30383172250920ull,0x2b39373172255b20ull,
0x6f6c2e090a3b5d30ull,0x3438310931320963ull,0x2e726f78090a3009ull,0x3172250920323362ull,
0x37317225202c3138ull,0x3038317225202c33ull,0x68732e7473090a3bull,0x3233752e64657261ull,
0x322b3772255b0920ull,0x7225202c5d383430ull,0x6c2e090a3b313831ull,0x383109313209636full,
0x2e646c090a300936ull,0x752e646572616873ull,0x3831722509203233ull,0x363172255b202c32ull,
0x0a3b5d3034362b38ull,0x3233752e72687309ull,0x2c33383172250920ull,0x202c323831722520ull,
0x726f78090a3b3631ull,0x722509203233622eull,0x317225202c343831ull,0x38317225202c3338ull,
0x2e766f6d090a3b32ull,0x3172250920323375ull,0x706d6574202c3538ull,0x0a3b6c62745f7265ull,
0x3233752e72687309ull,0x2c36383172250920ull,0x202c343831722520ull,0x2e726f78090a3b38ull,
0x3172250920323362ull,0x38317225202c3738ull,0x3638317225202c34ull,0x622e646e61090a3bull,
0x3831722509203233ull,0x3738317225202c38ull,0x61090a3b3531202cull,0x09203233752e6464ull,
0x25202c3938317225ull,0x7225202c34373172ull,0x756d090a3b383831ull,0x3233752e6f6c2e6cull,
0x2c30393172250920ull,0x202c393831722520ull,0x2e646461090a3b34ull,0x3172250920323375ull,
0x38317225202c3139ull,0x3039317225202c35ull,0x6f632e646c090a3bull,0x203233752e74736eull,
0x202c323931722509ull,0x302b31393172255bull,0x2e726f78090a3b5dull,0x3372250920323362ull,
0x3239317225202c35ull,0x3b3138317225202cull,0x355f315f744c240aull,0x6f6c2e090a3a3431ull,
0x3039310931320963ull,0x2e726162090a3009ull,0x3b300920636e7973ull,0x3209636f6c2e090aull,
0x090a300933350930ull,0x6d617261702e646cull,0x722509203233752eull,0x5f5f5b202c333931ull,
0x6d72617061647563ull,0x74736574385a5f5full,0x32506a505047544dull,0x5f32337067746d32ull,
0x735f6c656e72656bull,0x5f745f7375746174ull,0x0a3b5d6174616464ull,0x3233752e64646109ull,
0x2c34393172250920ull,0x202c333931722520ull,0x7473090a3b337225ull,0x2e6c61626f6c672eull,
0x72255b0920323375ull,0x202c5d302b343931ull,0x2e090a3b35337225ull,0x3509303209636f6cull,
0x697865090a300938ull,0x6557444c240a3b74ull,0x6574385a5f5f646eull,0x6a505047544d7473ull,
0x337067746d323250ull,0x6c656e72656b5f32ull,0x5f7375746174735full,0x2f2f207d090a3a74ull,
0x74736574385a5f20ull,0x32506a505047544dull,0x5f32337067746d32ull,0x735f6c656e72656bull,
0x0a745f7375746174ull,0x2074736e6f632e09ull,0x34206e67696c612eull,0x6e69732038622e20ull,
0x706d65745f656c67ull,0x315b6c62745f7265ull,0x0a0a3b5d30303832ull,0x0000000000000000ull
};


}


static __cudaFatPtxEntry __ptxEntries [] = {{(char*)"compute_11",(char*)__deviceText_$compute_11$},{0,0}};
static __cudaFatCubinEntry __cubinEntries[] = {{0,0}};
static __cudaFatDebugEntry __debugEntries0 = {0, 0, 0, 0} ;
static __cudaFatElfEntry __elfEntries0 = {0, 0, 0, 0} ;



static __cudaFatCudaBinary __fatDeviceText __attribute__ ((section ("__NV_CUDA,__fatbin")))= {0x1ee55a01,0x00000004,0xa14f518d,(char*)"014eac4fa26225e8",(char*)"main.cu",(char*)"-v  ",__ptxEntries,__cubinEntries,&__debugEntries0,0,0,0,0,0,0xa2834b55,&__elfEntries0};
# 3 "/tmp/tmpxft_00000637_00000000-1_main.cudafe1.stub.c" 2
struct __T20 {uint32_t *__par0;MyRNG *__par1;int __dummy_field;};
struct __T21 {uint32_t *__par0;struct mtgp32_kernel_status_t *__par1;int __dummy_field;};
extern void __device_stub__Z13testShoveRandPjP3RNGIi4MTGPE(uint32_t *, MyRNG *);
extern void __device_stub__Z8testMTGPPjP22mtgp32_kernel_status_t(uint32_t *, struct mtgp32_kernel_status_t *);
static void __sti____cudaRegisterAll_39_tmpxft_00000637_00000000_4_main_cpp1_ii_mask(void) __attribute__((__constructor__));
void __device_stub__Z13testShoveRandPjP3RNGIi4MTGPE(uint32_t *__par0, MyRNG *__par1){ struct __T20 *__T224 = 0;
if (cudaSetupArgument((void*)(char*)&__par0, sizeof(__par0), (size_t)&__T224->__par0) != cudaSuccess) return;if (cudaSetupArgument((void*)(char*)&__par1, sizeof(__par1), (size_t)&__T224->__par1) != cudaSuccess) return;{ volatile static char *__f; __f = ((char *)((void ( *)(uint32_t *, MyRNG *))testShoveRand)); (void)cudaLaunch(((char *)((void ( *)(uint32_t *, MyRNG *))testShoveRand))); };}
void testShoveRand( uint32_t *__cuda_0,MyRNG *__cuda_1)
# 33 "main.cu"
{__device_stub__Z13testShoveRandPjP3RNGIi4MTGPE( __cuda_0,__cuda_1);
# 42 "main.cu"
}
# 1 "/tmp/tmpxft_00000637_00000000-1_main.cudafe1.stub.c"
void __device_stub__Z8testMTGPPjP22mtgp32_kernel_status_t( uint32_t *__par0, struct mtgp32_kernel_status_t *__par1) { struct __T21 *__T225 = 0;
if (cudaSetupArgument((void*)(char*)&__par0, sizeof(__par0), (size_t)&__T225->__par0) != cudaSuccess) return; if (cudaSetupArgument((void*)(char*)&__par1, sizeof(__par1), (size_t)&__T225->__par1) != cudaSuccess) return; { volatile static char *__f; __f = ((char *)((void ( *)(uint32_t *, struct mtgp32_kernel_status_t *))testMTGP)); (void)cudaLaunch(((char *)((void ( *)(uint32_t *, struct mtgp32_kernel_status_t *))testMTGP))); }; }
void testMTGP( uint32_t *__cuda_0,struct mtgp32_kernel_status_t *__cuda_1)
# 45 "main.cu"
{__device_stub__Z8testMTGPPjP22mtgp32_kernel_status_t( __cuda_0,__cuda_1);
# 58 "main.cu"
}
# 1 "/tmp/tmpxft_00000637_00000000-1_main.cudafe1.stub.c"
static void __sti____cudaRegisterAll_39_tmpxft_00000637_00000000_4_main_cpp1_ii_mask(void) { __cudaFatCubinHandle = __cudaRegisterFatBinary((void*)&__fatDeviceText); atexit(__cudaUnregisterBinaryUtil); __cudaRegisterFunction(__cudaFatCubinHandle, (const char*)((void ( *)(uint32_t *, struct mtgp32_kernel_status_t *))testMTGP), (char*)"_Z8testMTGPPjP22mtgp32_kernel_status_t", "_Z8testMTGPPjP22mtgp32_kernel_status_t", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0); __cudaRegisterFunction(__cudaFatCubinHandle, (const char*)((void ( *)(uint32_t *, MyRNG *))testShoveRand), (char*)"_Z13testShoveRandPjP3RNGIi4MTGPE", "_Z13testShoveRandPjP3RNGIi4MTGPE", -1, (uint3*)0, (uint3*)0, (dim3*)0, (dim3*)0, (int*)0); __cudaRegisterVar(__cudaFatCubinHandle, (char*)&param_tbl, (char*)"param_tbl", "param_tbl", 0, 12800, 1, 0); __cudaRegisterVar(__cudaFatCubinHandle, (char*)&temper_tbl, (char*)"temper_tbl", "temper_tbl", 0, 12800, 1, 0); __cudaRegisterVar(__cudaFatCubinHandle, (char*)&single_temper_tbl, (char*)"single_temper_tbl", "single_temper_tbl", 0, 12800, 1, 0); __cudaRegisterVar(__cudaFatCubinHandle, (char*)&pos_tbl, (char*)"pos_tbl", "pos_tbl", 0, 800, 1, 0); __cudaRegisterVar(__cudaFatCubinHandle, (char*)&sh1_tbl, (char*)"sh1_tbl", "sh1_tbl", 0, 800, 1, 0); __cudaRegisterVar(__cudaFatCubinHandle, (char*)&sh2_tbl, (char*)"sh2_tbl", "sh2_tbl", 0, 800, 1, 0); __cudaRegisterVar(__cudaFatCubinHandle, (char*)&mask, (char*)"mask", "mask", 0, 4, 1, 0); }
# 1 "/tmp/tmpxft_00000637_00000000-1_main.cudafe1.stub.c" 2
