/**
 * @file utils.cxx
 *
 * @brief utility program for CUDA implementation of TinyMT.
 *
 * This is utility program for CUDA implementation of TinyMT.
 *
 * @author Mutsuo Saito (Hiroshima University)
 * @author Makoto Matsumoto (The University of Tokyo)
 * @author jH@CKtheRipper [generic version]
 *
 * Copyright (C) 2011 Mutsuo Saito, Makoto Matsumoto,
 * Hiroshima University and The University of Tokyo.
 * All rights reserved.
 *
 * The 3-clause BSD License is applied to this software, see LICENSE.txt
 * Modified by jH@CKtheRipper, 11/3/11
 */
#include <cstdio>
#include <cerrno>
#include <cstdlib>
#include <cstring>

namespace shoverand {
	namespace utils {
	
		/**
		* This function reads parameter from file and puts them in an array.
		* The file should be the output of tinymtXXdc.
		*
		* @param filename name of the file generated by tinymtXXdc.
		* @param params output array of this function.
		* number of elements of the array is num_params * 3.
		* @param num_param number of parameters
		* @return 0 if normal end.
		*/
		template <class UINT_TYPE>
		int TinyMT<UINT_TYPE>::tinymt_set_params(const char* filename, UINT_TYPE* params, int num_param) {
			
			FILE *ifp;
			int rc;
			UINT_TYPE mat1 = 0;
			UINT_TYPE mat2 = 0;
			UINT_TYPE tmat = 0;
			int i;
			
			ifp = fopen(filename, "r");
			if (ifp == NULL) {
				return -1;
			}
			for (i = 0; i < num_param; i++) {
				rc = TinyMT<UINT_TYPE>::read_line(&mat1, &mat2, &tmat, ifp);
				if (rc != 0) {
						return -2;
				}
				params[i * 3 + 0] = mat1;
				params[i * 3 + 1] = mat2;
				params[i * 3 + 2] = tmat;
			}
			fclose(ifp);
			return 0;
		}

		/**
		* read line from fp and set parametes to mat1, mat2, tmat.
		* The format of the file should be that of tinymtXXdc's output.
		*
		* @param mat1 output mat1 parameter.
		* @param mat2 output mat2 parameter.
		* @param tmat output tmat parameter.
		* @param fp file pointer.
		* @return 0 if normal end.
		*/
		template <class UINT_TYPE>
		int TinyMT<UINT_TYPE>::read_line(UINT_TYPE* mat1, UINT_TYPE* mat2, UINT_TYPE* tmat, FILE* fp) {
			
			char buff[BUFF_SIZE];
			char * p;
			UINT_TYPE num;
			
			errno = 0;
			
			for (;;) {
				if (feof(fp) || ferror(fp)) {
						return -1;
				}
				fgets(buff, BUFF_SIZE, fp);
				if (errno) {
						return errno;
				}
				if (buff[0] != '#') {
						break;
				}
			}
			p = buff;
			for (int i = 0; i < 3; i++) {
				p = strchr(p, ',');
				if (p == NULL) {
						return -1;
				}
				p++;
			}
			num = strtoul(p, &p, 16);
			if (errno) {
				return errno;
			}
			*mat1 = num;
			p++;
			num = strtoul(p, &p, 16);
			if (errno) {
				return errno;
			}
			*mat2 = num;
			p++;
			num = strtoul(p, &p, 16);
			if (errno) {
				return errno;
			}
			*tmat = num;
			return 0;
		}

	} // end of namespace utils
} // end of namespace shoverand
