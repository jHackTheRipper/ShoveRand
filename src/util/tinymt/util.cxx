/**
 * @file util.cxx
 *
 * @brief utility program for CUDA implementation of TinyMT.
 *
 * This is utility program for CUDA implementation of TinyMT.
 *
 * @author Mutsuo Saito (Hiroshima University)
 * @author Makoto Matsumoto (The University of Tokyo)
 * @author jH@CKtheRipper [generic version]
 *
 * Copyright (C) 2011 Mutsuo Saito, Makoto Matsumoto,
 * Hiroshima University and The University of Tokyo.
 * All rights reserved.
 *
 * The 3-clause BSD License is applied to this software, see LICENSE.txt
 * Modified by jH@CKtheRipper, 11/3/11
 */
#include <cstdio>
#include <cerrno>
#include <cstdlib>
#include <cstring>

namespace shoverand {
	namespace util {
	
		/**
		* This function reads parameter from file and puts them in an array.
		* The file should be the output of tinymtXXdc.
		*
		* @param filename name of the file generated by tinymtXXdc.
		* @param inMat1 mat1 parameter of tinymt to be filled in
		* @param inMat2 mat2 parameter of tinymt to be filled in
		* @param inTMat tmat parameter of tinymt to be filled in
		* @param num_param number of parameters
		* @return 0 if normal end.
		*/
		template <class UINT_TYPE>
		int TinyMT<UINT_TYPE>::setParams(const char* filename,
										 UINT_TYPE* inMat1,
										 UINT_TYPE* inMat2,
										 UINT_TYPE* inTMat,
										 int num_param) {

			FILE *ifp;
			int rc;
			int i;

			ifp = fopen(filename, "r");
			if (ifp == NULL) {
				return -1;
			}
			for (i = 0; i < num_param; i++) {
				rc = TinyMT<UINT_TYPE>::readLine(inMat1, inMat2, inTMat, ifp);
				if (rc != 0) {
						return -2;
				}
			}
			fclose(ifp);
			return 0;
		}

		/**
		* read line from fp and set parametes to mat1, mat2, tmat.
		* The format of the file should be that of tinymtXXdc's output.
		*
		* @param mat1 output mat1 parameter.
		* @param mat2 output mat2 parameter.
		* @param tmat output tmat parameter.
		* @param fp file pointer.
		* @return 0 if normal end.
		*/
		template <class UINT_TYPE>
		int TinyMT<UINT_TYPE>::readLine(UINT_TYPE* mat1, UINT_TYPE* mat2, UINT_TYPE* tmat, FILE* fp) {

			char buff[BUFF_SIZE];
			char * p;
			UINT_TYPE num;

			errno = 0;

			for (;;) {
				if (feof(fp) || ferror(fp)) {
						return -1;
				}
				fgets(buff, BUFF_SIZE, fp);
				if (errno) {
						return errno;
				}
				if (buff[0] != '#') {
						break;
				}
			}
			p = buff;
			for (int i = 0; i < 3; i++) {
				p = strchr(p, ',');
				if (p == NULL) {
						return -1;
				}
				p++;
			}
			num = strtoul(p, &p, 16);
			if (errno) {
				return errno;
			}
			*mat1 = num;
			p++;
			num = strtoul(p, &p, 16);
			if (errno) {
				return errno;
			}
			*mat2 = num;
			p++;
			num = strtoul(p, &p, 16);
			if (errno) {
				return errno;
			}
			*tmat = num;
			return 0;
		}

	} // end of namespace util
} // end of namespace shoverand
